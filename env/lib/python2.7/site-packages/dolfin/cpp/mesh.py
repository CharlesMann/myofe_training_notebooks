# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _mesh.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_mesh')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_mesh')
    _mesh = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mesh', [dirname(__file__)])
        except ImportError:
            import _mesh
            return _mesh
        try:
            _mod = imp.load_module('_mesh', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _mesh = swig_import_helper()
    del swig_import_helper
else:
    import _mesh
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _mesh.SHARED_PTR_DISOWN

def _attach_base_to_numpy_array(obj, owner):
    return _mesh._attach_base_to_numpy_array(obj, owner)
_attach_base_to_numpy_array = _mesh._attach_base_to_numpy_array

def dolfin_swigversion():
    return _mesh.dolfin_swigversion()
dolfin_swigversion = _mesh.dolfin_swigversion

def dolfin_pythonversion():
    return _mesh.dolfin_pythonversion()
dolfin_pythonversion = _mesh.dolfin_pythonversion

tmp = hex(dolfin_swigversion())
__swigversion__ = "%d.%d.%d"%(tuple(map(int, [tmp[-5], tmp[-3], tmp[-2:]])))
tmp = hex(dolfin_pythonversion())
__pythonversion__ = "%d.%d.%d"%(tuple(map(lambda x: int(x,16), [tmp[2], tmp[3:5], tmp[5:7]])))
del tmp, dolfin_pythonversion, dolfin_swigversion


def has_petsc4py():
    return _mesh.has_petsc4py()
has_petsc4py = _mesh.has_petsc4py

def has_slepc4py():
    return _mesh.has_slepc4py()
has_slepc4py = _mesh.has_slepc4py
UFC_VERSION_MAJOR = _mesh.UFC_VERSION_MAJOR
UFC_VERSION_MINOR = _mesh.UFC_VERSION_MINOR
UFC_VERSION_MAINTENANCE = _mesh.UFC_VERSION_MAINTENANCE
UFC_VERSION_RELEASE = _mesh.UFC_VERSION_RELEASE
ufc_shape_interval = _mesh.ufc_shape_interval
ufc_shape_triangle = _mesh.ufc_shape_triangle
ufc_shape_quadrilateral = _mesh.ufc_shape_quadrilateral
ufc_shape_tetrahedron = _mesh.ufc_shape_tetrahedron
ufc_shape_hexahedron = _mesh.ufc_shape_hexahedron
class ufc_cell(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _mesh.delete_ufc_cell
    cell_shape = _swig_property(_mesh.ufc_cell_cell_shape_get, _mesh.ufc_cell_cell_shape_set)
    topological_dimension = _swig_property(_mesh.ufc_cell_topological_dimension_get, _mesh.ufc_cell_topological_dimension_set)
    geometric_dimension = _swig_property(_mesh.ufc_cell_geometric_dimension_get, _mesh.ufc_cell_geometric_dimension_set)
    index = _swig_property(_mesh.ufc_cell_index_get, _mesh.ufc_cell_index_set)
    local_facet = _swig_property(_mesh.ufc_cell_local_facet_get, _mesh.ufc_cell_local_facet_set)
    mesh_identifier = _swig_property(_mesh.ufc_cell_mesh_identifier_get, _mesh.ufc_cell_mesh_identifier_set)
ufc_cell_swigregister = _mesh.ufc_cell_swigregister
ufc_cell_swigregister(ufc_cell)
cvar = _mesh.cvar
UFC_VERSION = cvar.UFC_VERSION

class ufc_function(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mesh.delete_ufc_function
ufc_function_swigregister = _mesh.ufc_function_swigregister
ufc_function_swigregister(ufc_function)

class ufc_finite_element(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mesh.delete_ufc_finite_element
ufc_finite_element_swigregister = _mesh.ufc_finite_element_swigregister
ufc_finite_element_swigregister(ufc_finite_element)

class ufc_dofmap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mesh.delete_ufc_dofmap
ufc_dofmap_swigregister = _mesh.ufc_dofmap_swigregister
ufc_dofmap_swigregister(ufc_dofmap)

class ufc_coordinate_mapping(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mesh.delete_ufc_coordinate_mapping
ufc_coordinate_mapping_swigregister = _mesh.ufc_coordinate_mapping_swigregister
ufc_coordinate_mapping_swigregister(ufc_coordinate_mapping)

class ufc_form(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mesh.delete_ufc_form
ufc_form_swigregister = _mesh.ufc_form_swigregister
ufc_form_swigregister(ufc_form)


def make_ufc_finite_element(*args):
    return _mesh.make_ufc_finite_element(*args)
make_ufc_finite_element = _mesh.make_ufc_finite_element

def make_ufc_dofmap(*args):
    return _mesh.make_ufc_dofmap(*args)
make_ufc_dofmap = _mesh.make_ufc_dofmap

def make_ufc_coordinate_mapping(*args):
    return _mesh.make_ufc_coordinate_mapping(*args)
make_ufc_coordinate_mapping = _mesh.make_ufc_coordinate_mapping

def make_ufc_form(*args):
    return _mesh.make_ufc_form(*args)
make_ufc_form = _mesh.make_ufc_form
import common
class HierarchicalFunctionSpace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, arg2):
        _mesh.HierarchicalFunctionSpace_swiginit(self, _mesh.new_HierarchicalFunctionSpace(arg2))
    __swig_destroy__ = _mesh.delete_HierarchicalFunctionSpace
HierarchicalFunctionSpace.depth = new_instancemethod(_mesh.HierarchicalFunctionSpace_depth, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace.has_parent = new_instancemethod(_mesh.HierarchicalFunctionSpace_has_parent, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace.has_child = new_instancemethod(_mesh.HierarchicalFunctionSpace_has_child, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace._parent = new_instancemethod(_mesh.HierarchicalFunctionSpace__parent, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace._child = new_instancemethod(_mesh.HierarchicalFunctionSpace__child, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace._root_node = new_instancemethod(_mesh.HierarchicalFunctionSpace__root_node, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace._leaf_node = new_instancemethod(_mesh.HierarchicalFunctionSpace__leaf_node, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace.set_parent = new_instancemethod(_mesh.HierarchicalFunctionSpace_set_parent, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace.clear_child = new_instancemethod(_mesh.HierarchicalFunctionSpace_clear_child, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace.set_child = new_instancemethod(_mesh.HierarchicalFunctionSpace_set_child, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace._debug = new_instancemethod(_mesh.HierarchicalFunctionSpace__debug, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace_swigregister = _mesh.HierarchicalFunctionSpace_swigregister
HierarchicalFunctionSpace_swigregister(HierarchicalFunctionSpace)

class HierarchicalFunction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, arg2):
        _mesh.HierarchicalFunction_swiginit(self, _mesh.new_HierarchicalFunction(arg2))
    __swig_destroy__ = _mesh.delete_HierarchicalFunction
HierarchicalFunction.depth = new_instancemethod(_mesh.HierarchicalFunction_depth, None, HierarchicalFunction)
HierarchicalFunction.has_parent = new_instancemethod(_mesh.HierarchicalFunction_has_parent, None, HierarchicalFunction)
HierarchicalFunction.has_child = new_instancemethod(_mesh.HierarchicalFunction_has_child, None, HierarchicalFunction)
HierarchicalFunction._parent = new_instancemethod(_mesh.HierarchicalFunction__parent, None, HierarchicalFunction)
HierarchicalFunction._child = new_instancemethod(_mesh.HierarchicalFunction__child, None, HierarchicalFunction)
HierarchicalFunction._root_node = new_instancemethod(_mesh.HierarchicalFunction__root_node, None, HierarchicalFunction)
HierarchicalFunction._leaf_node = new_instancemethod(_mesh.HierarchicalFunction__leaf_node, None, HierarchicalFunction)
HierarchicalFunction.set_parent = new_instancemethod(_mesh.HierarchicalFunction_set_parent, None, HierarchicalFunction)
HierarchicalFunction.clear_child = new_instancemethod(_mesh.HierarchicalFunction_clear_child, None, HierarchicalFunction)
HierarchicalFunction.set_child = new_instancemethod(_mesh.HierarchicalFunction_set_child, None, HierarchicalFunction)
HierarchicalFunction._debug = new_instancemethod(_mesh.HierarchicalFunction__debug, None, HierarchicalFunction)
HierarchicalFunction_swigregister = _mesh.HierarchicalFunction_swigregister
HierarchicalFunction_swigregister(HierarchicalFunction)

class cells(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.cells_swiginit(self, _mesh.new_cells(*args))
    __swig_destroy__ = _mesh.delete_cells

    def pos(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.cells_pos(self)


    def __eq__(self, it):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.cells___eq__(self, it)


    def __ne__(self, it):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.cells___ne__(self, it)


    def end(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.cells_end(self)


    def end_iterator(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.cells_end_iterator(self)


    def __iter__(self):
        self.first = True
        return self

    def __next__(self):
        self.first = self.first if hasattr(self,"first") else True
        if not self.first:
            self._increment()
        if self.end():
            self._decrease()
            raise StopIteration
        self.first = False
        return self._dereference()

    #Py2/Py3
    next = __next__


cells.pos = new_instancemethod(_mesh.cells_pos, None, cells)
cells.__eq__ = new_instancemethod(_mesh.cells___eq__, None, cells)
cells.__ne__ = new_instancemethod(_mesh.cells___ne__, None, cells)
cells.end = new_instancemethod(_mesh.cells_end, None, cells)
cells.end_iterator = new_instancemethod(_mesh.cells_end_iterator, None, cells)
cells._increment = new_instancemethod(_mesh.cells__increment, None, cells)
cells._decrease = new_instancemethod(_mesh.cells__decrease, None, cells)
cells._dereference = new_instancemethod(_mesh.cells__dereference, None, cells)
cells_swigregister = _mesh.cells_swigregister
cells_swigregister(cells)

class edges(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.edges_swiginit(self, _mesh.new_edges(*args))
    __swig_destroy__ = _mesh.delete_edges

    def pos(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.edges_pos(self)


    def __eq__(self, it):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.edges___eq__(self, it)


    def __ne__(self, it):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.edges___ne__(self, it)


    def end(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.edges_end(self)


    def end_iterator(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.edges_end_iterator(self)


    def __iter__(self):
        self.first = True
        return self

    def __next__(self):
        self.first = self.first if hasattr(self,"first") else True
        if not self.first:
            self._increment()
        if self.end():
            self._decrease()
            raise StopIteration
        self.first = False
        return self._dereference()

    #Py2/Py3
    next = __next__


edges.pos = new_instancemethod(_mesh.edges_pos, None, edges)
edges.__eq__ = new_instancemethod(_mesh.edges___eq__, None, edges)
edges.__ne__ = new_instancemethod(_mesh.edges___ne__, None, edges)
edges.end = new_instancemethod(_mesh.edges_end, None, edges)
edges.end_iterator = new_instancemethod(_mesh.edges_end_iterator, None, edges)
edges._increment = new_instancemethod(_mesh.edges__increment, None, edges)
edges._decrease = new_instancemethod(_mesh.edges__decrease, None, edges)
edges._dereference = new_instancemethod(_mesh.edges__dereference, None, edges)
edges_swigregister = _mesh.edges_swigregister
edges_swigregister(edges)

class faces(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.faces_swiginit(self, _mesh.new_faces(*args))
    __swig_destroy__ = _mesh.delete_faces

    def pos(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.faces_pos(self)


    def __eq__(self, it):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.faces___eq__(self, it)


    def __ne__(self, it):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.faces___ne__(self, it)


    def end(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.faces_end(self)


    def end_iterator(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.faces_end_iterator(self)


    def __iter__(self):
        self.first = True
        return self

    def __next__(self):
        self.first = self.first if hasattr(self,"first") else True
        if not self.first:
            self._increment()
        if self.end():
            self._decrease()
            raise StopIteration
        self.first = False
        return self._dereference()

    #Py2/Py3
    next = __next__


faces.pos = new_instancemethod(_mesh.faces_pos, None, faces)
faces.__eq__ = new_instancemethod(_mesh.faces___eq__, None, faces)
faces.__ne__ = new_instancemethod(_mesh.faces___ne__, None, faces)
faces.end = new_instancemethod(_mesh.faces_end, None, faces)
faces.end_iterator = new_instancemethod(_mesh.faces_end_iterator, None, faces)
faces._increment = new_instancemethod(_mesh.faces__increment, None, faces)
faces._decrease = new_instancemethod(_mesh.faces__decrease, None, faces)
faces._dereference = new_instancemethod(_mesh.faces__dereference, None, faces)
faces_swigregister = _mesh.faces_swigregister
faces_swigregister(faces)

class facets(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.facets_swiginit(self, _mesh.new_facets(*args))
    __swig_destroy__ = _mesh.delete_facets

    def pos(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.facets_pos(self)


    def __eq__(self, it):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.facets___eq__(self, it)


    def __ne__(self, it):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.facets___ne__(self, it)


    def end(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.facets_end(self)


    def end_iterator(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.facets_end_iterator(self)


    def __iter__(self):
        self.first = True
        return self

    def __next__(self):
        self.first = self.first if hasattr(self,"first") else True
        if not self.first:
            self._increment()
        if self.end():
            self._decrease()
            raise StopIteration
        self.first = False
        return self._dereference()

    #Py2/Py3
    next = __next__


facets.pos = new_instancemethod(_mesh.facets_pos, None, facets)
facets.__eq__ = new_instancemethod(_mesh.facets___eq__, None, facets)
facets.__ne__ = new_instancemethod(_mesh.facets___ne__, None, facets)
facets.end = new_instancemethod(_mesh.facets_end, None, facets)
facets.end_iterator = new_instancemethod(_mesh.facets_end_iterator, None, facets)
facets._increment = new_instancemethod(_mesh.facets__increment, None, facets)
facets._decrease = new_instancemethod(_mesh.facets__decrease, None, facets)
facets._dereference = new_instancemethod(_mesh.facets__dereference, None, facets)
facets_swigregister = _mesh.facets_swigregister
facets_swigregister(facets)

class vertices(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.vertices_swiginit(self, _mesh.new_vertices(*args))
    __swig_destroy__ = _mesh.delete_vertices

    def pos(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.vertices_pos(self)


    def __eq__(self, it):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.vertices___eq__(self, it)


    def __ne__(self, it):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.vertices___ne__(self, it)


    def end(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.vertices_end(self)


    def end_iterator(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.vertices_end_iterator(self)


    def __iter__(self):
        self.first = True
        return self

    def __next__(self):
        self.first = self.first if hasattr(self,"first") else True
        if not self.first:
            self._increment()
        if self.end():
            self._decrease()
            raise StopIteration
        self.first = False
        return self._dereference()

    #Py2/Py3
    next = __next__


vertices.pos = new_instancemethod(_mesh.vertices_pos, None, vertices)
vertices.__eq__ = new_instancemethod(_mesh.vertices___eq__, None, vertices)
vertices.__ne__ = new_instancemethod(_mesh.vertices___ne__, None, vertices)
vertices.end = new_instancemethod(_mesh.vertices_end, None, vertices)
vertices.end_iterator = new_instancemethod(_mesh.vertices_end_iterator, None, vertices)
vertices._increment = new_instancemethod(_mesh.vertices__increment, None, vertices)
vertices._decrease = new_instancemethod(_mesh.vertices__decrease, None, vertices)
vertices._dereference = new_instancemethod(_mesh.vertices__dereference, None, vertices)
vertices_swigregister = _mesh.vertices_swigregister
vertices_swigregister(vertices)

class HierarchicalMeshFunctionUInt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, arg2):
        _mesh.HierarchicalMeshFunctionUInt_swiginit(self, _mesh.new_HierarchicalMeshFunctionUInt(arg2))
    __swig_destroy__ = _mesh.delete_HierarchicalMeshFunctionUInt
HierarchicalMeshFunctionUInt.depth = new_instancemethod(_mesh.HierarchicalMeshFunctionUInt_depth, None, HierarchicalMeshFunctionUInt)
HierarchicalMeshFunctionUInt.has_parent = new_instancemethod(_mesh.HierarchicalMeshFunctionUInt_has_parent, None, HierarchicalMeshFunctionUInt)
HierarchicalMeshFunctionUInt.has_child = new_instancemethod(_mesh.HierarchicalMeshFunctionUInt_has_child, None, HierarchicalMeshFunctionUInt)
HierarchicalMeshFunctionUInt._parent = new_instancemethod(_mesh.HierarchicalMeshFunctionUInt__parent, None, HierarchicalMeshFunctionUInt)
HierarchicalMeshFunctionUInt._child = new_instancemethod(_mesh.HierarchicalMeshFunctionUInt__child, None, HierarchicalMeshFunctionUInt)
HierarchicalMeshFunctionUInt._root_node = new_instancemethod(_mesh.HierarchicalMeshFunctionUInt__root_node, None, HierarchicalMeshFunctionUInt)
HierarchicalMeshFunctionUInt._leaf_node = new_instancemethod(_mesh.HierarchicalMeshFunctionUInt__leaf_node, None, HierarchicalMeshFunctionUInt)
HierarchicalMeshFunctionUInt.set_parent = new_instancemethod(_mesh.HierarchicalMeshFunctionUInt_set_parent, None, HierarchicalMeshFunctionUInt)
HierarchicalMeshFunctionUInt.clear_child = new_instancemethod(_mesh.HierarchicalMeshFunctionUInt_clear_child, None, HierarchicalMeshFunctionUInt)
HierarchicalMeshFunctionUInt.set_child = new_instancemethod(_mesh.HierarchicalMeshFunctionUInt_set_child, None, HierarchicalMeshFunctionUInt)
HierarchicalMeshFunctionUInt._debug = new_instancemethod(_mesh.HierarchicalMeshFunctionUInt__debug, None, HierarchicalMeshFunctionUInt)
HierarchicalMeshFunctionUInt_swigregister = _mesh.HierarchicalMeshFunctionUInt_swigregister
HierarchicalMeshFunctionUInt_swigregister(HierarchicalMeshFunctionUInt)

class HierarchicalMeshFunctionInt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, arg2):
        _mesh.HierarchicalMeshFunctionInt_swiginit(self, _mesh.new_HierarchicalMeshFunctionInt(arg2))
    __swig_destroy__ = _mesh.delete_HierarchicalMeshFunctionInt
HierarchicalMeshFunctionInt.depth = new_instancemethod(_mesh.HierarchicalMeshFunctionInt_depth, None, HierarchicalMeshFunctionInt)
HierarchicalMeshFunctionInt.has_parent = new_instancemethod(_mesh.HierarchicalMeshFunctionInt_has_parent, None, HierarchicalMeshFunctionInt)
HierarchicalMeshFunctionInt.has_child = new_instancemethod(_mesh.HierarchicalMeshFunctionInt_has_child, None, HierarchicalMeshFunctionInt)
HierarchicalMeshFunctionInt._parent = new_instancemethod(_mesh.HierarchicalMeshFunctionInt__parent, None, HierarchicalMeshFunctionInt)
HierarchicalMeshFunctionInt._child = new_instancemethod(_mesh.HierarchicalMeshFunctionInt__child, None, HierarchicalMeshFunctionInt)
HierarchicalMeshFunctionInt._root_node = new_instancemethod(_mesh.HierarchicalMeshFunctionInt__root_node, None, HierarchicalMeshFunctionInt)
HierarchicalMeshFunctionInt._leaf_node = new_instancemethod(_mesh.HierarchicalMeshFunctionInt__leaf_node, None, HierarchicalMeshFunctionInt)
HierarchicalMeshFunctionInt.set_parent = new_instancemethod(_mesh.HierarchicalMeshFunctionInt_set_parent, None, HierarchicalMeshFunctionInt)
HierarchicalMeshFunctionInt.clear_child = new_instancemethod(_mesh.HierarchicalMeshFunctionInt_clear_child, None, HierarchicalMeshFunctionInt)
HierarchicalMeshFunctionInt.set_child = new_instancemethod(_mesh.HierarchicalMeshFunctionInt_set_child, None, HierarchicalMeshFunctionInt)
HierarchicalMeshFunctionInt._debug = new_instancemethod(_mesh.HierarchicalMeshFunctionInt__debug, None, HierarchicalMeshFunctionInt)
HierarchicalMeshFunctionInt_swigregister = _mesh.HierarchicalMeshFunctionInt_swigregister
HierarchicalMeshFunctionInt_swigregister(HierarchicalMeshFunctionInt)

class HierarchicalMeshFunctionDouble(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, arg2):
        _mesh.HierarchicalMeshFunctionDouble_swiginit(self, _mesh.new_HierarchicalMeshFunctionDouble(arg2))
    __swig_destroy__ = _mesh.delete_HierarchicalMeshFunctionDouble
HierarchicalMeshFunctionDouble.depth = new_instancemethod(_mesh.HierarchicalMeshFunctionDouble_depth, None, HierarchicalMeshFunctionDouble)
HierarchicalMeshFunctionDouble.has_parent = new_instancemethod(_mesh.HierarchicalMeshFunctionDouble_has_parent, None, HierarchicalMeshFunctionDouble)
HierarchicalMeshFunctionDouble.has_child = new_instancemethod(_mesh.HierarchicalMeshFunctionDouble_has_child, None, HierarchicalMeshFunctionDouble)
HierarchicalMeshFunctionDouble._parent = new_instancemethod(_mesh.HierarchicalMeshFunctionDouble__parent, None, HierarchicalMeshFunctionDouble)
HierarchicalMeshFunctionDouble._child = new_instancemethod(_mesh.HierarchicalMeshFunctionDouble__child, None, HierarchicalMeshFunctionDouble)
HierarchicalMeshFunctionDouble._root_node = new_instancemethod(_mesh.HierarchicalMeshFunctionDouble__root_node, None, HierarchicalMeshFunctionDouble)
HierarchicalMeshFunctionDouble._leaf_node = new_instancemethod(_mesh.HierarchicalMeshFunctionDouble__leaf_node, None, HierarchicalMeshFunctionDouble)
HierarchicalMeshFunctionDouble.set_parent = new_instancemethod(_mesh.HierarchicalMeshFunctionDouble_set_parent, None, HierarchicalMeshFunctionDouble)
HierarchicalMeshFunctionDouble.clear_child = new_instancemethod(_mesh.HierarchicalMeshFunctionDouble_clear_child, None, HierarchicalMeshFunctionDouble)
HierarchicalMeshFunctionDouble.set_child = new_instancemethod(_mesh.HierarchicalMeshFunctionDouble_set_child, None, HierarchicalMeshFunctionDouble)
HierarchicalMeshFunctionDouble._debug = new_instancemethod(_mesh.HierarchicalMeshFunctionDouble__debug, None, HierarchicalMeshFunctionDouble)
HierarchicalMeshFunctionDouble_swigregister = _mesh.HierarchicalMeshFunctionDouble_swigregister
HierarchicalMeshFunctionDouble_swigregister(HierarchicalMeshFunctionDouble)

class HierarchicalMeshFunctionBool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, arg2):
        _mesh.HierarchicalMeshFunctionBool_swiginit(self, _mesh.new_HierarchicalMeshFunctionBool(arg2))
    __swig_destroy__ = _mesh.delete_HierarchicalMeshFunctionBool
HierarchicalMeshFunctionBool.depth = new_instancemethod(_mesh.HierarchicalMeshFunctionBool_depth, None, HierarchicalMeshFunctionBool)
HierarchicalMeshFunctionBool.has_parent = new_instancemethod(_mesh.HierarchicalMeshFunctionBool_has_parent, None, HierarchicalMeshFunctionBool)
HierarchicalMeshFunctionBool.has_child = new_instancemethod(_mesh.HierarchicalMeshFunctionBool_has_child, None, HierarchicalMeshFunctionBool)
HierarchicalMeshFunctionBool._parent = new_instancemethod(_mesh.HierarchicalMeshFunctionBool__parent, None, HierarchicalMeshFunctionBool)
HierarchicalMeshFunctionBool._child = new_instancemethod(_mesh.HierarchicalMeshFunctionBool__child, None, HierarchicalMeshFunctionBool)
HierarchicalMeshFunctionBool._root_node = new_instancemethod(_mesh.HierarchicalMeshFunctionBool__root_node, None, HierarchicalMeshFunctionBool)
HierarchicalMeshFunctionBool._leaf_node = new_instancemethod(_mesh.HierarchicalMeshFunctionBool__leaf_node, None, HierarchicalMeshFunctionBool)
HierarchicalMeshFunctionBool.set_parent = new_instancemethod(_mesh.HierarchicalMeshFunctionBool_set_parent, None, HierarchicalMeshFunctionBool)
HierarchicalMeshFunctionBool.clear_child = new_instancemethod(_mesh.HierarchicalMeshFunctionBool_clear_child, None, HierarchicalMeshFunctionBool)
HierarchicalMeshFunctionBool.set_child = new_instancemethod(_mesh.HierarchicalMeshFunctionBool_set_child, None, HierarchicalMeshFunctionBool)
HierarchicalMeshFunctionBool._debug = new_instancemethod(_mesh.HierarchicalMeshFunctionBool__debug, None, HierarchicalMeshFunctionBool)
HierarchicalMeshFunctionBool_swigregister = _mesh.HierarchicalMeshFunctionBool_swigregister
HierarchicalMeshFunctionBool_swigregister(HierarchicalMeshFunctionBool)

class HierarchicalMeshFunctionSizet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, arg2):
        _mesh.HierarchicalMeshFunctionSizet_swiginit(self, _mesh.new_HierarchicalMeshFunctionSizet(arg2))
    __swig_destroy__ = _mesh.delete_HierarchicalMeshFunctionSizet
HierarchicalMeshFunctionSizet.depth = new_instancemethod(_mesh.HierarchicalMeshFunctionSizet_depth, None, HierarchicalMeshFunctionSizet)
HierarchicalMeshFunctionSizet.has_parent = new_instancemethod(_mesh.HierarchicalMeshFunctionSizet_has_parent, None, HierarchicalMeshFunctionSizet)
HierarchicalMeshFunctionSizet.has_child = new_instancemethod(_mesh.HierarchicalMeshFunctionSizet_has_child, None, HierarchicalMeshFunctionSizet)
HierarchicalMeshFunctionSizet._parent = new_instancemethod(_mesh.HierarchicalMeshFunctionSizet__parent, None, HierarchicalMeshFunctionSizet)
HierarchicalMeshFunctionSizet._child = new_instancemethod(_mesh.HierarchicalMeshFunctionSizet__child, None, HierarchicalMeshFunctionSizet)
HierarchicalMeshFunctionSizet._root_node = new_instancemethod(_mesh.HierarchicalMeshFunctionSizet__root_node, None, HierarchicalMeshFunctionSizet)
HierarchicalMeshFunctionSizet._leaf_node = new_instancemethod(_mesh.HierarchicalMeshFunctionSizet__leaf_node, None, HierarchicalMeshFunctionSizet)
HierarchicalMeshFunctionSizet.set_parent = new_instancemethod(_mesh.HierarchicalMeshFunctionSizet_set_parent, None, HierarchicalMeshFunctionSizet)
HierarchicalMeshFunctionSizet.clear_child = new_instancemethod(_mesh.HierarchicalMeshFunctionSizet_clear_child, None, HierarchicalMeshFunctionSizet)
HierarchicalMeshFunctionSizet.set_child = new_instancemethod(_mesh.HierarchicalMeshFunctionSizet_set_child, None, HierarchicalMeshFunctionSizet)
HierarchicalMeshFunctionSizet._debug = new_instancemethod(_mesh.HierarchicalMeshFunctionSizet__debug, None, HierarchicalMeshFunctionSizet)
HierarchicalMeshFunctionSizet_swigregister = _mesh.HierarchicalMeshFunctionSizet_swigregister
HierarchicalMeshFunctionSizet_swigregister(HierarchicalMeshFunctionSizet)

class HierarchicalMesh(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, arg2):
        _mesh.HierarchicalMesh_swiginit(self, _mesh.new_HierarchicalMesh(arg2))
    __swig_destroy__ = _mesh.delete_HierarchicalMesh
HierarchicalMesh.depth = new_instancemethod(_mesh.HierarchicalMesh_depth, None, HierarchicalMesh)
HierarchicalMesh.has_parent = new_instancemethod(_mesh.HierarchicalMesh_has_parent, None, HierarchicalMesh)
HierarchicalMesh.has_child = new_instancemethod(_mesh.HierarchicalMesh_has_child, None, HierarchicalMesh)
HierarchicalMesh._parent = new_instancemethod(_mesh.HierarchicalMesh__parent, None, HierarchicalMesh)
HierarchicalMesh._child = new_instancemethod(_mesh.HierarchicalMesh__child, None, HierarchicalMesh)
HierarchicalMesh._root_node = new_instancemethod(_mesh.HierarchicalMesh__root_node, None, HierarchicalMesh)
HierarchicalMesh._leaf_node = new_instancemethod(_mesh.HierarchicalMesh__leaf_node, None, HierarchicalMesh)
HierarchicalMesh.set_parent = new_instancemethod(_mesh.HierarchicalMesh_set_parent, None, HierarchicalMesh)
HierarchicalMesh.clear_child = new_instancemethod(_mesh.HierarchicalMesh_clear_child, None, HierarchicalMesh)
HierarchicalMesh.set_child = new_instancemethod(_mesh.HierarchicalMesh_set_child, None, HierarchicalMesh)
HierarchicalMesh._debug = new_instancemethod(_mesh.HierarchicalMesh__debug, None, HierarchicalMesh)
HierarchicalMesh_swigregister = _mesh.HierarchicalMesh_swigregister
HierarchicalMesh_swigregister(HierarchicalMesh)

class CellType(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    point = _mesh.CellType_point
    interval = _mesh.CellType_interval
    triangle = _mesh.CellType_triangle
    quadrilateral = _mesh.CellType_quadrilateral
    tetrahedron = _mesh.CellType_tetrahedron
    hexahedron = _mesh.CellType_hexahedron
    __swig_destroy__ = _mesh.delete_CellType

    def create(*args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_create(*args)

    create = staticmethod(create)

    def string2type(type):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_string2type(type)

    string2type = staticmethod(string2type)

    def type2string(type):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_type2string(type)

    type2string = staticmethod(type2string)

    def cell_type(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_cell_type(self)


    def facet_type(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_facet_type(self)


    def entity_type(self, i):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_entity_type(self, i)


    def dim(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_dim(self)


    def num_entities(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_num_entities(self, dim)


    def num_vertices(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_num_vertices(self, *args)


    def orientation(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_orientation(self, *args)


    def create_entities(self, e, dim, v):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_create_entities(self, e, dim, v)


    def volume(self, entity):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_volume(self, entity)


    def h(self, entity):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_h(self, entity)


    def circumradius(self, entity):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_circumradius(self, entity)


    def inradius(self, cell):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_inradius(self, cell)


    def radius_ratio(self, cell):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_radius_ratio(self, cell)


    def squared_distance(self, cell, point):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_squared_distance(self, cell, point)


    def normal(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_normal(self, *args)


    def cell_normal(self, cell):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_cell_normal(self, cell)


    def facet_area(self, cell, facet):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_facet_area(self, cell, facet)


    def order(self, cell, local_to_global_vertex_indices):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_order(self, cell, local_to_global_vertex_indices)


    def ordered(self, cell, local_to_global_vertex_indices):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_ordered(self, cell, local_to_global_vertex_indices)


    def collides(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_collides(self, *args)


    def triangulate_intersection(self, c0, c1):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_triangulate_intersection(self, c0, c1)


    def description(self, plural):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_description(self, plural)


    def vtk_mapping(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.CellType_vtk_mapping(self)

CellType.cell_type = new_instancemethod(_mesh.CellType_cell_type, None, CellType)
CellType.facet_type = new_instancemethod(_mesh.CellType_facet_type, None, CellType)
CellType.entity_type = new_instancemethod(_mesh.CellType_entity_type, None, CellType)
CellType.dim = new_instancemethod(_mesh.CellType_dim, None, CellType)
CellType.num_entities = new_instancemethod(_mesh.CellType_num_entities, None, CellType)
CellType.num_vertices = new_instancemethod(_mesh.CellType_num_vertices, None, CellType)
CellType.orientation = new_instancemethod(_mesh.CellType_orientation, None, CellType)
CellType.create_entities = new_instancemethod(_mesh.CellType_create_entities, None, CellType)
CellType.volume = new_instancemethod(_mesh.CellType_volume, None, CellType)
CellType.h = new_instancemethod(_mesh.CellType_h, None, CellType)
CellType.circumradius = new_instancemethod(_mesh.CellType_circumradius, None, CellType)
CellType.inradius = new_instancemethod(_mesh.CellType_inradius, None, CellType)
CellType.radius_ratio = new_instancemethod(_mesh.CellType_radius_ratio, None, CellType)
CellType.squared_distance = new_instancemethod(_mesh.CellType_squared_distance, None, CellType)
CellType.normal = new_instancemethod(_mesh.CellType_normal, None, CellType)
CellType.cell_normal = new_instancemethod(_mesh.CellType_cell_normal, None, CellType)
CellType.facet_area = new_instancemethod(_mesh.CellType_facet_area, None, CellType)
CellType.order = new_instancemethod(_mesh.CellType_order, None, CellType)
CellType.ordered = new_instancemethod(_mesh.CellType_ordered, None, CellType)
CellType.collides = new_instancemethod(_mesh.CellType_collides, None, CellType)
CellType.triangulate_intersection = new_instancemethod(_mesh.CellType_triangulate_intersection, None, CellType)
CellType.description = new_instancemethod(_mesh.CellType_description, None, CellType)
CellType.vtk_mapping = new_instancemethod(_mesh.CellType_vtk_mapping, None, CellType)
CellType_swigregister = _mesh.CellType_swigregister
CellType_swigregister(CellType)

def CellType_create(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.CellType_create(*args)

def CellType_string2type(type):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.CellType_string2type(type)

def CellType_type2string(type):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.CellType_type2string(type)

class MeshTopology(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.MeshTopology_swiginit(self, _mesh.new_MeshTopology(*args))
    __swig_destroy__ = _mesh.delete_MeshTopology

    def dim(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshTopology_dim(self)


    def size(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshTopology_size(self, dim)


    def size_global(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshTopology_size_global(self, dim)


    def ghost_offset(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshTopology_ghost_offset(self, dim)


    def clear(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshTopology_clear(self, *args)


    def init(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshTopology_init(self, *args)


    def init_global_indices(self, dim, size):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshTopology_init_global_indices(self, dim, size)


    def init_ghost(self, dim, index):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshTopology_init_ghost(self, dim, index)


    def set_global_index(self, dim, local_index, global_index):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshTopology_set_global_index(self, dim, local_index, global_index)


    def global_indices(self, d):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshTopology_global_indices(self, d)


    def have_global_indices(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshTopology_have_global_indices(self, dim)


    def have_shared_entities(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshTopology_have_shared_entities(self, dim)


    def shared_entities(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshTopology_shared_entities(self, dim)


    def cell_owner(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshTopology_cell_owner(self, *args)


    def hash(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshTopology_hash(self)


    def str(self, verbose):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshTopology_str(self, verbose)

    coloring = _swig_property(_mesh.MeshTopology_coloring_get, _mesh.MeshTopology_coloring_set)
MeshTopology.dim = new_instancemethod(_mesh.MeshTopology_dim, None, MeshTopology)
MeshTopology.size = new_instancemethod(_mesh.MeshTopology_size, None, MeshTopology)
MeshTopology.size_global = new_instancemethod(_mesh.MeshTopology_size_global, None, MeshTopology)
MeshTopology.ghost_offset = new_instancemethod(_mesh.MeshTopology_ghost_offset, None, MeshTopology)
MeshTopology.clear = new_instancemethod(_mesh.MeshTopology_clear, None, MeshTopology)
MeshTopology.init = new_instancemethod(_mesh.MeshTopology_init, None, MeshTopology)
MeshTopology.init_global_indices = new_instancemethod(_mesh.MeshTopology_init_global_indices, None, MeshTopology)
MeshTopology.init_ghost = new_instancemethod(_mesh.MeshTopology_init_ghost, None, MeshTopology)
MeshTopology.set_global_index = new_instancemethod(_mesh.MeshTopology_set_global_index, None, MeshTopology)
MeshTopology.global_indices = new_instancemethod(_mesh.MeshTopology_global_indices, None, MeshTopology)
MeshTopology.have_global_indices = new_instancemethod(_mesh.MeshTopology_have_global_indices, None, MeshTopology)
MeshTopology.have_shared_entities = new_instancemethod(_mesh.MeshTopology_have_shared_entities, None, MeshTopology)
MeshTopology.shared_entities = new_instancemethod(_mesh.MeshTopology_shared_entities, None, MeshTopology)
MeshTopology.cell_owner = new_instancemethod(_mesh.MeshTopology_cell_owner, None, MeshTopology)
MeshTopology.__call__ = new_instancemethod(_mesh.MeshTopology___call__, None, MeshTopology)
MeshTopology.hash = new_instancemethod(_mesh.MeshTopology_hash, None, MeshTopology)
MeshTopology.str = new_instancemethod(_mesh.MeshTopology_str, None, MeshTopology)
MeshTopology_swigregister = _mesh.MeshTopology_swigregister
MeshTopology_swigregister(MeshTopology)

class MeshGeometry(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.MeshGeometry_swiginit(self, _mesh.new_MeshGeometry(*args))
    __swig_destroy__ = _mesh.delete_MeshGeometry

    def dim(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshGeometry_dim(self)


    def degree(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshGeometry_degree(self)


    def num_vertices(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshGeometry_num_vertices(self)


    def num_points(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshGeometry_num_points(self)


    def vertex_coordinates(self, point_index):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshGeometry_vertex_coordinates(self, point_index)


    def point_coordinates(self, point_index):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshGeometry_point_coordinates(self, point_index)


    def x(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshGeometry_x(self, *args)


    def point(self, n):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshGeometry_point(self, n)


    def init(self, dim, degree):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshGeometry_init(self, dim, degree)


    def init_entities(self, num_entities):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshGeometry_init_entities(self, num_entities)


    def num_entity_coordinates(self, entity_dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshGeometry_num_entity_coordinates(self, entity_dim)


    def get_entity_index(self, entity_dim, order, index):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshGeometry_get_entity_index(self, entity_dim, order, index)


    def set(self, local_index, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshGeometry_set(self, local_index, x)


    def hash(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshGeometry_hash(self)


    def str(self, verbose):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshGeometry_str(self, verbose)

MeshGeometry.dim = new_instancemethod(_mesh.MeshGeometry_dim, None, MeshGeometry)
MeshGeometry.degree = new_instancemethod(_mesh.MeshGeometry_degree, None, MeshGeometry)
MeshGeometry.num_vertices = new_instancemethod(_mesh.MeshGeometry_num_vertices, None, MeshGeometry)
MeshGeometry.num_points = new_instancemethod(_mesh.MeshGeometry_num_points, None, MeshGeometry)
MeshGeometry.vertex_coordinates = new_instancemethod(_mesh.MeshGeometry_vertex_coordinates, None, MeshGeometry)
MeshGeometry.point_coordinates = new_instancemethod(_mesh.MeshGeometry_point_coordinates, None, MeshGeometry)
MeshGeometry.x = new_instancemethod(_mesh.MeshGeometry_x, None, MeshGeometry)
MeshGeometry.point = new_instancemethod(_mesh.MeshGeometry_point, None, MeshGeometry)
MeshGeometry.init = new_instancemethod(_mesh.MeshGeometry_init, None, MeshGeometry)
MeshGeometry.init_entities = new_instancemethod(_mesh.MeshGeometry_init_entities, None, MeshGeometry)
MeshGeometry.num_entity_coordinates = new_instancemethod(_mesh.MeshGeometry_num_entity_coordinates, None, MeshGeometry)
MeshGeometry.get_entity_index = new_instancemethod(_mesh.MeshGeometry_get_entity_index, None, MeshGeometry)
MeshGeometry.set = new_instancemethod(_mesh.MeshGeometry_set, None, MeshGeometry)
MeshGeometry.hash = new_instancemethod(_mesh.MeshGeometry_hash, None, MeshGeometry)
MeshGeometry.str = new_instancemethod(_mesh.MeshGeometry_str, None, MeshGeometry)
MeshGeometry_swigregister = _mesh.MeshGeometry_swigregister
MeshGeometry_swigregister(MeshGeometry)

class MeshDomains(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.MeshDomains_swiginit(self, _mesh.new_MeshDomains())
    __swig_destroy__ = _mesh.delete_MeshDomains

    def max_dim(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshDomains_max_dim(self)


    def num_marked(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshDomains_num_marked(self, dim)


    def is_empty(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshDomains_is_empty(self)


    def markers(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshDomains_markers(self, dim)


    def set_marker(self, marker, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshDomains_set_marker(self, marker, dim)


    def get_marker(self, entity_index, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshDomains_get_marker(self, entity_index, dim)


    def init(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshDomains_init(self, dim)


    def clear(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshDomains_clear(self)

MeshDomains.max_dim = new_instancemethod(_mesh.MeshDomains_max_dim, None, MeshDomains)
MeshDomains.num_marked = new_instancemethod(_mesh.MeshDomains_num_marked, None, MeshDomains)
MeshDomains.is_empty = new_instancemethod(_mesh.MeshDomains_is_empty, None, MeshDomains)
MeshDomains.markers = new_instancemethod(_mesh.MeshDomains_markers, None, MeshDomains)
MeshDomains.set_marker = new_instancemethod(_mesh.MeshDomains_set_marker, None, MeshDomains)
MeshDomains.get_marker = new_instancemethod(_mesh.MeshDomains_get_marker, None, MeshDomains)
MeshDomains.init = new_instancemethod(_mesh.MeshDomains_init, None, MeshDomains)
MeshDomains.clear = new_instancemethod(_mesh.MeshDomains_clear, None, MeshDomains)
MeshDomains_swigregister = _mesh.MeshDomains_swigregister
MeshDomains_swigregister(MeshDomains)

class MeshData(common.Variable):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.MeshData_swiginit(self, _mesh.new_MeshData())
    __swig_destroy__ = _mesh.delete_MeshData

    def clear(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshData_clear(self)


    def exists(self, name, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshData_exists(self, name, dim)


    def create_array(self, name, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshData_create_array(self, name, dim)


    def array(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshData_array(self, *args)


    def erase_array(self, name, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshData_erase_array(self, name, dim)

MeshData.clear = new_instancemethod(_mesh.MeshData_clear, None, MeshData)
MeshData.exists = new_instancemethod(_mesh.MeshData_exists, None, MeshData)
MeshData.create_array = new_instancemethod(_mesh.MeshData_create_array, None, MeshData)
MeshData.array = new_instancemethod(_mesh.MeshData_array, None, MeshData)
MeshData.erase_array = new_instancemethod(_mesh.MeshData_erase_array, None, MeshData)
MeshData_swigregister = _mesh.MeshData_swigregister
MeshData_swigregister(MeshData)

class Mesh(common.Variable, HierarchicalMesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.Mesh_swiginit(self, _mesh.new_Mesh(*args))
    __swig_destroy__ = _mesh.delete_Mesh

    def num_vertices(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_num_vertices(self)


    def num_edges(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_num_edges(self)


    def num_faces(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_num_faces(self)


    def num_facets(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_num_facets(self)


    def num_cells(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_num_cells(self)


    def num_entities(self, d):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_num_entities(self, d)


    def size(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_size(self, dim)


    def size_global(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_size_global(self, dim)


    def topology(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_topology(self, *args)


    def geometry(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_geometry(self, *args)


    def domains(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_domains(self, *args)


    def bounding_box_tree(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_bounding_box_tree(self)


    def data(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_data(self, *args)


    def type(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_type(self, *args)


    def init(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_init(self, *args)


    def init_global(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_init_global(self, dim)


    def clean(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_clean(self)


    def order(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_order(self)


    def ordered(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_ordered(self)


    def renumber_by_color(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_renumber_by_color(self)


    def translate(self, point):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_translate(self, point)


    def rotate(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_rotate(self, *args)


    def smooth(self, num_iterations=1):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_smooth(self, num_iterations)


    def smooth_boundary(self, num_iterations=1, harmonic_smoothing=True):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_smooth_boundary(self, num_iterations, harmonic_smoothing)


    def snap_boundary(self, sub_domain, harmonic_smoothing=True):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_snap_boundary(self, sub_domain, harmonic_smoothing)


    def color(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_color(self, *args)


    def hmin(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_hmin(self)


    def hmax(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_hmax(self)


    def rmin(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_rmin(self)


    def rmax(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_rmax(self)


    def hash(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_hash(self)


    def init_cell_orientations(self, global_normal):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_init_cell_orientations(self, global_normal)


    def mpi_comm(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_mpi_comm(self)


    def ghost_mode(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Mesh_ghost_mode(self)


    def coordinates(self):
        """
        * coordinates\ ()

          Get vertex coordinates.

          *Returns*
              numpy.array(float)
                  Coordinates of all vertices.

          *Example*
              .. code-block:: python

                  >>> mesh = dolfin.UnitSquare(1,1)
                  >>> mesh.coordinates()
                  array([[ 0.,  0.],
                         [ 1.,  0.],
                         [ 0.,  1.],
                         [ 1.,  1.]])
        """

    # Get coordinates
        coord = self._coordinates()

    # Attach a reference to the Mesh to the coord array
        _attach_base_to_numpy_array(coord, self)

        return coord

    def cell_orientations(self):
        """
        Get the cell orientations set.

        *Returns*
            numpy.array(int)
                Cell orientations
        """
    # Get coordinates
        orientations = self._cell_orientations()

    # Attach a reference to the Mesh to the orientations array
        _attach_base_to_numpy_array(orientations, self)

        return orientations

    def cells(self):
        """
        Get cell connectivity.

        *Returns*
            numpy.array(int)
                Connectivity for all cells.

        *Example*
            .. code-block:: python

                >>> mesh = dolfin.UnitSquare(1,1)
                >>> mesh.cells()
                array([[0, 1, 3],
                      [0, 2, 3]])
        """
    # Get coordinates
        cells = self._cells()

    # Attach a reference to the Mesh to the cells array
        _attach_base_to_numpy_array(cells, self)

        return cells



    def ufl_id(self):
        "Returns an id that UFL can use to decide if two objects are the same."
        return self.id()

    def ufl_cell(self):
        """Returns the ufl cell of the mesh."""
        import ufl
        gdim = self.geometry().dim()
        cellname = self.type().description(False)
        return ufl.Cell(cellname, geometric_dimension=gdim)

    def ufl_coordinate_element(self):
        "Return the finite element of the coordinate vector field of this domain."
        import ufl
        cell = self.ufl_cell()
        degree = self.geometry().degree()
        return ufl.VectorElement("Lagrange", cell, degree, dim=cell.geometric_dimension())

    def ufl_domain(self):
        """Returns the ufl domain corresponding to the mesh."""
        import ufl
    # Cache object to avoid recreating it a lot
        if not hasattr(self, "_ufl_domain"):
            self._ufl_domain = ufl.Mesh(self.ufl_coordinate_element(), ufl_id=self.ufl_id(), cargo=self)
        return self._ufl_domain

Mesh.num_vertices = new_instancemethod(_mesh.Mesh_num_vertices, None, Mesh)
Mesh.num_edges = new_instancemethod(_mesh.Mesh_num_edges, None, Mesh)
Mesh.num_faces = new_instancemethod(_mesh.Mesh_num_faces, None, Mesh)
Mesh.num_facets = new_instancemethod(_mesh.Mesh_num_facets, None, Mesh)
Mesh.num_cells = new_instancemethod(_mesh.Mesh_num_cells, None, Mesh)
Mesh.num_entities = new_instancemethod(_mesh.Mesh_num_entities, None, Mesh)
Mesh.size = new_instancemethod(_mesh.Mesh_size, None, Mesh)
Mesh.size_global = new_instancemethod(_mesh.Mesh_size_global, None, Mesh)
Mesh.topology = new_instancemethod(_mesh.Mesh_topology, None, Mesh)
Mesh.geometry = new_instancemethod(_mesh.Mesh_geometry, None, Mesh)
Mesh.domains = new_instancemethod(_mesh.Mesh_domains, None, Mesh)
Mesh.bounding_box_tree = new_instancemethod(_mesh.Mesh_bounding_box_tree, None, Mesh)
Mesh.data = new_instancemethod(_mesh.Mesh_data, None, Mesh)
Mesh.type = new_instancemethod(_mesh.Mesh_type, None, Mesh)
Mesh.init = new_instancemethod(_mesh.Mesh_init, None, Mesh)
Mesh.init_global = new_instancemethod(_mesh.Mesh_init_global, None, Mesh)
Mesh.clean = new_instancemethod(_mesh.Mesh_clean, None, Mesh)
Mesh.order = new_instancemethod(_mesh.Mesh_order, None, Mesh)
Mesh.ordered = new_instancemethod(_mesh.Mesh_ordered, None, Mesh)
Mesh.renumber_by_color = new_instancemethod(_mesh.Mesh_renumber_by_color, None, Mesh)
Mesh.translate = new_instancemethod(_mesh.Mesh_translate, None, Mesh)
Mesh.rotate = new_instancemethod(_mesh.Mesh_rotate, None, Mesh)
Mesh.smooth = new_instancemethod(_mesh.Mesh_smooth, None, Mesh)
Mesh.smooth_boundary = new_instancemethod(_mesh.Mesh_smooth_boundary, None, Mesh)
Mesh.snap_boundary = new_instancemethod(_mesh.Mesh_snap_boundary, None, Mesh)
Mesh.color = new_instancemethod(_mesh.Mesh_color, None, Mesh)
Mesh.hmin = new_instancemethod(_mesh.Mesh_hmin, None, Mesh)
Mesh.hmax = new_instancemethod(_mesh.Mesh_hmax, None, Mesh)
Mesh.rmin = new_instancemethod(_mesh.Mesh_rmin, None, Mesh)
Mesh.rmax = new_instancemethod(_mesh.Mesh_rmax, None, Mesh)
Mesh.hash = new_instancemethod(_mesh.Mesh_hash, None, Mesh)
Mesh.init_cell_orientations = new_instancemethod(_mesh.Mesh_init_cell_orientations, None, Mesh)
Mesh.mpi_comm = new_instancemethod(_mesh.Mesh_mpi_comm, None, Mesh)
Mesh.ghost_mode = new_instancemethod(_mesh.Mesh_ghost_mode, None, Mesh)
Mesh._coordinates = new_instancemethod(_mesh.Mesh__coordinates, None, Mesh)
Mesh._cells = new_instancemethod(_mesh.Mesh__cells, None, Mesh)
Mesh._cell_orientations = new_instancemethod(_mesh.Mesh__cell_orientations, None, Mesh)
Mesh_swigregister = _mesh.Mesh_swigregister
Mesh_swigregister(Mesh)

class MeshEntity(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.MeshEntity_swiginit(self, _mesh.new_MeshEntity(*args))
    __swig_destroy__ = _mesh.delete_MeshEntity

    def init(self, mesh, dim, index):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEntity_init(self, mesh, dim, index)


    def __eq__(self, e):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEntity___eq__(self, e)


    def __ne__(self, e):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEntity___ne__(self, e)


    def mesh(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEntity_mesh(self)


    def dim(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEntity_dim(self)


    def global_index(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEntity_global_index(self)


    def num_entities(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEntity_num_entities(self, dim)


    def num_global_entities(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEntity_num_global_entities(self, dim)


    def mesh_id(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEntity_mesh_id(self)


    def incident(self, entity):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEntity_incident(self, entity)


    def index(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEntity_index(self, *args)


    def midpoint(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEntity_midpoint(self)


    def is_ghost(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEntity_is_ghost(self)


    def sharing_processes(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEntity_sharing_processes(self)


    def is_shared(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEntity_is_shared(self)


    def owner(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEntity_owner(self)


    def str(self, verbose):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEntity_str(self, verbose)


    def entities(self, dim):
        """ Return number of incident mesh entities of given topological dimension"""
        return self.mesh().topology()(self.dim(), dim)(self.index())

    def __str__(self):
        """Pretty print of MeshEntity"""
        return self.str(False)

MeshEntity.init = new_instancemethod(_mesh.MeshEntity_init, None, MeshEntity)
MeshEntity.__eq__ = new_instancemethod(_mesh.MeshEntity___eq__, None, MeshEntity)
MeshEntity.__ne__ = new_instancemethod(_mesh.MeshEntity___ne__, None, MeshEntity)
MeshEntity.mesh = new_instancemethod(_mesh.MeshEntity_mesh, None, MeshEntity)
MeshEntity.dim = new_instancemethod(_mesh.MeshEntity_dim, None, MeshEntity)
MeshEntity.global_index = new_instancemethod(_mesh.MeshEntity_global_index, None, MeshEntity)
MeshEntity.num_entities = new_instancemethod(_mesh.MeshEntity_num_entities, None, MeshEntity)
MeshEntity.num_global_entities = new_instancemethod(_mesh.MeshEntity_num_global_entities, None, MeshEntity)
MeshEntity.mesh_id = new_instancemethod(_mesh.MeshEntity_mesh_id, None, MeshEntity)
MeshEntity.incident = new_instancemethod(_mesh.MeshEntity_incident, None, MeshEntity)
MeshEntity.index = new_instancemethod(_mesh.MeshEntity_index, None, MeshEntity)
MeshEntity.midpoint = new_instancemethod(_mesh.MeshEntity_midpoint, None, MeshEntity)
MeshEntity.is_ghost = new_instancemethod(_mesh.MeshEntity_is_ghost, None, MeshEntity)
MeshEntity.sharing_processes = new_instancemethod(_mesh.MeshEntity_sharing_processes, None, MeshEntity)
MeshEntity.is_shared = new_instancemethod(_mesh.MeshEntity_is_shared, None, MeshEntity)
MeshEntity.owner = new_instancemethod(_mesh.MeshEntity_owner, None, MeshEntity)
MeshEntity.str = new_instancemethod(_mesh.MeshEntity_str, None, MeshEntity)
MeshEntity_swigregister = _mesh.MeshEntity_swigregister
MeshEntity_swigregister(MeshEntity)

class entities(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.entities_swiginit(self, _mesh.new_entities(*args))
    __swig_destroy__ = _mesh.delete_entities

    def _increment(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.entities__increment(self)


    def _decrease(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.entities__decrease(self)


    def pos(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.entities_pos(self)


    def __eq__(self, it):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.entities___eq__(self, it)


    def __ne__(self, it):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.entities___ne__(self, it)


    def _dereference(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.entities__dereference(self)


    def end(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.entities_end(self)


    def end_iterator(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.entities_end_iterator(self)


    def __iter__(self):
        self.first = True
        return self

    def __next__(self):
        self.first = self.first if hasattr(self,"first") else True
        if not self.first:
            self._increment()
        if self.end():
            self._decrease()
            raise StopIteration
        self.first = False
        return self._dereference()
    # Py2/Py3
    next = __next__

entities._increment = new_instancemethod(_mesh.entities__increment, None, entities)
entities._decrease = new_instancemethod(_mesh.entities__decrease, None, entities)
entities.pos = new_instancemethod(_mesh.entities_pos, None, entities)
entities.__eq__ = new_instancemethod(_mesh.entities___eq__, None, entities)
entities.__ne__ = new_instancemethod(_mesh.entities___ne__, None, entities)
entities._dereference = new_instancemethod(_mesh.entities__dereference, None, entities)
entities.end = new_instancemethod(_mesh.entities_end, None, entities)
entities.end_iterator = new_instancemethod(_mesh.entities_end_iterator, None, entities)
entities_swigregister = _mesh.entities_swigregister
entities_swigregister(entities)

class SubsetIterator(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.SubsetIterator_swiginit(self, _mesh.new_SubsetIterator(*args))
    __swig_destroy__ = _mesh.delete_SubsetIterator

    def _increment(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.SubsetIterator__increment(self)


    def __eq__(self, sub_iter):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.SubsetIterator___eq__(self, sub_iter)


    def __ne__(self, sub_iter):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.SubsetIterator___ne__(self, sub_iter)


    def _dereference(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.SubsetIterator__dereference(self)


    def end(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.SubsetIterator_end(self)


    def end_iterator(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.SubsetIterator_end_iterator(self)


    def __iter__(self):
        self.first = True
        return self

    def __next__(self):
        self.first = self.first if hasattr(self,"first") else True
        if not self.first:
            self._increment()
        if self.end():
            raise StopIteration
        self.first = False
        return self._dereference()
    # Py2/Py3
    next = __next__

SubsetIterator._increment = new_instancemethod(_mesh.SubsetIterator__increment, None, SubsetIterator)
SubsetIterator.__eq__ = new_instancemethod(_mesh.SubsetIterator___eq__, None, SubsetIterator)
SubsetIterator.__ne__ = new_instancemethod(_mesh.SubsetIterator___ne__, None, SubsetIterator)
SubsetIterator._dereference = new_instancemethod(_mesh.SubsetIterator__dereference, None, SubsetIterator)
SubsetIterator.end = new_instancemethod(_mesh.SubsetIterator_end, None, SubsetIterator)
SubsetIterator.end_iterator = new_instancemethod(_mesh.SubsetIterator_end_iterator, None, SubsetIterator)
SubsetIterator_swigregister = _mesh.SubsetIterator_swigregister
SubsetIterator_swigregister(SubsetIterator)

class Vertex(MeshEntity):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.Vertex_swiginit(self, _mesh.new_Vertex(*args))
    __swig_destroy__ = _mesh.delete_Vertex

    def point(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Vertex_point(self)


    def x(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Vertex_x(self, *args)

Vertex.point = new_instancemethod(_mesh.Vertex_point, None, Vertex)
Vertex.x = new_instancemethod(_mesh.Vertex_x, None, Vertex)
Vertex_swigregister = _mesh.Vertex_swigregister
Vertex_swigregister(Vertex)

class Edge(MeshEntity):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.Edge_swiginit(self, _mesh.new_Edge(*args))
    __swig_destroy__ = _mesh.delete_Edge

    def length(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Edge_length(self)


    def dot(self, edge):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Edge_dot(self, edge)

Edge.length = new_instancemethod(_mesh.Edge_length, None, Edge)
Edge.dot = new_instancemethod(_mesh.Edge_dot, None, Edge)
Edge_swigregister = _mesh.Edge_swigregister
Edge_swigregister(Edge)

class Face(MeshEntity):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, mesh, index):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.Face_swiginit(self, _mesh.new_Face(mesh, index))
    __swig_destroy__ = _mesh.delete_Face

    def area(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Face_area(self)


    def normal(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Face_normal(self, *args)

Face.area = new_instancemethod(_mesh.Face_area, None, Face)
Face.normal = new_instancemethod(_mesh.Face_normal, None, Face)
Face_swigregister = _mesh.Face_swigregister
Face_swigregister(Face)

class Facet(MeshEntity):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, mesh, index):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.Facet_swiginit(self, _mesh.new_Facet(mesh, index))
    __swig_destroy__ = _mesh.delete_Facet

    def normal(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Facet_normal(self, *args)


    def squared_distance(self, point):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Facet_squared_distance(self, point)


    def distance(self, point):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Facet_distance(self, point)


    def exterior(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Facet_exterior(self)

Facet.normal = new_instancemethod(_mesh.Facet_normal, None, Facet)
Facet.squared_distance = new_instancemethod(_mesh.Facet_squared_distance, None, Facet)
Facet.distance = new_instancemethod(_mesh.Facet_distance, None, Facet)
Facet.exterior = new_instancemethod(_mesh.Facet_exterior, None, Facet)
Facet_swigregister = _mesh.Facet_swigregister
Facet_swigregister(Facet)

class Cell(MeshEntity):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.Cell_swiginit(self, _mesh.new_Cell(*args))
    __swig_destroy__ = _mesh.delete_Cell

    def type(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_type(self)


    def num_vertices(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_num_vertices(self)


    def orientation(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_orientation(self, *args)


    def volume(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_volume(self)


    def h(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_h(self)


    def circumradius(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_circumradius(self)


    def inradius(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_inradius(self)


    def radius_ratio(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_radius_ratio(self)


    def squared_distance(self, point):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_squared_distance(self, point)


    def distance(self, point):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_distance(self, point)


    def normal(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_normal(self, *args)


    def cell_normal(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_cell_normal(self)


    def facet_area(self, facet):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_facet_area(self, facet)


    def order(self, local_to_global_vertex_indices):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_order(self, local_to_global_vertex_indices)


    def ordered(self, local_to_global_vertex_indices):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_ordered(self, local_to_global_vertex_indices)


    def contains(self, point):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_contains(self, point)


    def collides(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_collides(self, *args)


    def triangulate_intersection(self, entity):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_triangulate_intersection(self, entity)


    def get_coordinate_dofs(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_get_coordinate_dofs(self)


    def get_vertex_coordinates(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_get_vertex_coordinates(self)


    def get_cell_data(self, ufc_cell, local_facet=-1):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_get_cell_data(self, ufc_cell, local_facet)


    def get_cell_topology(self, ufc_cell):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Cell_get_cell_topology(self, ufc_cell)

Cell.type = new_instancemethod(_mesh.Cell_type, None, Cell)
Cell.num_vertices = new_instancemethod(_mesh.Cell_num_vertices, None, Cell)
Cell.orientation = new_instancemethod(_mesh.Cell_orientation, None, Cell)
Cell.volume = new_instancemethod(_mesh.Cell_volume, None, Cell)
Cell.h = new_instancemethod(_mesh.Cell_h, None, Cell)
Cell.circumradius = new_instancemethod(_mesh.Cell_circumradius, None, Cell)
Cell.inradius = new_instancemethod(_mesh.Cell_inradius, None, Cell)
Cell.radius_ratio = new_instancemethod(_mesh.Cell_radius_ratio, None, Cell)
Cell.squared_distance = new_instancemethod(_mesh.Cell_squared_distance, None, Cell)
Cell.distance = new_instancemethod(_mesh.Cell_distance, None, Cell)
Cell.normal = new_instancemethod(_mesh.Cell_normal, None, Cell)
Cell.cell_normal = new_instancemethod(_mesh.Cell_cell_normal, None, Cell)
Cell.facet_area = new_instancemethod(_mesh.Cell_facet_area, None, Cell)
Cell.order = new_instancemethod(_mesh.Cell_order, None, Cell)
Cell.ordered = new_instancemethod(_mesh.Cell_ordered, None, Cell)
Cell.contains = new_instancemethod(_mesh.Cell_contains, None, Cell)
Cell.collides = new_instancemethod(_mesh.Cell_collides, None, Cell)
Cell.triangulate_intersection = new_instancemethod(_mesh.Cell_triangulate_intersection, None, Cell)
Cell.get_coordinate_dofs = new_instancemethod(_mesh.Cell_get_coordinate_dofs, None, Cell)
Cell.get_vertex_coordinates = new_instancemethod(_mesh.Cell_get_vertex_coordinates, None, Cell)
Cell.get_cell_data = new_instancemethod(_mesh.Cell_get_cell_data, None, Cell)
Cell.get_cell_topology = new_instancemethod(_mesh.Cell_get_cell_topology, None, Cell)
Cell_swigregister = _mesh.Cell_swigregister
Cell_swigregister(Cell)

class FacetCell(Cell):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, mesh, facet):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.FacetCell_swiginit(self, _mesh.new_FacetCell(mesh, facet))
    __swig_destroy__ = _mesh.delete_FacetCell

    def facet_index(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.FacetCell_facet_index(self)

FacetCell.facet_index = new_instancemethod(_mesh.FacetCell_facet_index, None, FacetCell)
FacetCell_swigregister = _mesh.FacetCell_swigregister
FacetCell_swigregister(FacetCell)

class MeshConnectivity(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.MeshConnectivity_swiginit(self, _mesh.new_MeshConnectivity(*args))
    __swig_destroy__ = _mesh.delete_MeshConnectivity

    def empty(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshConnectivity_empty(self)


    def size(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshConnectivity_size(self, *args)


    def size_global(self, entity):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshConnectivity_size_global(self, entity)


    def clear(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshConnectivity_clear(self)


    def init(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshConnectivity_init(self, *args)


    def set_global_size(self, num_global_connections):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshConnectivity_set_global_size(self, num_global_connections)


    def hash(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshConnectivity_hash(self)


    def str(self, verbose):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshConnectivity_str(self, verbose)

MeshConnectivity.empty = new_instancemethod(_mesh.MeshConnectivity_empty, None, MeshConnectivity)
MeshConnectivity.size = new_instancemethod(_mesh.MeshConnectivity_size, None, MeshConnectivity)
MeshConnectivity.size_global = new_instancemethod(_mesh.MeshConnectivity_size_global, None, MeshConnectivity)
MeshConnectivity.clear = new_instancemethod(_mesh.MeshConnectivity_clear, None, MeshConnectivity)
MeshConnectivity.init = new_instancemethod(_mesh.MeshConnectivity_init, None, MeshConnectivity)
MeshConnectivity.set_global_size = new_instancemethod(_mesh.MeshConnectivity_set_global_size, None, MeshConnectivity)
MeshConnectivity.hash = new_instancemethod(_mesh.MeshConnectivity_hash, None, MeshConnectivity)
MeshConnectivity.str = new_instancemethod(_mesh.MeshConnectivity_str, None, MeshConnectivity)
MeshConnectivity.__call__ = new_instancemethod(_mesh.MeshConnectivity___call__, None, MeshConnectivity)
MeshConnectivity_swigregister = _mesh.MeshConnectivity_swigregister
MeshConnectivity_swigregister(MeshConnectivity)

class MeshEditor(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.MeshEditor_swiginit(self, _mesh.new_MeshEditor())
    __swig_destroy__ = _mesh.delete_MeshEditor

    def open(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEditor_open(self, *args)


    def init_vertices(self, num_vertices):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEditor_init_vertices(self, num_vertices)


    def init_entities(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEditor_init_entities(self)


    def init_vertices_global(self, num_local_vertices, num_global_vertices):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEditor_init_vertices_global(self, num_local_vertices, num_global_vertices)


    def init_cells(self, num_cells):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEditor_init_cells(self, num_cells)


    def init_cells_global(self, num_local_cells, num_global_cells):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEditor_init_cells_global(self, num_local_cells, num_global_cells)


    def add_vertex(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEditor_add_vertex(self, *args)


    def add_vertex_global(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEditor_add_vertex_global(self, *args)


    def add_entity_point(self, entity_dim, order, index, p):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEditor_add_entity_point(self, entity_dim, order, index, p)


    def add_cell(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEditor_add_cell(self, *args)


    def close(self, order=True):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshEditor_close(self, order)

MeshEditor.open = new_instancemethod(_mesh.MeshEditor_open, None, MeshEditor)
MeshEditor.init_vertices = new_instancemethod(_mesh.MeshEditor_init_vertices, None, MeshEditor)
MeshEditor.init_entities = new_instancemethod(_mesh.MeshEditor_init_entities, None, MeshEditor)
MeshEditor.init_vertices_global = new_instancemethod(_mesh.MeshEditor_init_vertices_global, None, MeshEditor)
MeshEditor.init_cells = new_instancemethod(_mesh.MeshEditor_init_cells, None, MeshEditor)
MeshEditor.init_cells_global = new_instancemethod(_mesh.MeshEditor_init_cells_global, None, MeshEditor)
MeshEditor.add_vertex = new_instancemethod(_mesh.MeshEditor_add_vertex, None, MeshEditor)
MeshEditor.add_vertex_global = new_instancemethod(_mesh.MeshEditor_add_vertex_global, None, MeshEditor)
MeshEditor.add_entity_point = new_instancemethod(_mesh.MeshEditor_add_entity_point, None, MeshEditor)
MeshEditor.add_cell = new_instancemethod(_mesh.MeshEditor_add_cell, None, MeshEditor)
MeshEditor.close = new_instancemethod(_mesh.MeshEditor_close, None, MeshEditor)
MeshEditor_swigregister = _mesh.MeshEditor_swigregister
MeshEditor_swigregister(MeshEditor)

class DynamicMeshEditor(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.DynamicMeshEditor_swiginit(self, _mesh.new_DynamicMeshEditor())
    __swig_destroy__ = _mesh.delete_DynamicMeshEditor

    def open(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.DynamicMeshEditor_open(self, *args)


    def add_vertex(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.DynamicMeshEditor_add_vertex(self, *args)


    def add_cell(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.DynamicMeshEditor_add_cell(self, *args)


    def close(self, order=False):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.DynamicMeshEditor_close(self, order)

DynamicMeshEditor.open = new_instancemethod(_mesh.DynamicMeshEditor_open, None, DynamicMeshEditor)
DynamicMeshEditor.add_vertex = new_instancemethod(_mesh.DynamicMeshEditor_add_vertex, None, DynamicMeshEditor)
DynamicMeshEditor.add_cell = new_instancemethod(_mesh.DynamicMeshEditor_add_cell, None, DynamicMeshEditor)
DynamicMeshEditor.close = new_instancemethod(_mesh.DynamicMeshEditor_close, None, DynamicMeshEditor)
DynamicMeshEditor_swigregister = _mesh.DynamicMeshEditor_swigregister
DynamicMeshEditor_swigregister(DynamicMeshEditor)

class MeshColoring(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def color_cells(mesh, coloring_type):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshColoring_color_cells(mesh, coloring_type)

    color_cells = staticmethod(color_cells)

    def color(mesh, coloring_type):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshColoring_color(mesh, coloring_type)

    color = staticmethod(color)

    def compute_colors(mesh, colors, coloring_type):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshColoring_compute_colors(mesh, colors, coloring_type)

    compute_colors = staticmethod(compute_colors)

    def cell_colors(*args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshColoring_cell_colors(*args)

    cell_colors = staticmethod(cell_colors)

    def type_to_dim(coloring_type, mesh):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshColoring_type_to_dim(coloring_type, mesh)

    type_to_dim = staticmethod(type_to_dim)

    def __init__(self):
        _mesh.MeshColoring_swiginit(self, _mesh.new_MeshColoring())
    __swig_destroy__ = _mesh.delete_MeshColoring
MeshColoring_swigregister = _mesh.MeshColoring_swigregister
MeshColoring_swigregister(MeshColoring)

def MeshColoring_color_cells(mesh, coloring_type):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.MeshColoring_color_cells(mesh, coloring_type)

def MeshColoring_color(mesh, coloring_type):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.MeshColoring_color(mesh, coloring_type)

def MeshColoring_compute_colors(mesh, colors, coloring_type):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.MeshColoring_compute_colors(mesh, colors, coloring_type)

def MeshColoring_cell_colors(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.MeshColoring_cell_colors(*args)

def MeshColoring_type_to_dim(coloring_type, mesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.MeshColoring_type_to_dim(coloring_type, mesh)

class MeshRenumbering(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def renumber_by_color(mesh, coloring):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshRenumbering_renumber_by_color(mesh, coloring)

    renumber_by_color = staticmethod(renumber_by_color)

    def __init__(self):
        _mesh.MeshRenumbering_swiginit(self, _mesh.new_MeshRenumbering())
    __swig_destroy__ = _mesh.delete_MeshRenumbering
MeshRenumbering_swigregister = _mesh.MeshRenumbering_swigregister
MeshRenumbering_swigregister(MeshRenumbering)

def MeshRenumbering_renumber_by_color(mesh, coloring):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.MeshRenumbering_renumber_by_color(mesh, coloring)

class MeshTransformation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    translate = staticmethod(_mesh.MeshTransformation_translate)
    rescale = staticmethod(_mesh.MeshTransformation_rescale)
    rotate = staticmethod(_mesh.MeshTransformation_rotate)

    def __init__(self):
        _mesh.MeshTransformation_swiginit(self, _mesh.new_MeshTransformation())
    __swig_destroy__ = _mesh.delete_MeshTransformation
MeshTransformation_swigregister = _mesh.MeshTransformation_swigregister
MeshTransformation_swigregister(MeshTransformation)

def MeshTransformation_translate(mesh, point):
    return _mesh.MeshTransformation_translate(mesh, point)
MeshTransformation_translate = _mesh.MeshTransformation_translate

def MeshTransformation_rescale(mesh, scale, center):
    return _mesh.MeshTransformation_rescale(mesh, scale, center)
MeshTransformation_rescale = _mesh.MeshTransformation_rescale

def MeshTransformation_rotate(*args):
    return _mesh.MeshTransformation_rotate(*args)
MeshTransformation_rotate = _mesh.MeshTransformation_rotate

class LocalMeshData(common.Variable):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.LocalMeshData_swiginit(self, _mesh.new_LocalMeshData(*args))
    __swig_destroy__ = _mesh.delete_LocalMeshData

    def check(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.LocalMeshData_check(self)


    def clear(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.LocalMeshData_clear(self)


    def extract_mesh_data(self, mesh):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.LocalMeshData_extract_mesh_data(self, mesh)


    def broadcast_mesh_data(self, mpi_comm):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.LocalMeshData_broadcast_mesh_data(self, mpi_comm)


    def receive_mesh_data(self, mpi_comm):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.LocalMeshData_receive_mesh_data(self, mpi_comm)


    def reorder(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.LocalMeshData_reorder(self)

    geometry = _swig_property(_mesh.LocalMeshData_geometry_get, _mesh.LocalMeshData_geometry_set)
    topology = _swig_property(_mesh.LocalMeshData_topology_get, _mesh.LocalMeshData_topology_set)
    domain_data = _swig_property(_mesh.LocalMeshData_domain_data_get, _mesh.LocalMeshData_domain_data_set)

    def mpi_comm(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.LocalMeshData_mpi_comm(self)

LocalMeshData.check = new_instancemethod(_mesh.LocalMeshData_check, None, LocalMeshData)
LocalMeshData.clear = new_instancemethod(_mesh.LocalMeshData_clear, None, LocalMeshData)
LocalMeshData.extract_mesh_data = new_instancemethod(_mesh.LocalMeshData_extract_mesh_data, None, LocalMeshData)
LocalMeshData.broadcast_mesh_data = new_instancemethod(_mesh.LocalMeshData_broadcast_mesh_data, None, LocalMeshData)
LocalMeshData.receive_mesh_data = new_instancemethod(_mesh.LocalMeshData_receive_mesh_data, None, LocalMeshData)
LocalMeshData.reorder = new_instancemethod(_mesh.LocalMeshData_reorder, None, LocalMeshData)
LocalMeshData.mpi_comm = new_instancemethod(_mesh.LocalMeshData_mpi_comm, None, LocalMeshData)
LocalMeshData_swigregister = _mesh.LocalMeshData_swigregister
LocalMeshData_swigregister(LocalMeshData)

class SubDomain(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, map_tol=1.0e-10):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        if self.__class__ == SubDomain:
            _self = None
        else:
            _self = self
        _mesh.SubDomain_swiginit(self, _mesh.new_SubDomain(_self, map_tol))
    __swig_destroy__ = _mesh.delete_SubDomain

    def inside(self, x, on_boundary):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.SubDomain_inside(self, x, on_boundary)


    def map(self, x, y):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.SubDomain_map(self, x, y)


    def snap(self, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.SubDomain_snap(self, x)


    def mark_cells(self, mesh, sub_domain, check_midpoint=True):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.SubDomain_mark_cells(self, mesh, sub_domain, check_midpoint)


    def mark_facets(self, mesh, sub_domain, check_midpoint=True):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.SubDomain_mark_facets(self, mesh, sub_domain, check_midpoint)


    def _mark(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.SubDomain__mark(self, *args)


    def geometric_dimension(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.SubDomain_geometric_dimension(self)

    map_tolerance = _swig_property(_mesh.SubDomain_map_tolerance_get)

    # NOTE: This is a hardcoded check, which rely on SubDomain::mark only taking
    # a MeshFunction as its first argument when mark is called with two arguments
    def mark(self, *args, **kwargs):
        from . import common
        if len(args) == 2 and not isinstance(args[0], \
                        (MeshFunctionSizet, MeshFunctionInt,
                         MeshFunctionDouble, MeshFunctionBool)):
            common.dolfin_error("dolfin.cpp.mesh.py",
                                "mark MeshFunction",
                                "Expected a MeshFunction of type \"size_t\", \"int\", \"double\" or \"bool\"")

        if ("check_midpoint" in kwargs):
            args = args + (kwargs["check_midpoint"],)
        self._mark(*args)

    def __disown__(self):
        self.this.disown()
        _mesh.disown_SubDomain(self)
        return weakref_proxy(self)
SubDomain.inside = new_instancemethod(_mesh.SubDomain_inside, None, SubDomain)
SubDomain.map = new_instancemethod(_mesh.SubDomain_map, None, SubDomain)
SubDomain.snap = new_instancemethod(_mesh.SubDomain_snap, None, SubDomain)
SubDomain.mark_cells = new_instancemethod(_mesh.SubDomain_mark_cells, None, SubDomain)
SubDomain.mark_facets = new_instancemethod(_mesh.SubDomain_mark_facets, None, SubDomain)
SubDomain._mark = new_instancemethod(_mesh.SubDomain__mark, None, SubDomain)
SubDomain.geometric_dimension = new_instancemethod(_mesh.SubDomain_geometric_dimension, None, SubDomain)
SubDomain_swigregister = _mesh.SubDomain_swigregister
SubDomain_swigregister(SubDomain)

class SubMesh(Mesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.SubMesh_swiginit(self, _mesh.new_SubMesh(*args))
    __swig_destroy__ = _mesh.delete_SubMesh
SubMesh_swigregister = _mesh.SubMesh_swigregister
SubMesh_swigregister(SubMesh)

class DomainBoundary(SubDomain):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.DomainBoundary_swiginit(self, _mesh.new_DomainBoundary())
    __swig_destroy__ = _mesh.delete_DomainBoundary
DomainBoundary_swigregister = _mesh.DomainBoundary_swigregister
DomainBoundary_swigregister(DomainBoundary)

class BoundaryMesh(Mesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, mesh, type, order=True):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.BoundaryMesh_swiginit(self, _mesh.new_BoundaryMesh(mesh, type, order))
    __swig_destroy__ = _mesh.delete_BoundaryMesh

    def entity_map(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.BoundaryMesh_entity_map(self, *args)

BoundaryMesh.entity_map = new_instancemethod(_mesh.BoundaryMesh_entity_map, None, BoundaryMesh)
BoundaryMesh_swigregister = _mesh.BoundaryMesh_swigregister
BoundaryMesh_swigregister(BoundaryMesh)

class PeriodicBoundaryComputation(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def compute_periodic_pairs(mesh, sub_domain, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.PeriodicBoundaryComputation_compute_periodic_pairs(mesh, sub_domain, dim)

    compute_periodic_pairs = staticmethod(compute_periodic_pairs)

    def masters_slaves(mesh, sub_domain, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.PeriodicBoundaryComputation_masters_slaves(mesh, sub_domain, dim)

    masters_slaves = staticmethod(masters_slaves)

    def __init__(self):
        _mesh.PeriodicBoundaryComputation_swiginit(self, _mesh.new_PeriodicBoundaryComputation())
    __swig_destroy__ = _mesh.delete_PeriodicBoundaryComputation
PeriodicBoundaryComputation_swigregister = _mesh.PeriodicBoundaryComputation_swigregister
PeriodicBoundaryComputation_swigregister(PeriodicBoundaryComputation)

def PeriodicBoundaryComputation_compute_periodic_pairs(mesh, sub_domain, dim):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.PeriodicBoundaryComputation_compute_periodic_pairs(mesh, sub_domain, dim)

def PeriodicBoundaryComputation_masters_slaves(mesh, sub_domain, dim):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.PeriodicBoundaryComputation_masters_slaves(mesh, sub_domain, dim)

class MeshQuality(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def radius_ratios(mesh):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshQuality_radius_ratios(mesh)

    radius_ratios = staticmethod(radius_ratios)

    def radius_ratio_min_max(mesh):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshQuality_radius_ratio_min_max(mesh)

    radius_ratio_min_max = staticmethod(radius_ratio_min_max)

    def radius_ratio_histogram_data(mesh, num_bins=50):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshQuality_radius_ratio_histogram_data(mesh, num_bins)

    radius_ratio_histogram_data = staticmethod(radius_ratio_histogram_data)

    def radius_ratio_matplotlib_histogram(mesh, num_intervals=50):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshQuality_radius_ratio_matplotlib_histogram(mesh, num_intervals)

    radius_ratio_matplotlib_histogram = staticmethod(radius_ratio_matplotlib_histogram)

    def dihedral_angles(cell):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshQuality_dihedral_angles(cell)

    dihedral_angles = staticmethod(dihedral_angles)

    def dihedral_angles_min_max(mesh):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshQuality_dihedral_angles_min_max(mesh)

    dihedral_angles_min_max = staticmethod(dihedral_angles_min_max)

    def dihedral_angles_histogram_data(mesh, num_bins=100):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshQuality_dihedral_angles_histogram_data(mesh, num_bins)

    dihedral_angles_histogram_data = staticmethod(dihedral_angles_histogram_data)

    def dihedral_angles_matplotlib_histogram(mesh, num_intervals=100):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshQuality_dihedral_angles_matplotlib_histogram(mesh, num_intervals)

    dihedral_angles_matplotlib_histogram = staticmethod(dihedral_angles_matplotlib_histogram)

    def __init__(self):
        _mesh.MeshQuality_swiginit(self, _mesh.new_MeshQuality())
    __swig_destroy__ = _mesh.delete_MeshQuality
MeshQuality_swigregister = _mesh.MeshQuality_swigregister
MeshQuality_swigregister(MeshQuality)

def MeshQuality_radius_ratios(mesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.MeshQuality_radius_ratios(mesh)

def MeshQuality_radius_ratio_min_max(mesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.MeshQuality_radius_ratio_min_max(mesh)

def MeshQuality_radius_ratio_histogram_data(mesh, num_bins=50):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.MeshQuality_radius_ratio_histogram_data(mesh, num_bins)

def MeshQuality_radius_ratio_matplotlib_histogram(mesh, num_intervals=50):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.MeshQuality_radius_ratio_matplotlib_histogram(mesh, num_intervals)

def MeshQuality_dihedral_angles(cell):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.MeshQuality_dihedral_angles(cell)

def MeshQuality_dihedral_angles_min_max(mesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.MeshQuality_dihedral_angles_min_max(mesh)

def MeshQuality_dihedral_angles_histogram_data(mesh, num_bins=100):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.MeshQuality_dihedral_angles_histogram_data(mesh, num_bins)

def MeshQuality_dihedral_angles_matplotlib_histogram(mesh, num_intervals=100):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.MeshQuality_dihedral_angles_matplotlib_histogram(mesh, num_intervals)

class MultiMesh(common.Variable):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.MultiMesh_swiginit(self, _mesh.new_MultiMesh(*args))
    __swig_destroy__ = _mesh.delete_MultiMesh

    def num_parts(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MultiMesh_num_parts(self)


    def part(self, i):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MultiMesh_part(self, i)


    def uncut_cells(self, part):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MultiMesh_uncut_cells(self, part)


    def cut_cells(self, part):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MultiMesh_cut_cells(self, part)


    def covered_cells(self, part):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MultiMesh_covered_cells(self, part)


    def collision_map_cut_cells(self, part):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MultiMesh_collision_map_cut_cells(self, part)


    def quadrature_rule_cut_cells(self, part):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MultiMesh_quadrature_rule_cut_cells(self, part)


    def quadrature_rule_cut_cell(self, part, cell_index):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MultiMesh_quadrature_rule_cut_cell(self, part, cell_index)


    def quadrature_rule_overlap(self, part):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MultiMesh_quadrature_rule_overlap(self, part)


    def quadrature_rule_interface(self, part):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MultiMesh_quadrature_rule_interface(self, part)


    def facet_normals(self, part):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MultiMesh_facet_normals(self, part)


    def bounding_box_tree(self, part):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MultiMesh_bounding_box_tree(self, part)


    def bounding_box_tree_boundary(self, part):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MultiMesh_bounding_box_tree_boundary(self, part)


    def add(self, mesh):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MultiMesh_add(self, mesh)


    def build(self, quadrature_order=2):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MultiMesh_build(self, quadrature_order)


    def clear(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MultiMesh_clear(self)

MultiMesh.num_parts = new_instancemethod(_mesh.MultiMesh_num_parts, None, MultiMesh)
MultiMesh.part = new_instancemethod(_mesh.MultiMesh_part, None, MultiMesh)
MultiMesh.uncut_cells = new_instancemethod(_mesh.MultiMesh_uncut_cells, None, MultiMesh)
MultiMesh.cut_cells = new_instancemethod(_mesh.MultiMesh_cut_cells, None, MultiMesh)
MultiMesh.covered_cells = new_instancemethod(_mesh.MultiMesh_covered_cells, None, MultiMesh)
MultiMesh.collision_map_cut_cells = new_instancemethod(_mesh.MultiMesh_collision_map_cut_cells, None, MultiMesh)
MultiMesh.quadrature_rule_cut_cells = new_instancemethod(_mesh.MultiMesh_quadrature_rule_cut_cells, None, MultiMesh)
MultiMesh.quadrature_rule_cut_cell = new_instancemethod(_mesh.MultiMesh_quadrature_rule_cut_cell, None, MultiMesh)
MultiMesh.quadrature_rule_overlap = new_instancemethod(_mesh.MultiMesh_quadrature_rule_overlap, None, MultiMesh)
MultiMesh.quadrature_rule_interface = new_instancemethod(_mesh.MultiMesh_quadrature_rule_interface, None, MultiMesh)
MultiMesh.facet_normals = new_instancemethod(_mesh.MultiMesh_facet_normals, None, MultiMesh)
MultiMesh.bounding_box_tree = new_instancemethod(_mesh.MultiMesh_bounding_box_tree, None, MultiMesh)
MultiMesh.bounding_box_tree_boundary = new_instancemethod(_mesh.MultiMesh_bounding_box_tree_boundary, None, MultiMesh)
MultiMesh.add = new_instancemethod(_mesh.MultiMesh_add, None, MultiMesh)
MultiMesh.build = new_instancemethod(_mesh.MultiMesh_build, None, MultiMesh)
MultiMesh.clear = new_instancemethod(_mesh.MultiMesh_clear, None, MultiMesh)
MultiMesh_swigregister = _mesh.MultiMesh_swigregister
MultiMesh_swigregister(MultiMesh)

class MeshHierarchy(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.MeshHierarchy_swiginit(self, _mesh.new_MeshHierarchy(*args))
    __swig_destroy__ = _mesh.delete_MeshHierarchy

    def size(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshHierarchy_size(self)


    def finest(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshHierarchy_finest(self)


    def coarsest(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshHierarchy_coarsest(self)


    def refine(self, markers):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshHierarchy_refine(self, markers)


    def unrefine(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshHierarchy_unrefine(self)


    def coarsen(self, markers):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshHierarchy_coarsen(self, markers)


    def weight(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshHierarchy_weight(self)


    def rebalance(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshHierarchy_rebalance(self)

MeshHierarchy.size = new_instancemethod(_mesh.MeshHierarchy_size, None, MeshHierarchy)
MeshHierarchy.finest = new_instancemethod(_mesh.MeshHierarchy_finest, None, MeshHierarchy)
MeshHierarchy.coarsest = new_instancemethod(_mesh.MeshHierarchy_coarsest, None, MeshHierarchy)
MeshHierarchy.refine = new_instancemethod(_mesh.MeshHierarchy_refine, None, MeshHierarchy)
MeshHierarchy.unrefine = new_instancemethod(_mesh.MeshHierarchy_unrefine, None, MeshHierarchy)
MeshHierarchy.coarsen = new_instancemethod(_mesh.MeshHierarchy_coarsen, None, MeshHierarchy)
MeshHierarchy.weight = new_instancemethod(_mesh.MeshHierarchy_weight, None, MeshHierarchy)
MeshHierarchy.rebalance = new_instancemethod(_mesh.MeshHierarchy_rebalance, None, MeshHierarchy)
MeshHierarchy.__getitem__ = new_instancemethod(_mesh.MeshHierarchy___getitem__, None, MeshHierarchy)
MeshHierarchy_swigregister = _mesh.MeshHierarchy_swigregister
MeshHierarchy_swigregister(MeshHierarchy)

class MeshPartitioning(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def build_distributed_mesh(*args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshPartitioning_build_distributed_mesh(*args)

    build_distributed_mesh = staticmethod(build_distributed_mesh)

    def __init__(self):
        _mesh.MeshPartitioning_swiginit(self, _mesh.new_MeshPartitioning())
    __swig_destroy__ = _mesh.delete_MeshPartitioning
MeshPartitioning_swigregister = _mesh.MeshPartitioning_swigregister
MeshPartitioning_swigregister(MeshPartitioning)

def MeshPartitioning_build_distributed_mesh(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.MeshPartitioning_build_distributed_mesh(*args)


_subdomain_mark_doc_string = SubDomain._mark.__doc__


import sys
if sys.version_info[0] > 2:
    SubDomain.mark.__doc__ = _subdomain_mark_doc_string
else:
    SubDomain.mark.__func__.__doc__ = _subdomain_mark_doc_string
del _subdomain_mark_doc_string

class MeshFunctionSizet(common.Variable, HierarchicalMeshFunctionSizet):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.MeshFunctionSizet_swiginit(self, _mesh.new_MeshFunctionSizet(*args))
    __swig_destroy__ = _mesh.delete_MeshFunctionSizet

    def mesh(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionSizet_mesh(self)


    def dim(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionSizet_dim(self)


    def empty(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionSizet_empty(self)


    def size(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionSizet_size(self)


    def init(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionSizet_init(self, *args)


    def set_value(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionSizet_set_value(self, *args)


    def set_values(self, values):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionSizet_set_values(self, values)


    def set_all(self, value):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionSizet_set_all(self, value)


    def where_equal(self, value):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionSizet_where_equal(self, value)


    @staticmethod
    def cpp_value_type():
        return"std::size_t"


    def _getitem(self, *args):
        """Missing docstring"""
        return _mesh.MeshFunctionSizet__getitem(self, *args)


    def _setitem(self, *args):
        """Missing docstring"""
        return _mesh.MeshFunctionSizet__setitem(self, *args)


    def array(self):
        """
        Return a NumPy array view of the data
        """
        data = self._array()
        _attach_base_to_numpy_array(data, self)
        return data

    def __getitem__(self, index):
        if not isinstance(index, (int, MeshEntity)):
            raise TypeError("expected an int or a MeshEntity as index argument")

        if isinstance(index, MeshEntity):
            entity = index
            assert entity.mesh().id() == self.mesh().id(), "MeshEntity and MeshFunction do not share the same mesh"
            assert entity.dim() == self.dim(), "MeshEntity and MeshFunction do not share the same topological dimensions"

            index = entity.index()

        while index < 0:
            index += self.size()
        if index >= self.size():
            raise IndexError("index out of range")
        return self._getitem(index)

    def __setitem__(self, index, value):
        if not isinstance(index, (int, MeshEntity)):
            raise TypeError("expected an int or a MeshEntity as index argument")

        if isinstance(index, MeshEntity):
            entity = index
            assert entity.mesh().id() == self.mesh().id(), "MeshEntity and MeshFunction do not share the same mesh"
            assert entity.dim() == self.dim(), "MeshEntity and MeshFunction do not share the same topological dimensions"

            index = entity.index()

        while index < 0:
            index += self.size()
        if index >= self.size():
            raise IndexError("index out of range")
        self._setitem(index, value)

    def __len__(self):
        return self.size()

    def ufl_id(self):
        "Returns an id that UFL can use to decide if two objects are the same."
        return self.id()


MeshFunctionSizet.mesh = new_instancemethod(_mesh.MeshFunctionSizet_mesh, None, MeshFunctionSizet)
MeshFunctionSizet.dim = new_instancemethod(_mesh.MeshFunctionSizet_dim, None, MeshFunctionSizet)
MeshFunctionSizet.empty = new_instancemethod(_mesh.MeshFunctionSizet_empty, None, MeshFunctionSizet)
MeshFunctionSizet.size = new_instancemethod(_mesh.MeshFunctionSizet_size, None, MeshFunctionSizet)
MeshFunctionSizet.init = new_instancemethod(_mesh.MeshFunctionSizet_init, None, MeshFunctionSizet)
MeshFunctionSizet.set_value = new_instancemethod(_mesh.MeshFunctionSizet_set_value, None, MeshFunctionSizet)
MeshFunctionSizet.set_values = new_instancemethod(_mesh.MeshFunctionSizet_set_values, None, MeshFunctionSizet)
MeshFunctionSizet.set_all = new_instancemethod(_mesh.MeshFunctionSizet_set_all, None, MeshFunctionSizet)
MeshFunctionSizet.where_equal = new_instancemethod(_mesh.MeshFunctionSizet_where_equal, None, MeshFunctionSizet)
MeshFunctionSizet._array = new_instancemethod(_mesh.MeshFunctionSizet__array, None, MeshFunctionSizet)
MeshFunctionSizet._getitem = new_instancemethod(_mesh.MeshFunctionSizet__getitem, None, MeshFunctionSizet)
MeshFunctionSizet._setitem = new_instancemethod(_mesh.MeshFunctionSizet__setitem, None, MeshFunctionSizet)
MeshFunctionSizet_swigregister = _mesh.MeshFunctionSizet_swigregister
MeshFunctionSizet_swigregister(MeshFunctionSizet)

class CellFunctionSizet(MeshFunctionSizet):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.CellFunctionSizet_swiginit(self, _mesh.new_CellFunctionSizet(*args))
    __swig_destroy__ = _mesh.delete_CellFunctionSizet
CellFunctionSizet_swigregister = _mesh.CellFunctionSizet_swigregister
CellFunctionSizet_swigregister(CellFunctionSizet)

class EdgeFunctionSizet(MeshFunctionSizet):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.EdgeFunctionSizet_swiginit(self, _mesh.new_EdgeFunctionSizet(*args))
    __swig_destroy__ = _mesh.delete_EdgeFunctionSizet
EdgeFunctionSizet_swigregister = _mesh.EdgeFunctionSizet_swigregister
EdgeFunctionSizet_swigregister(EdgeFunctionSizet)

class FaceFunctionSizet(MeshFunctionSizet):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.FaceFunctionSizet_swiginit(self, _mesh.new_FaceFunctionSizet(*args))
    __swig_destroy__ = _mesh.delete_FaceFunctionSizet
FaceFunctionSizet_swigregister = _mesh.FaceFunctionSizet_swigregister
FaceFunctionSizet_swigregister(FaceFunctionSizet)

class FacetFunctionSizet(MeshFunctionSizet):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.FacetFunctionSizet_swiginit(self, _mesh.new_FacetFunctionSizet(*args))
    __swig_destroy__ = _mesh.delete_FacetFunctionSizet
FacetFunctionSizet_swigregister = _mesh.FacetFunctionSizet_swigregister
FacetFunctionSizet_swigregister(FacetFunctionSizet)

class VertexFunctionSizet(MeshFunctionSizet):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.VertexFunctionSizet_swiginit(self, _mesh.new_VertexFunctionSizet(*args))
    __swig_destroy__ = _mesh.delete_VertexFunctionSizet
VertexFunctionSizet_swigregister = _mesh.VertexFunctionSizet_swigregister
VertexFunctionSizet_swigregister(VertexFunctionSizet)


HierarchicalMeshFunctionSizet.leaf_node = HierarchicalMeshFunctionSizet._leaf_node
HierarchicalMeshFunctionSizet.root_node = HierarchicalMeshFunctionSizet._root_node
HierarchicalMeshFunctionSizet.child = HierarchicalMeshFunctionSizet._child
HierarchicalMeshFunctionSizet.parent = HierarchicalMeshFunctionSizet._parent

class MeshFunctionInt(common.Variable, HierarchicalMeshFunctionInt):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.MeshFunctionInt_swiginit(self, _mesh.new_MeshFunctionInt(*args))
    __swig_destroy__ = _mesh.delete_MeshFunctionInt

    def mesh(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionInt_mesh(self)


    def dim(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionInt_dim(self)


    def empty(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionInt_empty(self)


    def size(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionInt_size(self)


    def init(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionInt_init(self, *args)


    def set_value(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionInt_set_value(self, *args)


    def set_values(self, values):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionInt_set_values(self, values)


    def set_all(self, value):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionInt_set_all(self, value)


    def where_equal(self, value):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionInt_where_equal(self, value)


    @staticmethod
    def cpp_value_type():
        return"int"


    def _getitem(self, *args):
        """Missing docstring"""
        return _mesh.MeshFunctionInt__getitem(self, *args)


    def _setitem(self, *args):
        """Missing docstring"""
        return _mesh.MeshFunctionInt__setitem(self, *args)


    def array(self):
        """
        Return a NumPy array view of the data
        """
        data = self._array()
        _attach_base_to_numpy_array(data, self)
        return data

    def __getitem__(self, index):
        if not isinstance(index, (int, MeshEntity)):
            raise TypeError("expected an int or a MeshEntity as index argument")

        if isinstance(index, MeshEntity):
            entity = index
            assert entity.mesh().id() == self.mesh().id(), "MeshEntity and MeshFunction do not share the same mesh"
            assert entity.dim() == self.dim(), "MeshEntity and MeshFunction do not share the same topological dimensions"

            index = entity.index()

        while index < 0:
            index += self.size()
        if index >= self.size():
            raise IndexError("index out of range")
        return self._getitem(index)

    def __setitem__(self, index, value):
        if not isinstance(index, (int, MeshEntity)):
            raise TypeError("expected an int or a MeshEntity as index argument")

        if isinstance(index, MeshEntity):
            entity = index
            assert entity.mesh().id() == self.mesh().id(), "MeshEntity and MeshFunction do not share the same mesh"
            assert entity.dim() == self.dim(), "MeshEntity and MeshFunction do not share the same topological dimensions"

            index = entity.index()

        while index < 0:
            index += self.size()
        if index >= self.size():
            raise IndexError("index out of range")
        self._setitem(index, value)

    def __len__(self):
        return self.size()

    def ufl_id(self):
        "Returns an id that UFL can use to decide if two objects are the same."
        return self.id()


MeshFunctionInt.mesh = new_instancemethod(_mesh.MeshFunctionInt_mesh, None, MeshFunctionInt)
MeshFunctionInt.dim = new_instancemethod(_mesh.MeshFunctionInt_dim, None, MeshFunctionInt)
MeshFunctionInt.empty = new_instancemethod(_mesh.MeshFunctionInt_empty, None, MeshFunctionInt)
MeshFunctionInt.size = new_instancemethod(_mesh.MeshFunctionInt_size, None, MeshFunctionInt)
MeshFunctionInt.init = new_instancemethod(_mesh.MeshFunctionInt_init, None, MeshFunctionInt)
MeshFunctionInt.set_value = new_instancemethod(_mesh.MeshFunctionInt_set_value, None, MeshFunctionInt)
MeshFunctionInt.set_values = new_instancemethod(_mesh.MeshFunctionInt_set_values, None, MeshFunctionInt)
MeshFunctionInt.set_all = new_instancemethod(_mesh.MeshFunctionInt_set_all, None, MeshFunctionInt)
MeshFunctionInt.where_equal = new_instancemethod(_mesh.MeshFunctionInt_where_equal, None, MeshFunctionInt)
MeshFunctionInt._array = new_instancemethod(_mesh.MeshFunctionInt__array, None, MeshFunctionInt)
MeshFunctionInt._getitem = new_instancemethod(_mesh.MeshFunctionInt__getitem, None, MeshFunctionInt)
MeshFunctionInt._setitem = new_instancemethod(_mesh.MeshFunctionInt__setitem, None, MeshFunctionInt)
MeshFunctionInt_swigregister = _mesh.MeshFunctionInt_swigregister
MeshFunctionInt_swigregister(MeshFunctionInt)

class CellFunctionInt(MeshFunctionInt):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.CellFunctionInt_swiginit(self, _mesh.new_CellFunctionInt(*args))
    __swig_destroy__ = _mesh.delete_CellFunctionInt
CellFunctionInt_swigregister = _mesh.CellFunctionInt_swigregister
CellFunctionInt_swigregister(CellFunctionInt)

class EdgeFunctionInt(MeshFunctionInt):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.EdgeFunctionInt_swiginit(self, _mesh.new_EdgeFunctionInt(*args))
    __swig_destroy__ = _mesh.delete_EdgeFunctionInt
EdgeFunctionInt_swigregister = _mesh.EdgeFunctionInt_swigregister
EdgeFunctionInt_swigregister(EdgeFunctionInt)

class FaceFunctionInt(MeshFunctionInt):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.FaceFunctionInt_swiginit(self, _mesh.new_FaceFunctionInt(*args))
    __swig_destroy__ = _mesh.delete_FaceFunctionInt
FaceFunctionInt_swigregister = _mesh.FaceFunctionInt_swigregister
FaceFunctionInt_swigregister(FaceFunctionInt)

class FacetFunctionInt(MeshFunctionInt):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.FacetFunctionInt_swiginit(self, _mesh.new_FacetFunctionInt(*args))
    __swig_destroy__ = _mesh.delete_FacetFunctionInt
FacetFunctionInt_swigregister = _mesh.FacetFunctionInt_swigregister
FacetFunctionInt_swigregister(FacetFunctionInt)

class VertexFunctionInt(MeshFunctionInt):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.VertexFunctionInt_swiginit(self, _mesh.new_VertexFunctionInt(*args))
    __swig_destroy__ = _mesh.delete_VertexFunctionInt
VertexFunctionInt_swigregister = _mesh.VertexFunctionInt_swigregister
VertexFunctionInt_swigregister(VertexFunctionInt)


HierarchicalMeshFunctionInt.leaf_node = HierarchicalMeshFunctionInt._leaf_node
HierarchicalMeshFunctionInt.root_node = HierarchicalMeshFunctionInt._root_node
HierarchicalMeshFunctionInt.child = HierarchicalMeshFunctionInt._child
HierarchicalMeshFunctionInt.parent = HierarchicalMeshFunctionInt._parent

class MeshFunctionDouble(common.Variable, HierarchicalMeshFunctionDouble):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.MeshFunctionDouble_swiginit(self, _mesh.new_MeshFunctionDouble(*args))
    __swig_destroy__ = _mesh.delete_MeshFunctionDouble

    def mesh(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionDouble_mesh(self)


    def dim(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionDouble_dim(self)


    def empty(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionDouble_empty(self)


    def size(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionDouble_size(self)


    def init(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionDouble_init(self, *args)


    def set_value(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionDouble_set_value(self, *args)


    def set_values(self, values):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionDouble_set_values(self, values)


    def set_all(self, value):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionDouble_set_all(self, value)


    def where_equal(self, value):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionDouble_where_equal(self, value)


    @staticmethod
    def cpp_value_type():
        return"double"


    def _getitem(self, *args):
        """Missing docstring"""
        return _mesh.MeshFunctionDouble__getitem(self, *args)


    def _setitem(self, *args):
        """Missing docstring"""
        return _mesh.MeshFunctionDouble__setitem(self, *args)


    def array(self):
        """
        Return a NumPy array view of the data
        """
        data = self._array()
        _attach_base_to_numpy_array(data, self)
        return data

    def __getitem__(self, index):
        if not isinstance(index, (int, MeshEntity)):
            raise TypeError("expected an int or a MeshEntity as index argument")

        if isinstance(index, MeshEntity):
            entity = index
            assert entity.mesh().id() == self.mesh().id(), "MeshEntity and MeshFunction do not share the same mesh"
            assert entity.dim() == self.dim(), "MeshEntity and MeshFunction do not share the same topological dimensions"

            index = entity.index()

        while index < 0:
            index += self.size()
        if index >= self.size():
            raise IndexError("index out of range")
        return self._getitem(index)

    def __setitem__(self, index, value):
        if not isinstance(index, (int, MeshEntity)):
            raise TypeError("expected an int or a MeshEntity as index argument")

        if isinstance(index, MeshEntity):
            entity = index
            assert entity.mesh().id() == self.mesh().id(), "MeshEntity and MeshFunction do not share the same mesh"
            assert entity.dim() == self.dim(), "MeshEntity and MeshFunction do not share the same topological dimensions"

            index = entity.index()

        while index < 0:
            index += self.size()
        if index >= self.size():
            raise IndexError("index out of range")
        self._setitem(index, value)

    def __len__(self):
        return self.size()

    def ufl_id(self):
        "Returns an id that UFL can use to decide if two objects are the same."
        return self.id()


MeshFunctionDouble.mesh = new_instancemethod(_mesh.MeshFunctionDouble_mesh, None, MeshFunctionDouble)
MeshFunctionDouble.dim = new_instancemethod(_mesh.MeshFunctionDouble_dim, None, MeshFunctionDouble)
MeshFunctionDouble.empty = new_instancemethod(_mesh.MeshFunctionDouble_empty, None, MeshFunctionDouble)
MeshFunctionDouble.size = new_instancemethod(_mesh.MeshFunctionDouble_size, None, MeshFunctionDouble)
MeshFunctionDouble.init = new_instancemethod(_mesh.MeshFunctionDouble_init, None, MeshFunctionDouble)
MeshFunctionDouble.set_value = new_instancemethod(_mesh.MeshFunctionDouble_set_value, None, MeshFunctionDouble)
MeshFunctionDouble.set_values = new_instancemethod(_mesh.MeshFunctionDouble_set_values, None, MeshFunctionDouble)
MeshFunctionDouble.set_all = new_instancemethod(_mesh.MeshFunctionDouble_set_all, None, MeshFunctionDouble)
MeshFunctionDouble.where_equal = new_instancemethod(_mesh.MeshFunctionDouble_where_equal, None, MeshFunctionDouble)
MeshFunctionDouble._array = new_instancemethod(_mesh.MeshFunctionDouble__array, None, MeshFunctionDouble)
MeshFunctionDouble._getitem = new_instancemethod(_mesh.MeshFunctionDouble__getitem, None, MeshFunctionDouble)
MeshFunctionDouble._setitem = new_instancemethod(_mesh.MeshFunctionDouble__setitem, None, MeshFunctionDouble)
MeshFunctionDouble_swigregister = _mesh.MeshFunctionDouble_swigregister
MeshFunctionDouble_swigregister(MeshFunctionDouble)

class CellFunctionDouble(MeshFunctionDouble):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.CellFunctionDouble_swiginit(self, _mesh.new_CellFunctionDouble(*args))
    __swig_destroy__ = _mesh.delete_CellFunctionDouble
CellFunctionDouble_swigregister = _mesh.CellFunctionDouble_swigregister
CellFunctionDouble_swigregister(CellFunctionDouble)

class EdgeFunctionDouble(MeshFunctionDouble):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.EdgeFunctionDouble_swiginit(self, _mesh.new_EdgeFunctionDouble(*args))
    __swig_destroy__ = _mesh.delete_EdgeFunctionDouble
EdgeFunctionDouble_swigregister = _mesh.EdgeFunctionDouble_swigregister
EdgeFunctionDouble_swigregister(EdgeFunctionDouble)

class FaceFunctionDouble(MeshFunctionDouble):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.FaceFunctionDouble_swiginit(self, _mesh.new_FaceFunctionDouble(*args))
    __swig_destroy__ = _mesh.delete_FaceFunctionDouble
FaceFunctionDouble_swigregister = _mesh.FaceFunctionDouble_swigregister
FaceFunctionDouble_swigregister(FaceFunctionDouble)

class FacetFunctionDouble(MeshFunctionDouble):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.FacetFunctionDouble_swiginit(self, _mesh.new_FacetFunctionDouble(*args))
    __swig_destroy__ = _mesh.delete_FacetFunctionDouble
FacetFunctionDouble_swigregister = _mesh.FacetFunctionDouble_swigregister
FacetFunctionDouble_swigregister(FacetFunctionDouble)

class VertexFunctionDouble(MeshFunctionDouble):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.VertexFunctionDouble_swiginit(self, _mesh.new_VertexFunctionDouble(*args))
    __swig_destroy__ = _mesh.delete_VertexFunctionDouble
VertexFunctionDouble_swigregister = _mesh.VertexFunctionDouble_swigregister
VertexFunctionDouble_swigregister(VertexFunctionDouble)


HierarchicalMeshFunctionDouble.leaf_node = HierarchicalMeshFunctionDouble._leaf_node
HierarchicalMeshFunctionDouble.root_node = HierarchicalMeshFunctionDouble._root_node
HierarchicalMeshFunctionDouble.child = HierarchicalMeshFunctionDouble._child
HierarchicalMeshFunctionDouble.parent = HierarchicalMeshFunctionDouble._parent

class MeshFunctionBool(common.Variable, HierarchicalMeshFunctionBool):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.MeshFunctionBool_swiginit(self, _mesh.new_MeshFunctionBool(*args))
    __swig_destroy__ = _mesh.delete_MeshFunctionBool

    def mesh(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionBool_mesh(self)


    def dim(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionBool_dim(self)


    def empty(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionBool_empty(self)


    def size(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionBool_size(self)


    def init(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionBool_init(self, *args)


    def set_value(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionBool_set_value(self, *args)


    def set_values(self, values):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionBool_set_values(self, values)


    def set_all(self, value):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionBool_set_all(self, value)


    def where_equal(self, value):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshFunctionBool_where_equal(self, value)


    @staticmethod
    def cpp_value_type():
        return"bool"


    def _getitem(self, *args):
        """Missing docstring"""
        return _mesh.MeshFunctionBool__getitem(self, *args)


    def _setitem(self, *args):
        """Missing docstring"""
        return _mesh.MeshFunctionBool__setitem(self, *args)


    def array(self):
        """
        Return a NumPy array view of the data
        """
        data = self._array()
        _attach_base_to_numpy_array(data, self)
        return data

    def __getitem__(self, index):
        if not isinstance(index, (int, MeshEntity)):
            raise TypeError("expected an int or a MeshEntity as index argument")

        if isinstance(index, MeshEntity):
            entity = index
            assert entity.mesh().id() == self.mesh().id(), "MeshEntity and MeshFunction do not share the same mesh"
            assert entity.dim() == self.dim(), "MeshEntity and MeshFunction do not share the same topological dimensions"

            index = entity.index()

        while index < 0:
            index += self.size()
        if index >= self.size():
            raise IndexError("index out of range")
        return self._getitem(index)

    def __setitem__(self, index, value):
        if not isinstance(index, (int, MeshEntity)):
            raise TypeError("expected an int or a MeshEntity as index argument")

        if isinstance(index, MeshEntity):
            entity = index
            assert entity.mesh().id() == self.mesh().id(), "MeshEntity and MeshFunction do not share the same mesh"
            assert entity.dim() == self.dim(), "MeshEntity and MeshFunction do not share the same topological dimensions"

            index = entity.index()

        while index < 0:
            index += self.size()
        if index >= self.size():
            raise IndexError("index out of range")
        self._setitem(index, value)

    def __len__(self):
        return self.size()

    def ufl_id(self):
        "Returns an id that UFL can use to decide if two objects are the same."
        return self.id()


MeshFunctionBool.mesh = new_instancemethod(_mesh.MeshFunctionBool_mesh, None, MeshFunctionBool)
MeshFunctionBool.dim = new_instancemethod(_mesh.MeshFunctionBool_dim, None, MeshFunctionBool)
MeshFunctionBool.empty = new_instancemethod(_mesh.MeshFunctionBool_empty, None, MeshFunctionBool)
MeshFunctionBool.size = new_instancemethod(_mesh.MeshFunctionBool_size, None, MeshFunctionBool)
MeshFunctionBool.init = new_instancemethod(_mesh.MeshFunctionBool_init, None, MeshFunctionBool)
MeshFunctionBool.set_value = new_instancemethod(_mesh.MeshFunctionBool_set_value, None, MeshFunctionBool)
MeshFunctionBool.set_values = new_instancemethod(_mesh.MeshFunctionBool_set_values, None, MeshFunctionBool)
MeshFunctionBool.set_all = new_instancemethod(_mesh.MeshFunctionBool_set_all, None, MeshFunctionBool)
MeshFunctionBool.where_equal = new_instancemethod(_mesh.MeshFunctionBool_where_equal, None, MeshFunctionBool)
MeshFunctionBool._array = new_instancemethod(_mesh.MeshFunctionBool__array, None, MeshFunctionBool)
MeshFunctionBool._getitem = new_instancemethod(_mesh.MeshFunctionBool__getitem, None, MeshFunctionBool)
MeshFunctionBool._setitem = new_instancemethod(_mesh.MeshFunctionBool__setitem, None, MeshFunctionBool)
MeshFunctionBool_swigregister = _mesh.MeshFunctionBool_swigregister
MeshFunctionBool_swigregister(MeshFunctionBool)

class CellFunctionBool(MeshFunctionBool):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.CellFunctionBool_swiginit(self, _mesh.new_CellFunctionBool(*args))
    __swig_destroy__ = _mesh.delete_CellFunctionBool
CellFunctionBool_swigregister = _mesh.CellFunctionBool_swigregister
CellFunctionBool_swigregister(CellFunctionBool)

class EdgeFunctionBool(MeshFunctionBool):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.EdgeFunctionBool_swiginit(self, _mesh.new_EdgeFunctionBool(*args))
    __swig_destroy__ = _mesh.delete_EdgeFunctionBool
EdgeFunctionBool_swigregister = _mesh.EdgeFunctionBool_swigregister
EdgeFunctionBool_swigregister(EdgeFunctionBool)

class FaceFunctionBool(MeshFunctionBool):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.FaceFunctionBool_swiginit(self, _mesh.new_FaceFunctionBool(*args))
    __swig_destroy__ = _mesh.delete_FaceFunctionBool
FaceFunctionBool_swigregister = _mesh.FaceFunctionBool_swigregister
FaceFunctionBool_swigregister(FaceFunctionBool)

class FacetFunctionBool(MeshFunctionBool):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.FacetFunctionBool_swiginit(self, _mesh.new_FacetFunctionBool(*args))
    __swig_destroy__ = _mesh.delete_FacetFunctionBool
FacetFunctionBool_swigregister = _mesh.FacetFunctionBool_swigregister
FacetFunctionBool_swigregister(FacetFunctionBool)

class VertexFunctionBool(MeshFunctionBool):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.VertexFunctionBool_swiginit(self, _mesh.new_VertexFunctionBool(*args))
    __swig_destroy__ = _mesh.delete_VertexFunctionBool
VertexFunctionBool_swigregister = _mesh.VertexFunctionBool_swigregister
VertexFunctionBool_swigregister(VertexFunctionBool)


HierarchicalMeshFunctionBool.leaf_node = HierarchicalMeshFunctionBool._leaf_node
HierarchicalMeshFunctionBool.root_node = HierarchicalMeshFunctionBool._root_node
HierarchicalMeshFunctionBool.child = HierarchicalMeshFunctionBool._child
HierarchicalMeshFunctionBool.parent = HierarchicalMeshFunctionBool._parent


from six import string_types

_doc_string = MeshFunctionInt.__doc__ or ''
_doc_string += """
  *Arguments*
    tp (str)
      String defining the type of the MeshFunction
      Allowed: 'int', 'size_t', 'double', and 'bool'
    mesh (_Mesh_)
      A DOLFIN mesh.
      Optional.
    dim (unsigned int)
      The topological dimension of the MeshFunction.
      Optional.
    filename (str)
      A filename with a stored MeshFunction.
      Optional.

"""
class MeshFunction(object):
    __doc__ = _doc_string
    def __new__(cls, tp, *args):
        if not isinstance(tp, string_types):
            raise TypeError("expected a 'str' as first argument")
        if tp == "int":
            return MeshFunctionInt(*args)
        elif tp == "size_t":
            return MeshFunctionSizet(*args)
        elif tp == "double":
            return MeshFunctionDouble(*args)
        elif tp == "bool":
            return MeshFunctionBool(*args)
        else:
            raise RuntimeError("Cannot create a MeshFunction of type '%s'." % (tp,))

del _doc_string

def _new_closure(MeshType):
    assert isinstance(MeshType, string_types)
    def new(cls, tp, mesh, value=0):
        if not isinstance(tp, string_types):
            raise TypeError("expected a 'str' as first argument")
        if tp == "int":
            return eval("%sInt(mesh, value)"%MeshType)
        if tp == "uint":
            return eval("%sSizet(mesh, value)"%MeshType)
        if tp == "size_t":
            return eval("%sSizet(mesh, value)"%MeshType)
        elif tp == "double":
            return eval("%sDouble(mesh, float(value))"%MeshType)
        elif tp == "bool":
            value = bool(value) if isinstance(value, int) else value
            return eval("%sBool(mesh, value)"%MeshType)
        else:
            raise RuntimeError("Cannot create a %sFunction of type '%s'." % (MeshType, tp))

    return new

# Create the named MeshFunction types
VertexFunction = type("VertexFunction", (), \
		      {"__new__":_new_closure("VertexFunction"),\
                       "__doc__":"Create MeshFunction of topological"\
                       " dimension 0 on given mesh."})
EdgeFunction = type("EdgeFunction", (), \
                    {"__new__":_new_closure("EdgeFunction"),\
                     "__doc__":"Create MeshFunction of topological"\
                     " dimension 1 on given mesh."})
FaceFunction = type("FaceFunction", (),\
                    {"__new__":_new_closure("FaceFunction"),\
                     "__doc__":"Create MeshFunction of topological"\
                     " dimension 2 on given mesh."})
FacetFunction = type("FacetFunction", (),\
                     {"__new__":_new_closure("FacetFunction"),
                      "__doc__":"Create MeshFunction of topological"\
                      " codimension 1 on given mesh."})
CellFunction = type("CellFunction", (),\
                    {"__new__":_new_closure("CellFunction"),\
                     "__doc__":"Create MeshFunction of topological"\
                     " codimension 0 on given mesh."})

class MeshValueCollectionSizet(common.Variable):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.MeshValueCollectionSizet_swiginit(self, _mesh.new_MeshValueCollectionSizet(*args))
    __swig_destroy__ = _mesh.delete_MeshValueCollectionSizet

    def init(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionSizet_init(self, *args)


    def dim(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionSizet_dim(self)


    def mesh(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionSizet_mesh(self)


    def empty(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionSizet_empty(self)


    def size(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionSizet_size(self)


    def set_value(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionSizet_set_value(self, *args)


    def get_value(self, cell_index, local_entity):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionSizet_get_value(self, cell_index, local_entity)


    def values(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionSizet_values(self, *args)


    def clear(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionSizet_clear(self)


    def assign(self, *args):
        """Missing docstring"""
        return _mesh.MeshValueCollectionSizet_assign(self, *args)

MeshValueCollectionSizet.init = new_instancemethod(_mesh.MeshValueCollectionSizet_init, None, MeshValueCollectionSizet)
MeshValueCollectionSizet.dim = new_instancemethod(_mesh.MeshValueCollectionSizet_dim, None, MeshValueCollectionSizet)
MeshValueCollectionSizet.mesh = new_instancemethod(_mesh.MeshValueCollectionSizet_mesh, None, MeshValueCollectionSizet)
MeshValueCollectionSizet.empty = new_instancemethod(_mesh.MeshValueCollectionSizet_empty, None, MeshValueCollectionSizet)
MeshValueCollectionSizet.size = new_instancemethod(_mesh.MeshValueCollectionSizet_size, None, MeshValueCollectionSizet)
MeshValueCollectionSizet.set_value = new_instancemethod(_mesh.MeshValueCollectionSizet_set_value, None, MeshValueCollectionSizet)
MeshValueCollectionSizet.get_value = new_instancemethod(_mesh.MeshValueCollectionSizet_get_value, None, MeshValueCollectionSizet)
MeshValueCollectionSizet.values = new_instancemethod(_mesh.MeshValueCollectionSizet_values, None, MeshValueCollectionSizet)
MeshValueCollectionSizet.clear = new_instancemethod(_mesh.MeshValueCollectionSizet_clear, None, MeshValueCollectionSizet)
MeshValueCollectionSizet.assign = new_instancemethod(_mesh.MeshValueCollectionSizet_assign, None, MeshValueCollectionSizet)
MeshValueCollectionSizet_swigregister = _mesh.MeshValueCollectionSizet_swigregister
MeshValueCollectionSizet_swigregister(MeshValueCollectionSizet)

class MeshValueCollectionInt(common.Variable):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.MeshValueCollectionInt_swiginit(self, _mesh.new_MeshValueCollectionInt(*args))
    __swig_destroy__ = _mesh.delete_MeshValueCollectionInt

    def init(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionInt_init(self, *args)


    def dim(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionInt_dim(self)


    def mesh(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionInt_mesh(self)


    def empty(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionInt_empty(self)


    def size(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionInt_size(self)


    def set_value(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionInt_set_value(self, *args)


    def get_value(self, cell_index, local_entity):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionInt_get_value(self, cell_index, local_entity)


    def values(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionInt_values(self, *args)


    def clear(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionInt_clear(self)


    def assign(self, *args):
        """Missing docstring"""
        return _mesh.MeshValueCollectionInt_assign(self, *args)

MeshValueCollectionInt.init = new_instancemethod(_mesh.MeshValueCollectionInt_init, None, MeshValueCollectionInt)
MeshValueCollectionInt.dim = new_instancemethod(_mesh.MeshValueCollectionInt_dim, None, MeshValueCollectionInt)
MeshValueCollectionInt.mesh = new_instancemethod(_mesh.MeshValueCollectionInt_mesh, None, MeshValueCollectionInt)
MeshValueCollectionInt.empty = new_instancemethod(_mesh.MeshValueCollectionInt_empty, None, MeshValueCollectionInt)
MeshValueCollectionInt.size = new_instancemethod(_mesh.MeshValueCollectionInt_size, None, MeshValueCollectionInt)
MeshValueCollectionInt.set_value = new_instancemethod(_mesh.MeshValueCollectionInt_set_value, None, MeshValueCollectionInt)
MeshValueCollectionInt.get_value = new_instancemethod(_mesh.MeshValueCollectionInt_get_value, None, MeshValueCollectionInt)
MeshValueCollectionInt.values = new_instancemethod(_mesh.MeshValueCollectionInt_values, None, MeshValueCollectionInt)
MeshValueCollectionInt.clear = new_instancemethod(_mesh.MeshValueCollectionInt_clear, None, MeshValueCollectionInt)
MeshValueCollectionInt.assign = new_instancemethod(_mesh.MeshValueCollectionInt_assign, None, MeshValueCollectionInt)
MeshValueCollectionInt_swigregister = _mesh.MeshValueCollectionInt_swigregister
MeshValueCollectionInt_swigregister(MeshValueCollectionInt)

class MeshValueCollectionDouble(common.Variable):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.MeshValueCollectionDouble_swiginit(self, _mesh.new_MeshValueCollectionDouble(*args))
    __swig_destroy__ = _mesh.delete_MeshValueCollectionDouble

    def init(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionDouble_init(self, *args)


    def dim(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionDouble_dim(self)


    def mesh(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionDouble_mesh(self)


    def empty(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionDouble_empty(self)


    def size(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionDouble_size(self)


    def set_value(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionDouble_set_value(self, *args)


    def get_value(self, cell_index, local_entity):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionDouble_get_value(self, cell_index, local_entity)


    def values(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionDouble_values(self, *args)


    def clear(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionDouble_clear(self)


    def assign(self, *args):
        """Missing docstring"""
        return _mesh.MeshValueCollectionDouble_assign(self, *args)

MeshValueCollectionDouble.init = new_instancemethod(_mesh.MeshValueCollectionDouble_init, None, MeshValueCollectionDouble)
MeshValueCollectionDouble.dim = new_instancemethod(_mesh.MeshValueCollectionDouble_dim, None, MeshValueCollectionDouble)
MeshValueCollectionDouble.mesh = new_instancemethod(_mesh.MeshValueCollectionDouble_mesh, None, MeshValueCollectionDouble)
MeshValueCollectionDouble.empty = new_instancemethod(_mesh.MeshValueCollectionDouble_empty, None, MeshValueCollectionDouble)
MeshValueCollectionDouble.size = new_instancemethod(_mesh.MeshValueCollectionDouble_size, None, MeshValueCollectionDouble)
MeshValueCollectionDouble.set_value = new_instancemethod(_mesh.MeshValueCollectionDouble_set_value, None, MeshValueCollectionDouble)
MeshValueCollectionDouble.get_value = new_instancemethod(_mesh.MeshValueCollectionDouble_get_value, None, MeshValueCollectionDouble)
MeshValueCollectionDouble.values = new_instancemethod(_mesh.MeshValueCollectionDouble_values, None, MeshValueCollectionDouble)
MeshValueCollectionDouble.clear = new_instancemethod(_mesh.MeshValueCollectionDouble_clear, None, MeshValueCollectionDouble)
MeshValueCollectionDouble.assign = new_instancemethod(_mesh.MeshValueCollectionDouble_assign, None, MeshValueCollectionDouble)
MeshValueCollectionDouble_swigregister = _mesh.MeshValueCollectionDouble_swigregister
MeshValueCollectionDouble_swigregister(MeshValueCollectionDouble)

class MeshValueCollectionBool(common.Variable):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.MeshValueCollectionBool_swiginit(self, _mesh.new_MeshValueCollectionBool(*args))
    __swig_destroy__ = _mesh.delete_MeshValueCollectionBool

    def init(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionBool_init(self, *args)


    def dim(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionBool_dim(self)


    def mesh(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionBool_mesh(self)


    def empty(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionBool_empty(self)


    def size(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionBool_size(self)


    def set_value(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionBool_set_value(self, *args)


    def get_value(self, cell_index, local_entity):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionBool_get_value(self, cell_index, local_entity)


    def values(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionBool_values(self, *args)


    def clear(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshValueCollectionBool_clear(self)


    def assign(self, *args):
        """Missing docstring"""
        return _mesh.MeshValueCollectionBool_assign(self, *args)

MeshValueCollectionBool.init = new_instancemethod(_mesh.MeshValueCollectionBool_init, None, MeshValueCollectionBool)
MeshValueCollectionBool.dim = new_instancemethod(_mesh.MeshValueCollectionBool_dim, None, MeshValueCollectionBool)
MeshValueCollectionBool.mesh = new_instancemethod(_mesh.MeshValueCollectionBool_mesh, None, MeshValueCollectionBool)
MeshValueCollectionBool.empty = new_instancemethod(_mesh.MeshValueCollectionBool_empty, None, MeshValueCollectionBool)
MeshValueCollectionBool.size = new_instancemethod(_mesh.MeshValueCollectionBool_size, None, MeshValueCollectionBool)
MeshValueCollectionBool.set_value = new_instancemethod(_mesh.MeshValueCollectionBool_set_value, None, MeshValueCollectionBool)
MeshValueCollectionBool.get_value = new_instancemethod(_mesh.MeshValueCollectionBool_get_value, None, MeshValueCollectionBool)
MeshValueCollectionBool.values = new_instancemethod(_mesh.MeshValueCollectionBool_values, None, MeshValueCollectionBool)
MeshValueCollectionBool.clear = new_instancemethod(_mesh.MeshValueCollectionBool_clear, None, MeshValueCollectionBool)
MeshValueCollectionBool.assign = new_instancemethod(_mesh.MeshValueCollectionBool_assign, None, MeshValueCollectionBool)
MeshValueCollectionBool_swigregister = _mesh.MeshValueCollectionBool_swigregister
MeshValueCollectionBool_swigregister(MeshValueCollectionBool)


from six import string_types

_meshvaluecollection_doc_string = MeshValueCollectionInt.__doc__  or ''
_meshvaluecollection_doc_string += """
  *Arguments*
      tp (str)
         String defining the type of the MeshValueCollection
          Allowed: 'int', 'size_t', 'double', and 'bool'
      dim (unsigned int)
          The topological dimension of the MeshValueCollection.
          Optional.
      mesh_function (_MeshFunction_)
          The MeshValueCollection will get the values from the mesh_function
          Optional.
       mesh (Mesh)
          A mesh associated with the collection. The mesh is used to
          map collection values to the appropriate process.
          Optional, used when read from file.
      filename (std::string)
          The XML file name.
          Optional, used when read from file.
      dim (unsigned int)
          The mesh entity dimension for the mesh value collection.
          Optional, used when read from file
"""
class MeshValueCollection(object):
    __doc__ = _meshvaluecollection_doc_string
    def __new__(cls, tp, *args):
        if not isinstance(tp, string_types):
            raise TypeError("expected a 'str' as first argument")
        if tp == "int":
            return MeshValueCollectionInt(*args)
        elif tp == "size_t":
            return MeshValueCollectionSizet(*args)
        elif tp == "double":
            return MeshValueCollectionDouble(*args)
        elif tp == "bool":
            return MeshValueCollectionBool(*args)
        else:
            raise RuntimeError("Cannot create a MeshValueCollection of type '%s'." % (tp,))

del _meshvaluecollection_doc_string


HierarchicalMesh.leaf_node = new_instancemethod(_mesh.HierarchicalMesh__leaf_node,None,HierarchicalMesh)
HierarchicalMesh.root_node = new_instancemethod(_mesh.HierarchicalMesh__root_node,None,HierarchicalMesh)
HierarchicalMesh.child = new_instancemethod(_mesh.HierarchicalMesh__child,None,HierarchicalMesh)
HierarchicalMesh.parent = new_instancemethod(_mesh.HierarchicalMesh__parent,None,HierarchicalMesh)

class BoxMesh(Mesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.BoxMesh_swiginit(self, _mesh.new_BoxMesh(*args))
    __swig_destroy__ = _mesh.delete_BoxMesh
BoxMesh_swigregister = _mesh.BoxMesh_swigregister
BoxMesh_swigregister(BoxMesh)

class IntervalMesh(Mesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.IntervalMesh_swiginit(self, _mesh.new_IntervalMesh(*args))
    __swig_destroy__ = _mesh.delete_IntervalMesh
IntervalMesh_swigregister = _mesh.IntervalMesh_swigregister
IntervalMesh_swigregister(IntervalMesh)

class RectangleMesh(Mesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.RectangleMesh_swiginit(self, _mesh.new_RectangleMesh(*args))
    __swig_destroy__ = _mesh.delete_RectangleMesh
RectangleMesh_swigregister = _mesh.RectangleMesh_swigregister
RectangleMesh_swigregister(RectangleMesh)

class UnitTetrahedronMesh(Mesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.UnitTetrahedronMesh_swiginit(self, _mesh.new_UnitTetrahedronMesh())
    __swig_destroy__ = _mesh.delete_UnitTetrahedronMesh
UnitTetrahedronMesh_swigregister = _mesh.UnitTetrahedronMesh_swigregister
UnitTetrahedronMesh_swigregister(UnitTetrahedronMesh)

class UnitCubeMesh(BoxMesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.UnitCubeMesh_swiginit(self, _mesh.new_UnitCubeMesh(*args))
    __swig_destroy__ = _mesh.delete_UnitCubeMesh
UnitCubeMesh_swigregister = _mesh.UnitCubeMesh_swigregister
UnitCubeMesh_swigregister(UnitCubeMesh)

class UnitIntervalMesh(IntervalMesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.UnitIntervalMesh_swiginit(self, _mesh.new_UnitIntervalMesh(*args))
    __swig_destroy__ = _mesh.delete_UnitIntervalMesh
UnitIntervalMesh_swigregister = _mesh.UnitIntervalMesh_swigregister
UnitIntervalMesh_swigregister(UnitIntervalMesh)

class UnitTriangleMesh(Mesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.UnitTriangleMesh_swiginit(self, _mesh.new_UnitTriangleMesh())
    __swig_destroy__ = _mesh.delete_UnitTriangleMesh
UnitTriangleMesh_swigregister = _mesh.UnitTriangleMesh_swigregister
UnitTriangleMesh_swigregister(UnitTriangleMesh)

class UnitSquareMesh(RectangleMesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.UnitSquareMesh_swiginit(self, _mesh.new_UnitSquareMesh(*args))
    __swig_destroy__ = _mesh.delete_UnitSquareMesh
UnitSquareMesh_swigregister = _mesh.UnitSquareMesh_swigregister
UnitSquareMesh_swigregister(UnitSquareMesh)

class UnitQuadMesh(Mesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, comm, nx, ny):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.UnitQuadMesh_swiginit(self, _mesh.new_UnitQuadMesh(comm, nx, ny))
    __swig_destroy__ = _mesh.delete_UnitQuadMesh
UnitQuadMesh_swigregister = _mesh.UnitQuadMesh_swigregister
UnitQuadMesh_swigregister(UnitQuadMesh)

class UnitHexMesh(Mesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, comm, nx, ny, nz):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.UnitHexMesh_swiginit(self, _mesh.new_UnitHexMesh(comm, nx, ny, nz))
    __swig_destroy__ = _mesh.delete_UnitHexMesh
UnitHexMesh_swigregister = _mesh.UnitHexMesh_swigregister
UnitHexMesh_swigregister(UnitHexMesh)

class UnitDiscMesh(Mesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, comm, n, degree, gdim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.UnitDiscMesh_swiginit(self, _mesh.new_UnitDiscMesh(comm, n, degree, gdim))
    __swig_destroy__ = _mesh.delete_UnitDiscMesh
UnitDiscMesh_swigregister = _mesh.UnitDiscMesh_swigregister
UnitDiscMesh_swigregister(UnitDiscMesh)

class SphericalShellMesh(Mesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, comm, degree):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.SphericalShellMesh_swiginit(self, _mesh.new_SphericalShellMesh(comm, degree))
    __swig_destroy__ = _mesh.delete_SphericalShellMesh
SphericalShellMesh_swigregister = _mesh.SphericalShellMesh_swigregister
SphericalShellMesh_swigregister(SphericalShellMesh)

class Point(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.Point_swiginit(self, _mesh.new_Point(*args))
    __swig_destroy__ = _mesh.delete_Point

    def x(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Point_x(self)


    def y(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Point_y(self)


    def z(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Point_z(self)


    def array(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Point_array(self)


    def __add__(self, p):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Point___add__(self, p)


    def __sub__(self, p):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Point___sub__(self, p)


    def __iadd__(self, p):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Point___iadd__(self, p)


    def __isub__(self, p):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Point___isub__(self, p)


    def __neg__(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Point___neg__(self)


    def __mul__(self, value):
        """self.__mul__(value) <==> self*value"""
        return _mesh.Point___mul__(self, value)
    __rmul__ = __mul__



    def __imul__(self, a):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Point___imul__(self, a)


    def __truediv__(self, value):
        """self.__truediv__(value) <==> self/value"""
        return _mesh.Point___truediv__(self, value)
    __div__ = __truediv__



    def __itruediv__(self, value):
        """self.__itruediv__(value) <==> self /= value"""
        return _mesh.Point___itruediv__(self, value)
    __idiv__ = __itruediv__



    def squared_distance(self, p):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Point_squared_distance(self, p)


    def distance(self, p):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Point_distance(self, p)


    def norm(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Point_norm(self)


    def squared_norm(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Point_squared_norm(self)


    def cross(self, p):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Point_cross(self, p)


    def dot(self, p):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Point_dot(self, p)


    def rotate(self, a, theta):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Point_rotate(self, a, theta)


    def str(self, verbose=False):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.Point_str(self, verbose)


    def __len__(self):
        return 3

    def __getitem__(self, i):
        "Get i-th coordinate. Only accept integer, or full slice."
        if i == slice(None):
            return self.array()
        else:
            return self._getitem(self._check_index(i))

    def __setitem__(self, i, value):
        "Set i-th coordinate. Only accept integer, or full slice."
        if i == slice(None):
            for j, v in enumerate(value):
                self[j] = v  # Range check in this call
        else:
            self._setitem(self._check_index(i), value)

    from numpy import uintp as _uintp

    def _check_index(self, i):
        "Check index is convertible to uintp and in range(2)"
        try:
            i = self._uintp(i)
        except TypeError:
            raise TypeError("Point indexing only supported for "
                            "integers and full slices")
        if i > 2:
            raise IndexError("Dimension of Point is always 3")
        return i

Point.x = new_instancemethod(_mesh.Point_x, None, Point)
Point.y = new_instancemethod(_mesh.Point_y, None, Point)
Point.z = new_instancemethod(_mesh.Point_z, None, Point)
Point.array = new_instancemethod(_mesh.Point_array, None, Point)
Point.__add__ = new_instancemethod(_mesh.Point___add__, None, Point)
Point.__sub__ = new_instancemethod(_mesh.Point___sub__, None, Point)
Point.__iadd__ = new_instancemethod(_mesh.Point___iadd__, None, Point)
Point.__isub__ = new_instancemethod(_mesh.Point___isub__, None, Point)
Point.__neg__ = new_instancemethod(_mesh.Point___neg__, None, Point)
Point.__imul__ = new_instancemethod(_mesh.Point___imul__, None, Point)
Point.squared_distance = new_instancemethod(_mesh.Point_squared_distance, None, Point)
Point.distance = new_instancemethod(_mesh.Point_distance, None, Point)
Point.norm = new_instancemethod(_mesh.Point_norm, None, Point)
Point.squared_norm = new_instancemethod(_mesh.Point_squared_norm, None, Point)
Point.cross = new_instancemethod(_mesh.Point_cross, None, Point)
Point.dot = new_instancemethod(_mesh.Point_dot, None, Point)
Point.rotate = new_instancemethod(_mesh.Point_rotate, None, Point)
Point.str = new_instancemethod(_mesh.Point_str, None, Point)
Point._getitem = new_instancemethod(_mesh.Point__getitem, None, Point)
Point._setitem = new_instancemethod(_mesh.Point__setitem, None, Point)
Point_swigregister = _mesh.Point_swigregister
Point_swigregister(Point)

class BoundingBoxTree(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.BoundingBoxTree_swiginit(self, _mesh.new_BoundingBoxTree())
    __swig_destroy__ = _mesh.delete_BoundingBoxTree

    def build(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.BoundingBoxTree_build(self, *args)


    def compute_collisions(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.BoundingBoxTree_compute_collisions(self, *args)


    def compute_process_collisions(self, point):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.BoundingBoxTree_compute_process_collisions(self, point)


    def compute_entity_collisions(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.BoundingBoxTree_compute_entity_collisions(self, *args)


    def compute_first_collision(self, point):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.BoundingBoxTree_compute_first_collision(self, point)


    def compute_first_entity_collision(self, point):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.BoundingBoxTree_compute_first_entity_collision(self, point)


    def compute_closest_entity(self, point):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.BoundingBoxTree_compute_closest_entity(self, point)


    def compute_closest_point(self, point):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.BoundingBoxTree_compute_closest_point(self, point)


    def collides(self, point):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.BoundingBoxTree_collides(self, point)


    def collides_entity(self, point):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.BoundingBoxTree_collides_entity(self, point)

BoundingBoxTree.build = new_instancemethod(_mesh.BoundingBoxTree_build, None, BoundingBoxTree)
BoundingBoxTree.compute_collisions = new_instancemethod(_mesh.BoundingBoxTree_compute_collisions, None, BoundingBoxTree)
BoundingBoxTree.compute_process_collisions = new_instancemethod(_mesh.BoundingBoxTree_compute_process_collisions, None, BoundingBoxTree)
BoundingBoxTree.compute_entity_collisions = new_instancemethod(_mesh.BoundingBoxTree_compute_entity_collisions, None, BoundingBoxTree)
BoundingBoxTree.compute_first_collision = new_instancemethod(_mesh.BoundingBoxTree_compute_first_collision, None, BoundingBoxTree)
BoundingBoxTree.compute_first_entity_collision = new_instancemethod(_mesh.BoundingBoxTree_compute_first_entity_collision, None, BoundingBoxTree)
BoundingBoxTree.compute_closest_entity = new_instancemethod(_mesh.BoundingBoxTree_compute_closest_entity, None, BoundingBoxTree)
BoundingBoxTree.compute_closest_point = new_instancemethod(_mesh.BoundingBoxTree_compute_closest_point, None, BoundingBoxTree)
BoundingBoxTree.collides = new_instancemethod(_mesh.BoundingBoxTree_collides, None, BoundingBoxTree)
BoundingBoxTree.collides_entity = new_instancemethod(_mesh.BoundingBoxTree_collides_entity, None, BoundingBoxTree)
BoundingBoxTree_swigregister = _mesh.BoundingBoxTree_swigregister
BoundingBoxTree_swigregister(BoundingBoxTree)

class GenericBoundingBoxTree(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mesh.delete_GenericBoundingBoxTree

    def create(dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.GenericBoundingBoxTree_create(dim)

    create = staticmethod(create)

    def build(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.GenericBoundingBoxTree_build(self, *args)


    def compute_collisions(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.GenericBoundingBoxTree_compute_collisions(self, *args)


    def compute_process_collisions(self, point):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.GenericBoundingBoxTree_compute_process_collisions(self, point)


    def compute_entity_collisions(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.GenericBoundingBoxTree_compute_entity_collisions(self, *args)


    def compute_first_collision(self, point):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.GenericBoundingBoxTree_compute_first_collision(self, point)


    def compute_first_entity_collision(self, point, mesh):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.GenericBoundingBoxTree_compute_first_entity_collision(self, point, mesh)


    def compute_closest_entity(self, point, mesh):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.GenericBoundingBoxTree_compute_closest_entity(self, point, mesh)


    def compute_closest_point(self, point):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.GenericBoundingBoxTree_compute_closest_point(self, point)


    def str(self, verbose=False):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.GenericBoundingBoxTree_str(self, verbose)

GenericBoundingBoxTree.build = new_instancemethod(_mesh.GenericBoundingBoxTree_build, None, GenericBoundingBoxTree)
GenericBoundingBoxTree.compute_collisions = new_instancemethod(_mesh.GenericBoundingBoxTree_compute_collisions, None, GenericBoundingBoxTree)
GenericBoundingBoxTree.compute_process_collisions = new_instancemethod(_mesh.GenericBoundingBoxTree_compute_process_collisions, None, GenericBoundingBoxTree)
GenericBoundingBoxTree.compute_entity_collisions = new_instancemethod(_mesh.GenericBoundingBoxTree_compute_entity_collisions, None, GenericBoundingBoxTree)
GenericBoundingBoxTree.compute_first_collision = new_instancemethod(_mesh.GenericBoundingBoxTree_compute_first_collision, None, GenericBoundingBoxTree)
GenericBoundingBoxTree.compute_first_entity_collision = new_instancemethod(_mesh.GenericBoundingBoxTree_compute_first_entity_collision, None, GenericBoundingBoxTree)
GenericBoundingBoxTree.compute_closest_entity = new_instancemethod(_mesh.GenericBoundingBoxTree_compute_closest_entity, None, GenericBoundingBoxTree)
GenericBoundingBoxTree.compute_closest_point = new_instancemethod(_mesh.GenericBoundingBoxTree_compute_closest_point, None, GenericBoundingBoxTree)
GenericBoundingBoxTree.str = new_instancemethod(_mesh.GenericBoundingBoxTree_str, None, GenericBoundingBoxTree)
GenericBoundingBoxTree_swigregister = _mesh.GenericBoundingBoxTree_swigregister
GenericBoundingBoxTree_swigregister(GenericBoundingBoxTree)

def GenericBoundingBoxTree_create(dim):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.GenericBoundingBoxTree_create(dim)

class BoundingBoxTree3D(GenericBoundingBoxTree):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mesh.delete_BoundingBoxTree3D
BoundingBoxTree3D_swigregister = _mesh.BoundingBoxTree3D_swigregister
BoundingBoxTree3D_swigregister(BoundingBoxTree3D)

class MeshPointIntersection(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, mesh, point):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _mesh.MeshPointIntersection_swiginit(self, _mesh.new_MeshPointIntersection(mesh, point))
    __swig_destroy__ = _mesh.delete_MeshPointIntersection

    def intersected_cells(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.MeshPointIntersection_intersected_cells(self)

MeshPointIntersection.intersected_cells = new_instancemethod(_mesh.MeshPointIntersection_intersected_cells, None, MeshPointIntersection)
MeshPointIntersection_swigregister = _mesh.MeshPointIntersection_swigregister
MeshPointIntersection_swigregister(MeshPointIntersection)


def intersect(mesh, point):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.intersect(mesh, point)

def refine(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.refine(*args)

def p_refine(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.p_refine(*args)
class GraphBuilder(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def local_graph(*args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.GraphBuilder_local_graph(*args)

    local_graph = staticmethod(local_graph)

    def __init__(self):
        _mesh.GraphBuilder_swiginit(self, _mesh.new_GraphBuilder())
    __swig_destroy__ = _mesh.delete_GraphBuilder
GraphBuilder_swigregister = _mesh.GraphBuilder_swigregister
GraphBuilder_swigregister(GraphBuilder)

def GraphBuilder_local_graph(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.GraphBuilder_local_graph(*args)

class BoostGraphOrdering(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def compute_cuthill_mckee(*args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.BoostGraphOrdering_compute_cuthill_mckee(*args)

    compute_cuthill_mckee = staticmethod(compute_cuthill_mckee)

    def __init__(self):
        _mesh.BoostGraphOrdering_swiginit(self, _mesh.new_BoostGraphOrdering())
    __swig_destroy__ = _mesh.delete_BoostGraphOrdering
BoostGraphOrdering_swigregister = _mesh.BoostGraphOrdering_swigregister
BoostGraphOrdering_swigregister(BoostGraphOrdering)

def BoostGraphOrdering_compute_cuthill_mckee(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.BoostGraphOrdering_compute_cuthill_mckee(*args)

class SCOTCH(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def compute_gps(graph, num_passes=5):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.SCOTCH_compute_gps(graph, num_passes)

    compute_gps = staticmethod(compute_gps)

    def compute_reordering(*args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _mesh.SCOTCH_compute_reordering(*args)

    compute_reordering = staticmethod(compute_reordering)

    def __init__(self):
        _mesh.SCOTCH_swiginit(self, _mesh.new_SCOTCH())
    __swig_destroy__ = _mesh.delete_SCOTCH
SCOTCH_swigregister = _mesh.SCOTCH_swigregister
SCOTCH_swigregister(SCOTCH)

def SCOTCH_compute_gps(graph, num_passes=5):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.SCOTCH_compute_gps(graph, num_passes)

def SCOTCH_compute_reordering(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _mesh.SCOTCH_compute_reordering(*args)

class Graph(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mesh.Graph_swiginit(self, _mesh.new_Graph())
    __swig_destroy__ = _mesh.delete_Graph
Graph_swigregister = _mesh.Graph_swigregister
Graph_swigregister(Graph)



