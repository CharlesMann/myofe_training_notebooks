# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _common.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_common')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_common')
    _common = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_common', [dirname(__file__)])
        except ImportError:
            import _common
            return _common
        try:
            _mod = imp.load_module('_common', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _common = swig_import_helper()
    del swig_import_helper
else:
    import _common
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _common.SHARED_PTR_DISOWN

def _attach_base_to_numpy_array(obj, owner):
    return _common._attach_base_to_numpy_array(obj, owner)
_attach_base_to_numpy_array = _common._attach_base_to_numpy_array

def dolfin_swigversion():
    return _common.dolfin_swigversion()
dolfin_swigversion = _common.dolfin_swigversion

def dolfin_pythonversion():
    return _common.dolfin_pythonversion()
dolfin_pythonversion = _common.dolfin_pythonversion

tmp = hex(dolfin_swigversion())
__swigversion__ = "%d.%d.%d"%(tuple(map(int, [tmp[-5], tmp[-3], tmp[-2:]])))
tmp = hex(dolfin_pythonversion())
__pythonversion__ = "%d.%d.%d"%(tuple(map(lambda x: int(x,16), [tmp[2], tmp[3:5], tmp[5:7]])))
del tmp, dolfin_pythonversion, dolfin_swigversion


def has_petsc4py():
    return _common.has_petsc4py()
has_petsc4py = _common.has_petsc4py

def has_slepc4py():
    return _common.has_slepc4py()
has_slepc4py = _common.has_slepc4py
UFC_VERSION_MAJOR = _common.UFC_VERSION_MAJOR
UFC_VERSION_MINOR = _common.UFC_VERSION_MINOR
UFC_VERSION_MAINTENANCE = _common.UFC_VERSION_MAINTENANCE
UFC_VERSION_RELEASE = _common.UFC_VERSION_RELEASE
ufc_shape_interval = _common.ufc_shape_interval
ufc_shape_triangle = _common.ufc_shape_triangle
ufc_shape_quadrilateral = _common.ufc_shape_quadrilateral
ufc_shape_tetrahedron = _common.ufc_shape_tetrahedron
ufc_shape_hexahedron = _common.ufc_shape_hexahedron
class ufc_cell(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ufc_cell
    cell_shape = _swig_property(_common.ufc_cell_cell_shape_get, _common.ufc_cell_cell_shape_set)
    topological_dimension = _swig_property(_common.ufc_cell_topological_dimension_get, _common.ufc_cell_topological_dimension_set)
    geometric_dimension = _swig_property(_common.ufc_cell_geometric_dimension_get, _common.ufc_cell_geometric_dimension_set)
    index = _swig_property(_common.ufc_cell_index_get, _common.ufc_cell_index_set)
    local_facet = _swig_property(_common.ufc_cell_local_facet_get, _common.ufc_cell_local_facet_set)
    mesh_identifier = _swig_property(_common.ufc_cell_mesh_identifier_get, _common.ufc_cell_mesh_identifier_set)
ufc_cell_swigregister = _common.ufc_cell_swigregister
ufc_cell_swigregister(ufc_cell)
cvar = _common.cvar
UFC_VERSION = cvar.UFC_VERSION

class ufc_function(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ufc_function
ufc_function_swigregister = _common.ufc_function_swigregister
ufc_function_swigregister(ufc_function)

class ufc_finite_element(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ufc_finite_element
ufc_finite_element_swigregister = _common.ufc_finite_element_swigregister
ufc_finite_element_swigregister(ufc_finite_element)

class ufc_dofmap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ufc_dofmap
ufc_dofmap_swigregister = _common.ufc_dofmap_swigregister
ufc_dofmap_swigregister(ufc_dofmap)

class ufc_coordinate_mapping(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ufc_coordinate_mapping
ufc_coordinate_mapping_swigregister = _common.ufc_coordinate_mapping_swigregister
ufc_coordinate_mapping_swigregister(ufc_coordinate_mapping)

class ufc_form(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ufc_form
ufc_form_swigregister = _common.ufc_form_swigregister
ufc_form_swigregister(ufc_form)


def make_ufc_finite_element(*args):
    return _common.make_ufc_finite_element(*args)
make_ufc_finite_element = _common.make_ufc_finite_element

def make_ufc_dofmap(*args):
    return _common.make_ufc_dofmap(*args)
make_ufc_dofmap = _common.make_ufc_dofmap

def make_ufc_coordinate_mapping(*args):
    return _common.make_ufc_coordinate_mapping(*args)
make_ufc_coordinate_mapping = _common.make_ufc_coordinate_mapping

def make_ufc_form(*args):
    return _common.make_ufc_form(*args)
make_ufc_form = _common.make_ufc_form

def init(argc, argv):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.init(argc, argv)

def dolfin_version():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.dolfin_version()

def ufc_signature():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.ufc_signature()

def git_commit_hash():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.git_commit_hash()

def sizeof_la_index():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.sizeof_la_index()

def has_debug():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.has_debug()

def has_openmp():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.has_openmp()

def has_mpi():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.has_mpi()

def has_petsc():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.has_petsc()

def has_slepc():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.has_slepc()

def has_scotch():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.has_scotch()

def has_umfpack():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.has_umfpack()

def has_cholmod():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.has_cholmod()

def has_parmetis():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.has_parmetis()

def has_zlib():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.has_zlib()

def has_hdf5():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.has_hdf5()

def has_hdf5_parallel():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.has_hdf5_parallel()

def has_vtk():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.has_vtk()
DOLFIN_VERSION_RELEASE = _common.DOLFIN_VERSION_RELEASE
DOLFIN_VERSION_MAJOR = _common.DOLFIN_VERSION_MAJOR
DOLFIN_VERSION_MINOR = _common.DOLFIN_VERSION_MINOR
DOLFIN_VERSION_MICRO = _common.DOLFIN_VERSION_MICRO
DOLFIN_VERSION_STRING = _common.DOLFIN_VERSION_STRING
DOLFIN_VERSION_GIT = _common.DOLFIN_VERSION_GIT
UFC_SIGNATURE = _common.UFC_SIGNATURE
DOLFIN_EPS = _common.DOLFIN_EPS
DOLFIN_EPS_LARGE = _common.DOLFIN_EPS_LARGE
DOLFIN_SQRT_EPS = _common.DOLFIN_SQRT_EPS
DOLFIN_PI = _common.DOLFIN_PI
FENICS_EPS = _common.FENICS_EPS
FENICS_EPS_LARGE = _common.FENICS_EPS_LARGE
FENICS_SQRT_EPS = _common.FENICS_SQRT_EPS
FENICS_PI = _common.FENICS_PI
DOLFIN_LINELENGTH = _common.DOLFIN_LINELENGTH
DOLFIN_TERM_WIDTH = _common.DOLFIN_TERM_WIDTH
TimingClear_keep = _common.TimingClear_keep
TimingClear_clear = _common.TimingClear_clear
TimingType_wall = _common.TimingType_wall
TimingType_user = _common.TimingType_user
TimingType_system = _common.TimingType_system

def tic():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.tic()

def toc():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.toc()

def time():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.time()

def timings(clear, type):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.timings(clear, type)

def list_timings(clear, type):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.list_timings(clear, type)

def dump_timings_to_xml(filename, clear):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.dump_timings_to_xml(filename, clear)

def timing(task, clear):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.timing(task, clear)
class IndexSet(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, size):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _common.IndexSet_swiginit(self, _common.new_IndexSet(size))
    __swig_destroy__ = _common.delete_IndexSet

    def empty(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.IndexSet_empty(self)


    def size(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.IndexSet_size(self)


    def has_index(self, index):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.IndexSet_has_index(self, index)


    def find(self, index):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.IndexSet_find(self, index)


    def insert(self, index):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.IndexSet_insert(self, index)


    def fill(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.IndexSet_fill(self)


    def clear(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.IndexSet_clear(self)

IndexSet.empty = new_instancemethod(_common.IndexSet_empty, None, IndexSet)
IndexSet.size = new_instancemethod(_common.IndexSet_size, None, IndexSet)
IndexSet.has_index = new_instancemethod(_common.IndexSet_has_index, None, IndexSet)
IndexSet.find = new_instancemethod(_common.IndexSet_find, None, IndexSet)
IndexSet.insert = new_instancemethod(_common.IndexSet_insert, None, IndexSet)
IndexSet.fill = new_instancemethod(_common.IndexSet_fill, None, IndexSet)
IndexSet.clear = new_instancemethod(_common.IndexSet_clear, None, IndexSet)
IndexSet_swigregister = _common.IndexSet_swigregister
IndexSet_swigregister(IndexSet)

class Timer(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _common.Timer_swiginit(self, _common.new_Timer(*args))
    __swig_destroy__ = _common.delete_Timer

    def start(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Timer_start(self)


    def resume(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Timer_resume(self)


    def stop(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Timer_stop(self)


    def elapsed(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Timer_elapsed(self)

Timer.start = new_instancemethod(_common.Timer_start, None, Timer)
Timer.resume = new_instancemethod(_common.Timer_resume, None, Timer)
Timer.stop = new_instancemethod(_common.Timer_stop, None, Timer)
Timer.elapsed = new_instancemethod(_common.Timer_elapsed, None, Timer)
Timer_swigregister = _common.Timer_swigregister
Timer_swigregister(Timer)

class Variable(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _common.Variable_swiginit(self, _common.new_Variable(*args))
    __swig_destroy__ = _common.delete_Variable

    def rename(self, name, label):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Variable_rename(self, name, label)


    def name(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Variable_name(self)


    def label(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Variable_label(self)


    def id(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Variable_id(self)


    def str(self, verbose):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Variable_str(self, verbose)

    parameters = _swig_property(_common.Variable_parameters_get, _common.Variable_parameters_set)

    def __str__(self):
        """Missing docstring"""
        return _common.Variable___str__(self)

Variable.rename = new_instancemethod(_common.Variable_rename, None, Variable)
Variable.name = new_instancemethod(_common.Variable_name, None, Variable)
Variable.label = new_instancemethod(_common.Variable_label, None, Variable)
Variable.id = new_instancemethod(_common.Variable_id, None, Variable)
Variable.str = new_instancemethod(_common.Variable_str, None, Variable)
Variable.__str__ = new_instancemethod(_common.Variable___str__, None, Variable)
Variable_swigregister = _common.Variable_swigregister
Variable_swigregister(Variable)

MPICH_IGNORE_CXX_SEEK = _common.MPICH_IGNORE_CXX_SEEK
class MPIInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.MPIInfo_swiginit(self, _common.new_MPIInfo())
    __swig_destroy__ = _common.delete_MPIInfo
MPIInfo.__ref__ = new_instancemethod(_common.MPIInfo___ref__, None, MPIInfo)
MPIInfo_swigregister = _common.MPIInfo_swigregister
MPIInfo_swigregister(MPIInfo)

class MPI(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def rank(comm):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.MPI_rank(comm)

    rank = staticmethod(rank)

    def size(comm):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.MPI_size(comm)

    size = staticmethod(size)

    def is_broadcaster(comm):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.MPI_is_broadcaster(comm)

    is_broadcaster = staticmethod(is_broadcaster)

    def is_receiver(comm):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.MPI_is_receiver(comm)

    is_receiver = staticmethod(is_receiver)

    def barrier(comm):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.MPI_barrier(comm)

    barrier = staticmethod(barrier)

    def gather(comm, in_values, out_values, receiving_process=0):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.MPI_gather(comm, in_values, out_values, receiving_process)

    gather = staticmethod(gather)

    def global_offset(comm, range, exclusive):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.MPI_global_offset(comm, range, exclusive)

    global_offset = staticmethod(global_offset)

    def local_range(*args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.MPI_local_range(*args)

    local_range = staticmethod(local_range)

    def compute_local_range(process, N, size):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.MPI_compute_local_range(process, N, size)

    compute_local_range = staticmethod(compute_local_range)

    def index_owner(comm, index, N):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.MPI_index_owner(comm, index, N)

    index_owner = staticmethod(index_owner)

    def MPI_AVG():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.MPI_MPI_AVG()

    MPI_AVG = staticmethod(MPI_AVG)

    def max(*args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.MPI_max(*args)

    max = staticmethod(max)

    def min(*args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.MPI_min(*args)

    min = staticmethod(min)

    def sum(*args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.MPI_sum(*args)

    sum = staticmethod(sum)

    def avg(comm, value):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.MPI_avg(comm, value)

    avg = staticmethod(avg)

    def __init__(self):
        _common.MPI_swiginit(self, _common.new_MPI())
    __swig_destroy__ = _common.delete_MPI
MPI_swigregister = _common.MPI_swigregister
MPI_swigregister(MPI)

def MPI_rank(comm):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.MPI_rank(comm)

def MPI_size(comm):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.MPI_size(comm)

def MPI_is_broadcaster(comm):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.MPI_is_broadcaster(comm)

def MPI_is_receiver(comm):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.MPI_is_receiver(comm)

def MPI_barrier(comm):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.MPI_barrier(comm)

def MPI_gather(comm, in_values, out_values, receiving_process=0):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.MPI_gather(comm, in_values, out_values, receiving_process)

def MPI_global_offset(comm, range, exclusive):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.MPI_global_offset(comm, range, exclusive)

def MPI_local_range(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.MPI_local_range(*args)

def MPI_compute_local_range(process, N, size):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.MPI_compute_local_range(process, N, size)

def MPI_index_owner(comm, index, N):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.MPI_index_owner(comm, index, N)

def MPI_MPI_AVG():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.MPI_MPI_AVG()

def MPI_max(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.MPI_max(*args)

def MPI_min(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.MPI_min(*args)

def MPI_sum(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.MPI_sum(*args)

def MPI_avg(comm, value):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.MPI_avg(comm, value)

class SubSystemsManager(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def singleton():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.SubSystemsManager_singleton()

    singleton = staticmethod(singleton)

    def init_mpi(*args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.SubSystemsManager_init_mpi(*args)

    init_mpi = staticmethod(init_mpi)

    def init_petsc(*args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.SubSystemsManager_init_petsc(*args)

    init_petsc = staticmethod(init_petsc)

    def finalize():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.SubSystemsManager_finalize()

    finalize = staticmethod(finalize)

    def responsible_mpi():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.SubSystemsManager_responsible_mpi()

    responsible_mpi = staticmethod(responsible_mpi)

    def responsible_petsc():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.SubSystemsManager_responsible_petsc()

    responsible_petsc = staticmethod(responsible_petsc)

    def mpi_initialized():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.SubSystemsManager_mpi_initialized()

    mpi_initialized = staticmethod(mpi_initialized)

    def mpi_finalized():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.SubSystemsManager_mpi_finalized()

    mpi_finalized = staticmethod(mpi_finalized)
    petsc_err_msg = _swig_property(_common.SubSystemsManager_petsc_err_msg_get, _common.SubSystemsManager_petsc_err_msg_set)
SubSystemsManager_swigregister = _common.SubSystemsManager_swigregister
SubSystemsManager_swigregister(SubSystemsManager)

def SubSystemsManager_singleton():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.SubSystemsManager_singleton()

def SubSystemsManager_init_mpi(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.SubSystemsManager_init_mpi(*args)

def SubSystemsManager_init_petsc(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.SubSystemsManager_init_petsc(*args)

def SubSystemsManager_finalize():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.SubSystemsManager_finalize()

def SubSystemsManager_responsible_mpi():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.SubSystemsManager_responsible_mpi()

def SubSystemsManager_responsible_petsc():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.SubSystemsManager_responsible_petsc()

def SubSystemsManager_mpi_initialized():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.SubSystemsManager_mpi_initialized()

def SubSystemsManager_mpi_finalized():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.SubSystemsManager_mpi_finalized()

class MPI_Comm(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.MPI_Comm_swiginit(self, _common.new_MPI_Comm())
    __swig_destroy__ = _common.delete_MPI_Comm
MPI_Comm_swigregister = _common.MPI_Comm_swigregister
MPI_Comm_swigregister(MPI_Comm)


def mpi_comm_world():
    return _common.mpi_comm_world()
mpi_comm_world = _common.mpi_comm_world

def mpi_comm_self():
    return _common.mpi_comm_self()
mpi_comm_self = _common.mpi_comm_self

def dolfin_terminate():
    return _common.dolfin_terminate()
dolfin_terminate = _common.dolfin_terminate

# Install C++ terminate handler into Python (if not interactive)
# This ensures that std::abort (which is likely to be appropriately
# interpreted by MPI implementations) is called by sys.excepthook thus
# avoiding parallel deadlocks when one process raises
import sys
def _is_interactive():
    return hasattr(sys, "ps1") or sys.flags.interactive
if not _is_interactive():
    def _new_excepthook(*args):
        import sys
        sys.__excepthook__(*args)
        sys.stdout.flush()
        sys.stderr.flush()
        dolfin_terminate()
    sys.excepthook = _new_excepthook
    del _new_excepthook
del _is_interactive, sys

class DoubleArray(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _common.DoubleArray_swiginit(self, _common.new_DoubleArray(*args))
    __swig_destroy__ = _common.delete_DoubleArray

    def str(self, verbose):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.DoubleArray_str(self, verbose)


    def size(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.DoubleArray_size(self)


    def data(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.DoubleArray_data(self, *args)


    def array(self):
        """
        Return a NumPy array view of object
        """
        data = self._array()
        _attach_base_to_numpy_array(data, self)
        return data

    def __getitem__(self, index):
        if not isinstance(index, int):
            raise TypeError("expected an int as index argument")
        while index < 0:
            index += self.size()
        if index >= self.size():
            raise IndexError("index out of range")
        return self._getitem(index)

    def __setitem__(self, index, value):
        if not isinstance(index, int):
            raise TypeError("expected an int as index argument")
        while index < 0:
            index += self.size()
        if index >= self.size():
            raise IndexError("index out of range")
        self._setitem(index, value)

    def __len__(self):
        return self.size()

DoubleArray.str = new_instancemethod(_common.DoubleArray_str, None, DoubleArray)
DoubleArray.size = new_instancemethod(_common.DoubleArray_size, None, DoubleArray)
DoubleArray.data = new_instancemethod(_common.DoubleArray_data, None, DoubleArray)
DoubleArray._getitem = new_instancemethod(_common.DoubleArray__getitem, None, DoubleArray)
DoubleArray._setitem = new_instancemethod(_common.DoubleArray__setitem, None, DoubleArray)
DoubleArray._array = new_instancemethod(_common.DoubleArray__array, None, DoubleArray)
DoubleArray_swigregister = _common.DoubleArray_swigregister
DoubleArray_swigregister(DoubleArray)

class UIntArray(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _common.UIntArray_swiginit(self, _common.new_UIntArray(*args))
    __swig_destroy__ = _common.delete_UIntArray

    def str(self, verbose):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.UIntArray_str(self, verbose)


    def size(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.UIntArray_size(self)


    def data(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.UIntArray_data(self, *args)


    def array(self):
        """
        Return a NumPy array view of object
        """
        data = self._array()
        _attach_base_to_numpy_array(data, self)
        return data

    def __getitem__(self, index):
        if not isinstance(index, int):
            raise TypeError("expected an int as index argument")
        while index < 0:
            index += self.size()
        if index >= self.size():
            raise IndexError("index out of range")
        return self._getitem(index)

    def __setitem__(self, index, value):
        if not isinstance(index, int):
            raise TypeError("expected an int as index argument")
        while index < 0:
            index += self.size()
        if index >= self.size():
            raise IndexError("index out of range")
        self._setitem(index, value)

    def __len__(self):
        return self.size()

UIntArray.str = new_instancemethod(_common.UIntArray_str, None, UIntArray)
UIntArray.size = new_instancemethod(_common.UIntArray_size, None, UIntArray)
UIntArray.data = new_instancemethod(_common.UIntArray_data, None, UIntArray)
UIntArray._getitem = new_instancemethod(_common.UIntArray__getitem, None, UIntArray)
UIntArray._setitem = new_instancemethod(_common.UIntArray__setitem, None, UIntArray)
UIntArray._array = new_instancemethod(_common.UIntArray__array, None, UIntArray)
UIntArray_swigregister = _common.UIntArray_swigregister
UIntArray_swigregister(UIntArray)

class IntArray(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _common.IntArray_swiginit(self, _common.new_IntArray(*args))
    __swig_destroy__ = _common.delete_IntArray

    def str(self, verbose):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.IntArray_str(self, verbose)


    def size(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.IntArray_size(self)


    def data(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.IntArray_data(self, *args)


    def array(self):
        """
        Return a NumPy array view of object
        """
        data = self._array()
        _attach_base_to_numpy_array(data, self)
        return data

    def __getitem__(self, index):
        if not isinstance(index, int):
            raise TypeError("expected an int as index argument")
        while index < 0:
            index += self.size()
        if index >= self.size():
            raise IndexError("index out of range")
        return self._getitem(index)

    def __setitem__(self, index, value):
        if not isinstance(index, int):
            raise TypeError("expected an int as index argument")
        while index < 0:
            index += self.size()
        if index >= self.size():
            raise IndexError("index out of range")
        self._setitem(index, value)

    def __len__(self):
        return self.size()

IntArray.str = new_instancemethod(_common.IntArray_str, None, IntArray)
IntArray.size = new_instancemethod(_common.IntArray_size, None, IntArray)
IntArray.data = new_instancemethod(_common.IntArray_data, None, IntArray)
IntArray._getitem = new_instancemethod(_common.IntArray__getitem, None, IntArray)
IntArray._setitem = new_instancemethod(_common.IntArray__setitem, None, IntArray)
IntArray._array = new_instancemethod(_common.IntArray__array, None, IntArray)
IntArray_swigregister = _common.IntArray_swigregister
IntArray_swigregister(IntArray)

class ParameterValue(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ParameterValue

    def key(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue_key(self)


    def description(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue_description(self)


    def is_set(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue_is_set(self)


    def reset(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue_reset(self)


    def access_count(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue_access_count(self)


    def change_count(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue_change_count(self)


    def set_range(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue_set_range(self, *args)


    def _get_int_range(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue__get_int_range(self)


    def _get_double_range(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue__get_double_range(self)


    def _get_string_range(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue__get_string_range(self)


    def _assign(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue__assign(self, *args)


    def _assign_bool(self, value):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue__assign_bool(self, value)


    def __int__(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue___int__(self)


    def __float__(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue___float__(self)


    def __str__(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue___str__(self)


    def __nonzero__(self):
        return _common.ParameterValue___nonzero__(self)
    __bool__ = __nonzero__



    def type_str(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue_type_str(self)


    def value_str(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue_value_str(self)


    def range_str(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue_range_str(self)


    def str(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue_str(self)


    def check_key(key):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.ParameterValue_check_key(key)

    check_key = staticmethod(check_key)

    def warn_once(self, msg):
        cls = self.__class__
        if not hasattr(cls, '_warned'):
            cls._warned = set()
        if not msg in cls._warned:
            cls._warned.add(msg)
            print(msg)

    def value(self):
        if not self.is_set():
            return None
        val_type = self.type_str()
        if val_type == "string":
            return str(self)
        elif  val_type == "int":
            return int(self)
        elif val_type == "bool":
            return bool(self)
        elif val_type == "double":
            return float(self)
        else:
            raise TypeError("unknown value type '%s' of parameter '%s'"%(val_type, self.key()))

    def get_range(self):
        val_type = self.type_str()
        if val_type == "string":
            local_range = self._get_string_range()
            if len(local_range) == 0:
                return
            return local_range
        elif  val_type == "int":
            local_range = self._get_int_range()
            if local_range[0] == 0 and local_range[0] == local_range[0]:
                return
            return local_range
        elif val_type == "bool":
            return
        elif val_type == "double":
            from logging import DEBUG
            local_range = self._get_double_range()
            if local_range[0] == 0 and local_range[0] == local_range[0]:
                return
            return local_range
        else:
            raise TypeError("unknown value type '%s' of parameter '%s'"%(val_type, self.key()))

    def data(self):
        return self.value(), self.get_range(), self.access_count(), self.change_count()

ParameterValue.key = new_instancemethod(_common.ParameterValue_key, None, ParameterValue)
ParameterValue.description = new_instancemethod(_common.ParameterValue_description, None, ParameterValue)
ParameterValue.is_set = new_instancemethod(_common.ParameterValue_is_set, None, ParameterValue)
ParameterValue.reset = new_instancemethod(_common.ParameterValue_reset, None, ParameterValue)
ParameterValue.access_count = new_instancemethod(_common.ParameterValue_access_count, None, ParameterValue)
ParameterValue.change_count = new_instancemethod(_common.ParameterValue_change_count, None, ParameterValue)
ParameterValue.set_range = new_instancemethod(_common.ParameterValue_set_range, None, ParameterValue)
ParameterValue._get_int_range = new_instancemethod(_common.ParameterValue__get_int_range, None, ParameterValue)
ParameterValue._get_double_range = new_instancemethod(_common.ParameterValue__get_double_range, None, ParameterValue)
ParameterValue._get_string_range = new_instancemethod(_common.ParameterValue__get_string_range, None, ParameterValue)
ParameterValue._assign = new_instancemethod(_common.ParameterValue__assign, None, ParameterValue)
ParameterValue._assign_bool = new_instancemethod(_common.ParameterValue__assign_bool, None, ParameterValue)
ParameterValue.__int__ = new_instancemethod(_common.ParameterValue___int__, None, ParameterValue)
ParameterValue.__float__ = new_instancemethod(_common.ParameterValue___float__, None, ParameterValue)
ParameterValue.__str__ = new_instancemethod(_common.ParameterValue___str__, None, ParameterValue)
ParameterValue.type_str = new_instancemethod(_common.ParameterValue_type_str, None, ParameterValue)
ParameterValue.value_str = new_instancemethod(_common.ParameterValue_value_str, None, ParameterValue)
ParameterValue.range_str = new_instancemethod(_common.ParameterValue_range_str, None, ParameterValue)
ParameterValue.str = new_instancemethod(_common.ParameterValue_str, None, ParameterValue)
ParameterValue_swigregister = _common.ParameterValue_swigregister
ParameterValue_swigregister(ParameterValue)

def ParameterValue_check_key(key):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.ParameterValue_check_key(key)

class IntParameter(ParameterValue):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _common.IntParameter_swiginit(self, _common.new_IntParameter(*args))
    __swig_destroy__ = _common.delete_IntParameter

    def _assign(self, value):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.IntParameter__assign(self, value)

IntParameter._assign = new_instancemethod(_common.IntParameter__assign, None, IntParameter)
IntParameter_swigregister = _common.IntParameter_swigregister
IntParameter_swigregister(IntParameter)

class DoubleParameter(ParameterValue):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _common.DoubleParameter_swiginit(self, _common.new_DoubleParameter(*args))
    __swig_destroy__ = _common.delete_DoubleParameter

    def _assign(self, value):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.DoubleParameter__assign(self, value)

DoubleParameter._assign = new_instancemethod(_common.DoubleParameter__assign, None, DoubleParameter)
DoubleParameter_swigregister = _common.DoubleParameter_swigregister
DoubleParameter_swigregister(DoubleParameter)

class StringParameter(ParameterValue):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _common.StringParameter_swiginit(self, _common.new_StringParameter(*args))
    __swig_destroy__ = _common.delete_StringParameter

    def _assign(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.StringParameter__assign(self, *args)

StringParameter._assign = new_instancemethod(_common.StringParameter__assign, None, StringParameter)
StringParameter_swigregister = _common.StringParameter_swigregister
StringParameter_swigregister(StringParameter)

class BoolParameter(ParameterValue):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _common.BoolParameter_swiginit(self, _common.new_BoolParameter(*args))
    __swig_destroy__ = _common.delete_BoolParameter

    def _assign_bool(self, value):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.BoolParameter__assign_bool(self, value)

BoolParameter._assign_bool = new_instancemethod(_common.BoolParameter__assign_bool, None, BoolParameter)
BoolParameter_swigregister = _common.BoolParameter_swigregister
BoolParameter_swigregister(BoolParameter)

class Parameters(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_Parameters

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _common.Parameters_swiginit(self, _common.new_Parameters(*args))

    def name(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Parameters_name(self)


    def rename(self, key):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Parameters_rename(self, key)


    def clear(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Parameters_clear(self)


    def _add_bool(self, key, value):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Parameters__add_bool(self, key, value)


    def _add(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Parameters__add(self, *args)


    def remove(self, key):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Parameters_remove(self, key)


    def _get_parameter(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Parameters__get_parameter(self, *args)


    def assign(self, parameters):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Parameters_assign(self, parameters)


    def has_key(self, key):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Parameters_has_key(self, key)


    def has_parameter(self, key):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Parameters_has_parameter(self, key)


    def has_parameter_set(self, key):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Parameters_has_parameter_set(self, key)


    def _get_parameter_keys(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Parameters__get_parameter_keys(self)


    def _get_parameter_set_keys(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Parameters__get_parameter_set_keys(self)


    def str(self, verbose):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Parameters_str(self, verbose)


    def find_parameter(self, key):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Parameters_find_parameter(self, key)


    def find_parameter_set(self, key):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Parameters_find_parameter_set(self, key)


    def _parse(self, op):
        """Missing docstring"""
        return _common.Parameters__parse(self, op)



    def add(self,*args):
        """Add a parameter to the parameter set"""
        if len(args) == 2 and isinstance(args[1],bool):
            self._add_bool(*args)
        else:
            self._add(*args)

    def parse(self,argv=None):
        "Parse command line arguments"
        if argv is None:
            import sys
            argv = sys.argv
        self._parse(argv)

    def keys(self):
        "Returns a list of the parameter keys"
        ret = self._get_parameter_keys()
        ret += self._get_parameter_set_keys()
        return ret

    def iterkeys(self):
        "Returns an iterator for the parameter keys"
        for key in self.keys():
            yield key

    def __iter__(self):
        return self.iterkeys()

    def values(self):
        "Returns a list of the parameter values"
        return [self[key] for key in self.keys()]

    def itervalues(self):
        "Returns an iterator to the parameter values"
        return (self[key] for key in self.keys())

    def items(self):
        return zip(self.keys(),self.values())

    def iteritems(self):
        "Returns an iterator over the (key, value) items of the Parameters"
        return iter(self.items())

    def set_range(self, key, *arg):
        "Set the range for the given parameter"
        if key not in self._get_parameter_keys():
            raise KeyError("no parameter with name '%s'"%key)
        self._get_parameter(key).set_range(*arg)

    def get_range(self, key):
        "Get the range for the given parameter"
        if key not in self._get_parameter_keys():
            raise KeyError("no parameter with name '%s'"%key)
        return self._get_parameter(key).get_range()

    def __getitem__(self, key):
        "Return the parameter corresponding to the given key"
        if key in self._get_parameter_keys():
            return self._get_parameter(key).value()

        if key in self._get_parameter_set_keys():
            return self._get_parameter_set(key)

        raise KeyError("'%s'"%key)

    def __setitem__(self, key, value):
        "Set the parameter 'key', with given 'value'"
        if (key == "this") and type(value).__name__ == 'SwigPyObject':
            self.__dict__[key] = value
            return
        if key not in self._get_parameter_keys():
            raise KeyError("'%s' is not a parameter"%key)
        from six import string_types
        if not isinstance(value, string_types + (int,float,bool)) and (value is not None):
            raise TypeError("can only set 'int', 'bool', 'float' and 'str' for parameter %s" %key)
        par = self._get_parameter(key)
        if isinstance(value,bool):
            par._assign_bool(value)
        elif value is None:
            par.reset()
        else:
            par._assign(value)

    def update(self, other):
        "A recursive update that handles parameter subsets correctly."
        if not isinstance(other,(Parameters, dict)):
            raise TypeError("expected a 'dict' or a '%s'"%Parameters.__name__)
        for key, other_value in other.items():
    # Check is self[key] is a Parameter or a parameter set (Parameters)
            if self.has_parameter_set(key):
                self_value  = self[key]
                self_value.update(other_value)
            else:
                self.__setitem__(key, other_value)


    def to_dict(self):
        """Convert the Parameters to a dict"""
        ret = {}
        for key, value in self.items():
            if isinstance(value, Parameters):
                ret[key] = value.to_dict()
            else:
                ret[key] = value
        return ret

    def copy(self):
        "Return a copy of it self"
        return Parameters(self)

    def option_string(self):
        "Return an option string representation of the Parameters"
        def option_list(parent,basename):
            ret_list = []
            for key, value in parent.items():
                if isinstance(value, Parameters):
                    ret_list.extend(option_list(value,basename + key + '.'))
                else:
                    ret_list.append(basename + key + " " + str(value))
            return ret_list

        return " ".join(option_list(self,"--"))

    def __str__(self):
        "p.__str__() <==> str(x)"
        return self.str(False)

    def __getattr__(self, key):
    # Check that there is still SWIG proxy available; otherwise
    # implementation below may end up in infinite recursion
        try:
            self.__dict__["this"]
        except KeyError:
            raise AttributeError("SWIG proxy 'this' defunct on 'Parameters' object")

    # Make sure KeyError is reraised as AttributeError
        try:
            return self.__getitem__(key)
        except KeyError as e:
            raise AttributeError("'Parameters' object has no attribute '%s'" % e.message)

    __getattr__.__doc__ = __getitem__.__doc__

    def __setattr__(self, key, value):
    # Make sure KeyError is reraised as AttributeError
        try:
            return self.__setitem__(key, value)
        except KeyError as e:
            raise AttributeError("'Parameters' object has no attribute '%s'" % e.message)

    __setattr__.__doc__ = __setitem__.__doc__

    def iterdata(self):
        """Returns an iterator of a tuple of a parameter key together with its value"""
        for key in self.iterkeys():
            yield key, self.get(key)

    def get(self, key):
        """Return all data available for a certain parameter

        The data is returned in a tuple:
        value, range, access_count, change_count = parameters.get('name')
        """
        if key in self._get_parameter_keys():
            return self._get_parameter(key).data()

        if key in self._get_parameter_set_keys():
            return self._get_parameter_set(key)

        raise KeyError("'%s'"%key)


Parameters.name = new_instancemethod(_common.Parameters_name, None, Parameters)
Parameters.rename = new_instancemethod(_common.Parameters_rename, None, Parameters)
Parameters.clear = new_instancemethod(_common.Parameters_clear, None, Parameters)
Parameters._add_bool = new_instancemethod(_common.Parameters__add_bool, None, Parameters)
Parameters._add = new_instancemethod(_common.Parameters__add, None, Parameters)
Parameters.remove = new_instancemethod(_common.Parameters_remove, None, Parameters)
Parameters._get_parameter = new_instancemethod(_common.Parameters__get_parameter, None, Parameters)
Parameters._get_parameter_set = new_instancemethod(_common.Parameters__get_parameter_set, None, Parameters)
Parameters.assign = new_instancemethod(_common.Parameters_assign, None, Parameters)
Parameters.has_key = new_instancemethod(_common.Parameters_has_key, None, Parameters)
Parameters.has_parameter = new_instancemethod(_common.Parameters_has_parameter, None, Parameters)
Parameters.has_parameter_set = new_instancemethod(_common.Parameters_has_parameter_set, None, Parameters)
Parameters._get_parameter_keys = new_instancemethod(_common.Parameters__get_parameter_keys, None, Parameters)
Parameters._get_parameter_set_keys = new_instancemethod(_common.Parameters__get_parameter_set_keys, None, Parameters)
Parameters.str = new_instancemethod(_common.Parameters_str, None, Parameters)
Parameters.find_parameter = new_instancemethod(_common.Parameters_find_parameter, None, Parameters)
Parameters.find_parameter_set = new_instancemethod(_common.Parameters_find_parameter_set, None, Parameters)
Parameters._parse = new_instancemethod(_common.Parameters__parse, None, Parameters)
Parameters_swigregister = _common.Parameters_swigregister
Parameters_swigregister(Parameters)

class GlobalParameters(Parameters):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _common.GlobalParameters_swiginit(self, _common.new_GlobalParameters())
    __swig_destroy__ = _common.delete_GlobalParameters

    def default_parameters():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.GlobalParameters_default_parameters()

    default_parameters = staticmethod(default_parameters)
GlobalParameters_swigregister = _common.GlobalParameters_swigregister
GlobalParameters_swigregister(GlobalParameters)

def GlobalParameters_default_parameters():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.GlobalParameters_default_parameters()


old_init = Parameters.__init__
def __new_Parameter_init__(self,*args,**kwargs):
    """Initialize Parameters

    Usage:

    Parameters()
       create empty parameter set

    Parameters(name)
       create empty parameter set with given name

    Parameters(other_parameters)
       create copy of parameter set

    Parameters(name, dim=3, tol=0.1, foo="Foo")
       create parameter set with given parameters

    Parameters(name, dim=(3, 0, 4), foo=("Foo", ["Foo", "Bar"])
       create parameter set with given parameters and ranges
    """
    from six import string_types
    from numpy import isscalar

    if len(args) == 0:
        old_init(self, "parameters")
    elif len(args) == 1 and isinstance(args[0], string_types + (type(self),)):
        old_init(self, args[0])
    else:
        raise TypeError("expected a single optional argument of type 'str' or ''"%type(self).__name__)
    if len(kwargs) == 0:
        return

    for key, value in kwargs.items():
        if isinstance(value,type(self)):
            self.add(value)
        elif isinstance(value,tuple):
            if isscalar(value[0]) and len(value) == 3:
                self.add(key, *value)
            elif isinstance(value[0], string_types) and len(value) == 2:
                if not isinstance(value[1], list):
                    raise TypeError("expected a list as second item of tuple, when first is a 'str'")
                self.add(key, *value)
            else:
                raise TypeError("expected a range tuple of size 2 for 'str' values and 3 for scalars")
        else:
            self.add(key,value)

Parameters.__init__ = __new_Parameter_init__



def get_global_parameters():
    return _common.get_global_parameters()
get_global_parameters = _common.get_global_parameters

def _info(msg):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common._info(msg)

def info_stream(out, msg):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.info_stream(out, msg)

def info_underline(msg):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.info_underline(msg)

def warning(msg):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.warning(msg)

def error(msg):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.error(msg)

def dolfin_error(location, task, reason):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.dolfin_error(location, task, reason)

def deprecation(feature, version_deprecated, message):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.deprecation(feature, version_deprecated, message)

def log(debug_level, msg):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.log(debug_level, msg)

def begin(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.begin(*args)

def end():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.end()

def set_log_active(active=True):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.set_log_active(active)

def set_log_level(level):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.set_log_level(level)

def set_output_stream(out):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.set_output_stream(out)

def get_log_level():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.get_log_level()

def monitor_memory_usage():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.monitor_memory_usage()

def not_working_in_parallel(what):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _common.not_working_in_parallel(what)

def __debug(file, line, function, format):
    return _common.__debug(file, line, function, format)
__debug = _common.__debug

def __dolfin_assert(file, line, function, check):
    return _common.__dolfin_assert(file, line, function, check)
__dolfin_assert = _common.__dolfin_assert
class Event(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, msg, maxcount=1):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _common.Event_swiginit(self, _common.new_Event(msg, maxcount))
    __swig_destroy__ = _common.delete_Event

    def count(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Event_count(self)


    def maxcount(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Event_maxcount(self)

Event.__call__ = new_instancemethod(_common.Event___call__, None, Event)
Event.count = new_instancemethod(_common.Event_count, None, Event)
Event.maxcount = new_instancemethod(_common.Event_maxcount, None, Event)
Event_swigregister = _common.Event_swigregister
Event_swigregister(Event)

class Progress(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _common.Progress_swiginit(self, _common.new_Progress(*args))
    __swig_destroy__ = _common.delete_Progress

    def _add(self, incr):
        """Missing docstring"""
        return _common.Progress__add(self, incr)


    def _set(self, value):
        """Missing docstring"""
        return _common.Progress__set(self, value)


    def __iadd__(self, other):
        if isinstance(other, int):
            self._add(other)
        elif isinstance(other, float):
            self._set(other)
        return self

    def update(self, other):
        "Update the progress with given number"
        if isinstance(other, float):
            self._set(other)

Progress._add = new_instancemethod(_common.Progress__add, None, Progress)
Progress._set = new_instancemethod(_common.Progress__set, None, Progress)
Progress_swigregister = _common.Progress_swigregister
Progress_swigregister(Progress)

class Table(Variable):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _common.Table_swiginit(self, _common.new_Table(*args))
    __swig_destroy__ = _common.delete_Table

    def set(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Table_set(self, *args)


    def get(self, row, col):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Table_get(self, row, col)


    def get_value(self, row, col):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Table_get_value(self, row, col)


    def str_latex(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _common.Table_str_latex(self)

Table.__call__ = new_instancemethod(_common.Table___call__, None, Table)
Table.set = new_instancemethod(_common.Table_set, None, Table)
Table.get = new_instancemethod(_common.Table_get, None, Table)
Table.get_value = new_instancemethod(_common.Table_get_value, None, Table)
Table.str_latex = new_instancemethod(_common.Table_str_latex, None, Table)
Table_swigregister = _common.Table_swigregister
Table_swigregister(Table)

class TableEntry(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, row, col, table):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _common.TableEntry_swiginit(self, _common.new_TableEntry(row, col, table))
    __swig_destroy__ = _common.delete_TableEntry
TableEntry_swigregister = _common.TableEntry_swigregister
TableEntry_swigregister(TableEntry)

CRITICAL = _common.CRITICAL
ERROR = _common.ERROR
WARNING = _common.WARNING
INFO = _common.INFO
PROGRESS = _common.PROGRESS
TRACE = _common.TRACE
DBG = _common.DBG

def debug(message):
    import traceback
    file, line, func, txt = traceback.extract_stack(None, 2)[0]
    __debug(file, line, func, message)

def info(object, verbose=False):
    """Print string or object.

    *Arguments*
        object
            A string or a DOLFIN object (:py:class:`Variable <dolfin.cpp.Variable>`
            or :py:class:`Parameters <dolfin.cpp.Parameters>`)
        verbose
            An optional argument that indicates whether verbose object data
            should be printed. If False, a short one-line summary is printed.
            If True, verbose and sometimes very exhaustive object data are
            printed.
    """

    if isinstance(object, (Variable, Parameters)):
        _info(object.str(verbose))
    else:
        _info(object)



