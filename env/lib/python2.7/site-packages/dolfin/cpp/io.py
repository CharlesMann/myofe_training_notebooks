# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _io.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_io')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_io')
    _io = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_io', [dirname(__file__)])
        except ImportError:
            import _io
            return _io
        try:
            _mod = imp.load_module('_io', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _io = swig_import_helper()
    del swig_import_helper
else:
    import _io
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _io.SHARED_PTR_DISOWN

def _attach_base_to_numpy_array(obj, owner):
    return _io._attach_base_to_numpy_array(obj, owner)
_attach_base_to_numpy_array = _io._attach_base_to_numpy_array

def dolfin_swigversion():
    return _io.dolfin_swigversion()
dolfin_swigversion = _io.dolfin_swigversion

def dolfin_pythonversion():
    return _io.dolfin_pythonversion()
dolfin_pythonversion = _io.dolfin_pythonversion

tmp = hex(dolfin_swigversion())
__swigversion__ = "%d.%d.%d"%(tuple(map(int, [tmp[-5], tmp[-3], tmp[-2:]])))
tmp = hex(dolfin_pythonversion())
__pythonversion__ = "%d.%d.%d"%(tuple(map(lambda x: int(x,16), [tmp[2], tmp[3:5], tmp[5:7]])))
del tmp, dolfin_pythonversion, dolfin_swigversion


def has_petsc4py():
    return _io.has_petsc4py()
has_petsc4py = _io.has_petsc4py

def has_slepc4py():
    return _io.has_slepc4py()
has_slepc4py = _io.has_slepc4py
UFC_VERSION_MAJOR = _io.UFC_VERSION_MAJOR
UFC_VERSION_MINOR = _io.UFC_VERSION_MINOR
UFC_VERSION_MAINTENANCE = _io.UFC_VERSION_MAINTENANCE
UFC_VERSION_RELEASE = _io.UFC_VERSION_RELEASE
ufc_shape_interval = _io.ufc_shape_interval
ufc_shape_triangle = _io.ufc_shape_triangle
ufc_shape_quadrilateral = _io.ufc_shape_quadrilateral
ufc_shape_tetrahedron = _io.ufc_shape_tetrahedron
ufc_shape_hexahedron = _io.ufc_shape_hexahedron
class ufc_cell(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _io.delete_ufc_cell
    cell_shape = _swig_property(_io.ufc_cell_cell_shape_get, _io.ufc_cell_cell_shape_set)
    topological_dimension = _swig_property(_io.ufc_cell_topological_dimension_get, _io.ufc_cell_topological_dimension_set)
    geometric_dimension = _swig_property(_io.ufc_cell_geometric_dimension_get, _io.ufc_cell_geometric_dimension_set)
    index = _swig_property(_io.ufc_cell_index_get, _io.ufc_cell_index_set)
    local_facet = _swig_property(_io.ufc_cell_local_facet_get, _io.ufc_cell_local_facet_set)
    mesh_identifier = _swig_property(_io.ufc_cell_mesh_identifier_get, _io.ufc_cell_mesh_identifier_set)
ufc_cell_swigregister = _io.ufc_cell_swigregister
ufc_cell_swigregister(ufc_cell)
cvar = _io.cvar
UFC_VERSION = cvar.UFC_VERSION

class ufc_function(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _io.delete_ufc_function
ufc_function_swigregister = _io.ufc_function_swigregister
ufc_function_swigregister(ufc_function)

class ufc_finite_element(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _io.delete_ufc_finite_element
ufc_finite_element_swigregister = _io.ufc_finite_element_swigregister
ufc_finite_element_swigregister(ufc_finite_element)

class ufc_dofmap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _io.delete_ufc_dofmap
ufc_dofmap_swigregister = _io.ufc_dofmap_swigregister
ufc_dofmap_swigregister(ufc_dofmap)

class ufc_coordinate_mapping(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _io.delete_ufc_coordinate_mapping
ufc_coordinate_mapping_swigregister = _io.ufc_coordinate_mapping_swigregister
ufc_coordinate_mapping_swigregister(ufc_coordinate_mapping)

class ufc_form(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _io.delete_ufc_form
ufc_form_swigregister = _io.ufc_form_swigregister
ufc_form_swigregister(ufc_form)


def make_ufc_finite_element(*args):
    return _io.make_ufc_finite_element(*args)
make_ufc_finite_element = _io.make_ufc_finite_element

def make_ufc_dofmap(*args):
    return _io.make_ufc_dofmap(*args)
make_ufc_dofmap = _io.make_ufc_dofmap

def make_ufc_coordinate_mapping(*args):
    return _io.make_ufc_coordinate_mapping(*args)
make_ufc_coordinate_mapping = _io.make_ufc_coordinate_mapping

def make_ufc_form(*args):
    return _io.make_ufc_form(*args)
make_ufc_form = _io.make_ufc_form
import common
class HierarchicalMesh(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, arg2):
        _io.HierarchicalMesh_swiginit(self, _io.new_HierarchicalMesh(arg2))
    __swig_destroy__ = _io.delete_HierarchicalMesh
HierarchicalMesh.depth = new_instancemethod(_io.HierarchicalMesh_depth, None, HierarchicalMesh)
HierarchicalMesh.has_parent = new_instancemethod(_io.HierarchicalMesh_has_parent, None, HierarchicalMesh)
HierarchicalMesh.has_child = new_instancemethod(_io.HierarchicalMesh_has_child, None, HierarchicalMesh)
HierarchicalMesh._parent = new_instancemethod(_io.HierarchicalMesh__parent, None, HierarchicalMesh)
HierarchicalMesh._child = new_instancemethod(_io.HierarchicalMesh__child, None, HierarchicalMesh)
HierarchicalMesh._root_node = new_instancemethod(_io.HierarchicalMesh__root_node, None, HierarchicalMesh)
HierarchicalMesh._leaf_node = new_instancemethod(_io.HierarchicalMesh__leaf_node, None, HierarchicalMesh)
HierarchicalMesh.set_parent = new_instancemethod(_io.HierarchicalMesh_set_parent, None, HierarchicalMesh)
HierarchicalMesh.clear_child = new_instancemethod(_io.HierarchicalMesh_clear_child, None, HierarchicalMesh)
HierarchicalMesh.set_child = new_instancemethod(_io.HierarchicalMesh_set_child, None, HierarchicalMesh)
HierarchicalMesh._debug = new_instancemethod(_io.HierarchicalMesh__debug, None, HierarchicalMesh)
HierarchicalMesh_swigregister = _io.HierarchicalMesh_swigregister
HierarchicalMesh_swigregister(HierarchicalMesh)

import mesh
import la
class HierarchicalFunctionSpace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, arg2):
        _io.HierarchicalFunctionSpace_swiginit(self, _io.new_HierarchicalFunctionSpace(arg2))
    __swig_destroy__ = _io.delete_HierarchicalFunctionSpace
HierarchicalFunctionSpace.depth = new_instancemethod(_io.HierarchicalFunctionSpace_depth, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace.has_parent = new_instancemethod(_io.HierarchicalFunctionSpace_has_parent, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace.has_child = new_instancemethod(_io.HierarchicalFunctionSpace_has_child, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace._parent = new_instancemethod(_io.HierarchicalFunctionSpace__parent, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace._child = new_instancemethod(_io.HierarchicalFunctionSpace__child, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace._root_node = new_instancemethod(_io.HierarchicalFunctionSpace__root_node, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace._leaf_node = new_instancemethod(_io.HierarchicalFunctionSpace__leaf_node, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace.set_parent = new_instancemethod(_io.HierarchicalFunctionSpace_set_parent, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace.clear_child = new_instancemethod(_io.HierarchicalFunctionSpace_clear_child, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace.set_child = new_instancemethod(_io.HierarchicalFunctionSpace_set_child, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace._debug = new_instancemethod(_io.HierarchicalFunctionSpace__debug, None, HierarchicalFunctionSpace)
HierarchicalFunctionSpace_swigregister = _io.HierarchicalFunctionSpace_swigregister
HierarchicalFunctionSpace_swigregister(HierarchicalFunctionSpace)

class HierarchicalFunction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, arg2):
        _io.HierarchicalFunction_swiginit(self, _io.new_HierarchicalFunction(arg2))
    __swig_destroy__ = _io.delete_HierarchicalFunction
HierarchicalFunction.depth = new_instancemethod(_io.HierarchicalFunction_depth, None, HierarchicalFunction)
HierarchicalFunction.has_parent = new_instancemethod(_io.HierarchicalFunction_has_parent, None, HierarchicalFunction)
HierarchicalFunction.has_child = new_instancemethod(_io.HierarchicalFunction_has_child, None, HierarchicalFunction)
HierarchicalFunction._parent = new_instancemethod(_io.HierarchicalFunction__parent, None, HierarchicalFunction)
HierarchicalFunction._child = new_instancemethod(_io.HierarchicalFunction__child, None, HierarchicalFunction)
HierarchicalFunction._root_node = new_instancemethod(_io.HierarchicalFunction__root_node, None, HierarchicalFunction)
HierarchicalFunction._leaf_node = new_instancemethod(_io.HierarchicalFunction__leaf_node, None, HierarchicalFunction)
HierarchicalFunction.set_parent = new_instancemethod(_io.HierarchicalFunction_set_parent, None, HierarchicalFunction)
HierarchicalFunction.clear_child = new_instancemethod(_io.HierarchicalFunction_clear_child, None, HierarchicalFunction)
HierarchicalFunction.set_child = new_instancemethod(_io.HierarchicalFunction_set_child, None, HierarchicalFunction)
HierarchicalFunction._debug = new_instancemethod(_io.HierarchicalFunction__debug, None, HierarchicalFunction)
HierarchicalFunction_swigregister = _io.HierarchicalFunction_swigregister
HierarchicalFunction_swigregister(HierarchicalFunction)

import function
import fem

def interactive(really=False):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _io.interactive(really)

def plot(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _io.plot(*args)

def _plot_multimesh(multimesh):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _io._plot_multimesh(multimesh)
class VTKPlotter(common.Variable):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _io.VTKPlotter_swiginit(self, _io.new_VTKPlotter(*args))
    __swig_destroy__ = _io.delete_VTKPlotter

    def default_parameters():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.VTKPlotter_default_parameters()

    default_parameters = staticmethod(default_parameters)

    def plot(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.VTKPlotter_plot(self, *args)


    def interactive(self, enter_eventloop=True):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.VTKPlotter_interactive(self, enter_eventloop)


    def write_png(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.VTKPlotter_write_png(self, *args)


    def write_pdf(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.VTKPlotter_write_pdf(self, *args)


    def key(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.VTKPlotter_key(self)


    def set_key(self, key):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.VTKPlotter_set_key(self, key)


    def to_key(var):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.VTKPlotter_to_key(var)

    to_key = staticmethod(to_key)

    def azimuth(self, angle):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.VTKPlotter_azimuth(self, angle)


    def all_interactive(really=False):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.VTKPlotter_all_interactive(really)

    all_interactive = staticmethod(all_interactive)
    Modifiers_SHIFT = _io.VTKPlotter_Modifiers_SHIFT
    Modifiers_ALT = _io.VTKPlotter_Modifiers_ALT
    Modifiers_CONTROL = _io.VTKPlotter_Modifiers_CONTROL
VTKPlotter.is_compatible = new_instancemethod(_io.VTKPlotter_is_compatible, None, VTKPlotter)
VTKPlotter.plot = new_instancemethod(_io.VTKPlotter_plot, None, VTKPlotter)
VTKPlotter.interactive = new_instancemethod(_io.VTKPlotter_interactive, None, VTKPlotter)
VTKPlotter.write_png = new_instancemethod(_io.VTKPlotter_write_png, None, VTKPlotter)
VTKPlotter.write_pdf = new_instancemethod(_io.VTKPlotter_write_pdf, None, VTKPlotter)
VTKPlotter.key = new_instancemethod(_io.VTKPlotter_key, None, VTKPlotter)
VTKPlotter.set_key = new_instancemethod(_io.VTKPlotter_set_key, None, VTKPlotter)
VTKPlotter.azimuth = new_instancemethod(_io.VTKPlotter_azimuth, None, VTKPlotter)
VTKPlotter.elevate = new_instancemethod(_io.VTKPlotter_elevate, None, VTKPlotter)
VTKPlotter.dolly = new_instancemethod(_io.VTKPlotter_dolly, None, VTKPlotter)
VTKPlotter.zoom = new_instancemethod(_io.VTKPlotter_zoom, None, VTKPlotter)
VTKPlotter.set_viewangle = new_instancemethod(_io.VTKPlotter_set_viewangle, None, VTKPlotter)
VTKPlotter.set_min_max = new_instancemethod(_io.VTKPlotter_set_min_max, None, VTKPlotter)
VTKPlotter.add_polygon = new_instancemethod(_io.VTKPlotter_add_polygon, None, VTKPlotter)
VTKPlotter.key_pressed = new_instancemethod(_io.VTKPlotter_key_pressed, None, VTKPlotter)
VTKPlotter_swigregister = _io.VTKPlotter_swigregister
VTKPlotter_swigregister(VTKPlotter)

def VTKPlotter_default_parameters():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _io.VTKPlotter_default_parameters()

def VTKPlotter_to_key(var):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _io.VTKPlotter_to_key(var)

def VTKPlotter_all_interactive(really=False):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _io.VTKPlotter_all_interactive(really)

class GenericFile(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, filename, filetype):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _io.GenericFile_swiginit(self, _io.new_GenericFile(filename, filetype))
    __swig_destroy__ = _io.delete_GenericFile
GenericFile.__rshift__ = new_instancemethod(_io.GenericFile___rshift__, None, GenericFile)
GenericFile.__lshift__ = new_instancemethod(_io.GenericFile___lshift__, None, GenericFile)
GenericFile._read = new_instancemethod(_io.GenericFile__read, None, GenericFile)
GenericFile._write = new_instancemethod(_io.GenericFile__write, None, GenericFile)
GenericFile.name = new_instancemethod(_io.GenericFile_name, None, GenericFile)
GenericFile_swigregister = _io.GenericFile_swigregister
GenericFile_swigregister(GenericFile)

class File(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Type_x3d = _io.File_Type_x3d
    Type_xml = _io.File_Type_xml
    Type_vtk = _io.File_Type_vtk
    Type_raw = _io.File_Type_raw
    Type_xyz = _io.File_Type_xyz
    Type_binary = _io.File_Type_binary
    Type_svg = _io.File_Type_svg

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _io.File_swiginit(self, _io.new_File(*args))
    __swig_destroy__ = _io.delete_File

    def exists(filename):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.File_exists(filename)

    exists = staticmethod(exists)

    def create_parent_path(filename):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.File_create_parent_path(filename)

    create_parent_path = staticmethod(create_parent_path)

    def __rshift__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.File___rshift__(self, *args)


    def __lshift__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.File___lshift__(self, *args)


    def __enter__(self) :
        return self

    def __exit__(self, type, value, traceback) :
        pass
    # Do Nothing...
    #self.close()

File.__rshift__ = new_instancemethod(_io.File___rshift__, None, File)
File.__lshift__ = new_instancemethod(_io.File___lshift__, None, File)
File_swigregister = _io.File_swigregister
File_swigregister(File)

def File_exists(filename):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _io.File_exists(filename)

def File_create_parent_path(filename):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _io.File_create_parent_path(filename)

class XDMFFile(common.Variable):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Encoding_HDF5 = _io.XDMFFile_Encoding_HDF5
    Encoding_ASCII = _io.XDMFFile_Encoding_ASCII

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _io.XDMFFile_swiginit(self, _io.new_XDMFFile(*args))
    __swig_destroy__ = _io.delete_XDMFFile

    def close(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.XDMFFile_close(self)


    def write(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.XDMFFile_write(self, *args)


    def read(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.XDMFFile_read(self, *args)


    def __enter__(self) :
        return self

    def __exit__(self, type, value, traceback) :
        self.close()

XDMFFile.close = new_instancemethod(_io.XDMFFile_close, None, XDMFFile)
XDMFFile.write = new_instancemethod(_io.XDMFFile_write, None, XDMFFile)
XDMFFile.read = new_instancemethod(_io.XDMFFile_read, None, XDMFFile)
XDMFFile_swigregister = _io.XDMFFile_swigregister
XDMFFile_swigregister(XDMFFile)

class HDF5File(common.Variable):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, comm, filename, file_mode):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _io.HDF5File_swiginit(self, _io.new_HDF5File(comm, filename, file_mode))
    __swig_destroy__ = _io.delete_HDF5File

    def close(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.HDF5File_close(self)


    def flush(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.HDF5File_flush(self)


    def write(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.HDF5File_write(self, *args)


    def read(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.HDF5File_read(self, *args)


    def has_dataset(self, dataset_name):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.HDF5File_has_dataset(self, dataset_name)


    def set_mpi_atomicity(self, atomic):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.HDF5File_set_mpi_atomicity(self, atomic)


    def get_mpi_atomicity(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.HDF5File_get_mpi_atomicity(self)


    def __enter__(self) :
        return self

    def __exit__(self, type, value, traceback) :
        self.close()

HDF5File.close = new_instancemethod(_io.HDF5File_close, None, HDF5File)
HDF5File.flush = new_instancemethod(_io.HDF5File_flush, None, HDF5File)
HDF5File.write = new_instancemethod(_io.HDF5File_write, None, HDF5File)
HDF5File.read = new_instancemethod(_io.HDF5File_read, None, HDF5File)
HDF5File.has_dataset = new_instancemethod(_io.HDF5File_has_dataset, None, HDF5File)
HDF5File.attributes = new_instancemethod(_io.HDF5File_attributes, None, HDF5File)
HDF5File.set_mpi_atomicity = new_instancemethod(_io.HDF5File_set_mpi_atomicity, None, HDF5File)
HDF5File.get_mpi_atomicity = new_instancemethod(_io.HDF5File_get_mpi_atomicity, None, HDF5File)
HDF5File.h5_id = new_instancemethod(_io.HDF5File_h5_id, None, HDF5File)
HDF5File_swigregister = _io.HDF5File_swigregister
HDF5File_swigregister(HDF5File)

class HDF5Attribute(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, hdf5_file_id, dataset_name):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _io.HDF5Attribute_swiginit(self, _io.new_HDF5Attribute(hdf5_file_id, dataset_name))
    __swig_destroy__ = _io.delete_HDF5Attribute

    def exists(self, attribute_name):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.HDF5Attribute_exists(self, attribute_name)


    def type_str(self, attribute_name):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.HDF5Attribute_type_str(self, attribute_name)


    def str(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.HDF5Attribute_str(self, *args)


    def list_attributes(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.HDF5Attribute_list_attributes(self)


    def __getitem__(self, key):
        attr_type = self.type_str(key)
        if attr_type=="string":
            return self.str(key)
        elif attr_type=="float":
            return float(self.str(key))
        elif attr_type=="int":
            return int(self.str(key))
        elif attr_type=="vectorfloat":
            return [float(x) for x in self.str(key).split(",")]
        elif attr_type=="vectorint":
            return [int(x) for x in self.str(key).split(",")]
        return None

    def __contains__(self, key):
        return self.exists(key)

    def __len__(self, key):
        return len(self.list_attributes())

    def __iter__(self):
        for key in self.list_attributes():
            yield key

    def items(self):
        "Returns a list of all key and value pairs"
        return [(key, self[key]) for key in self]

    def values(self):
        "Returns a list of all values"
        return [self[key] for key in self]

    def keys(self):
        "Returns a list of all values"
        return self.list_attributes()

    def to_dict(self):
        "Return a dict representation (copy) of all data"
        return dict(t for t in self.items())

HDF5Attribute.exists = new_instancemethod(_io.HDF5Attribute_exists, None, HDF5Attribute)
HDF5Attribute.type_str = new_instancemethod(_io.HDF5Attribute_type_str, None, HDF5Attribute)
HDF5Attribute.str = new_instancemethod(_io.HDF5Attribute_str, None, HDF5Attribute)
HDF5Attribute.list_attributes = new_instancemethod(_io.HDF5Attribute_list_attributes, None, HDF5Attribute)
HDF5Attribute.__setitem__ = new_instancemethod(_io.HDF5Attribute___setitem__, None, HDF5Attribute)
HDF5Attribute_swigregister = _io.HDF5Attribute_swigregister
HDF5Attribute_swigregister(HDF5Attribute)

class X3DOMParameters(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Representation_surface = _io.X3DOMParameters_Representation_surface
    Representation_surface_with_edges = _io.X3DOMParameters_Representation_surface_with_edges
    Representation_wireframe = _io.X3DOMParameters_Representation_wireframe

    def __init__(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _io.X3DOMParameters_swiginit(self, _io.new_X3DOMParameters())

    def set_representation(self, representation):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_set_representation(self, representation)


    def get_representation(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_get_representation(self)


    def get_viewport_size(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_get_viewport_size(self)


    def set_diffuse_color(self, rgb):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_set_diffuse_color(self, rgb)


    def get_diffuse_color(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_get_diffuse_color(self)


    def set_emissive_color(self, rgb):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_set_emissive_color(self, rgb)


    def get_emissive_color(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_get_emissive_color(self)


    def set_specular_color(self, rgb):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_set_specular_color(self, rgb)


    def get_specular_color(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_get_specular_color(self)


    def set_background_color(self, rgb):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_set_background_color(self, rgb)


    def get_background_color(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_get_background_color(self)


    def set_ambient_intensity(self, intensity):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_set_ambient_intensity(self, intensity)


    def get_ambient_intensity(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_get_ambient_intensity(self)


    def set_shininess(self, shininess):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_set_shininess(self, shininess)


    def get_shininess(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_get_shininess(self)


    def set_transparency(self, transparency):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_set_transparency(self, transparency)


    def get_transparency(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_get_transparency(self)


    def _set_color_map(self, color_data):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters__set_color_map(self, color_data)


    def get_color_map(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_get_color_map(self)


    def set_x3d_stats(self, show):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_set_x3d_stats(self, show)


    def get_x3d_stats(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_get_x3d_stats(self)


    def set_menu_display(self, show):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_set_menu_display(self, show)


    def get_menu_display(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOMParameters_get_menu_display(self)


    def set_color_map(self, colormap):
        from six import string_types
        if isinstance(colormap, string_types):
    # If we are given a string, try to load the corresponding matplotlib cmap
            try:
                import matplotlib.cm
                import numpy
                mpl_cmap = matplotlib.cm.get_cmap(colormap)
    # Flatten colormap to simple list
                cmap_data = [val for s in [list(mpl_cmap(i)[:3]) for i in range(256)] for val in s]
                self._set_color_map(numpy.array(cmap_data, dtype='double'))
            except:
    # FIXME: raise error or print warning
                pass
        else:
    # Not a string - assume user has supplied valid cmap data as an array
            self._set_color_map(colormap)

    __swig_destroy__ = _io.delete_X3DOMParameters
X3DOMParameters.set_representation = new_instancemethod(_io.X3DOMParameters_set_representation, None, X3DOMParameters)
X3DOMParameters.get_representation = new_instancemethod(_io.X3DOMParameters_get_representation, None, X3DOMParameters)
X3DOMParameters.get_viewport_size = new_instancemethod(_io.X3DOMParameters_get_viewport_size, None, X3DOMParameters)
X3DOMParameters.set_diffuse_color = new_instancemethod(_io.X3DOMParameters_set_diffuse_color, None, X3DOMParameters)
X3DOMParameters.get_diffuse_color = new_instancemethod(_io.X3DOMParameters_get_diffuse_color, None, X3DOMParameters)
X3DOMParameters.set_emissive_color = new_instancemethod(_io.X3DOMParameters_set_emissive_color, None, X3DOMParameters)
X3DOMParameters.get_emissive_color = new_instancemethod(_io.X3DOMParameters_get_emissive_color, None, X3DOMParameters)
X3DOMParameters.set_specular_color = new_instancemethod(_io.X3DOMParameters_set_specular_color, None, X3DOMParameters)
X3DOMParameters.get_specular_color = new_instancemethod(_io.X3DOMParameters_get_specular_color, None, X3DOMParameters)
X3DOMParameters.set_background_color = new_instancemethod(_io.X3DOMParameters_set_background_color, None, X3DOMParameters)
X3DOMParameters.get_background_color = new_instancemethod(_io.X3DOMParameters_get_background_color, None, X3DOMParameters)
X3DOMParameters.set_ambient_intensity = new_instancemethod(_io.X3DOMParameters_set_ambient_intensity, None, X3DOMParameters)
X3DOMParameters.get_ambient_intensity = new_instancemethod(_io.X3DOMParameters_get_ambient_intensity, None, X3DOMParameters)
X3DOMParameters.set_shininess = new_instancemethod(_io.X3DOMParameters_set_shininess, None, X3DOMParameters)
X3DOMParameters.get_shininess = new_instancemethod(_io.X3DOMParameters_get_shininess, None, X3DOMParameters)
X3DOMParameters.set_transparency = new_instancemethod(_io.X3DOMParameters_set_transparency, None, X3DOMParameters)
X3DOMParameters.get_transparency = new_instancemethod(_io.X3DOMParameters_get_transparency, None, X3DOMParameters)
X3DOMParameters._set_color_map = new_instancemethod(_io.X3DOMParameters__set_color_map, None, X3DOMParameters)
X3DOMParameters.get_color_map = new_instancemethod(_io.X3DOMParameters_get_color_map, None, X3DOMParameters)
X3DOMParameters.set_x3d_stats = new_instancemethod(_io.X3DOMParameters_set_x3d_stats, None, X3DOMParameters)
X3DOMParameters.get_x3d_stats = new_instancemethod(_io.X3DOMParameters_get_x3d_stats, None, X3DOMParameters)
X3DOMParameters.set_menu_display = new_instancemethod(_io.X3DOMParameters_set_menu_display, None, X3DOMParameters)
X3DOMParameters.get_menu_display = new_instancemethod(_io.X3DOMParameters_get_menu_display, None, X3DOMParameters)
X3DOMParameters_swigregister = _io.X3DOMParameters_swigregister
X3DOMParameters_swigregister(X3DOMParameters)

class X3DOM(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def str(*args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOM_str(*args)

    str = staticmethod(str)

    def html(*args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOM_html(*args)

    html = staticmethod(html)

    def build_x3dom_tree(*args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _io.X3DOM_build_x3dom_tree(*args)

    build_x3dom_tree = staticmethod(build_x3dom_tree)

    def __init__(self):
        _io.X3DOM_swiginit(self, _io.new_X3DOM())
    __swig_destroy__ = _io.delete_X3DOM
X3DOM_swigregister = _io.X3DOM_swigregister
X3DOM_swigregister(X3DOM)

def X3DOM_str(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _io.X3DOM_str(*args)

def X3DOM_html(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _io.X3DOM_html(*args)

def X3DOM_build_x3dom_tree(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _io.X3DOM_build_x3dom_tree(*args)



