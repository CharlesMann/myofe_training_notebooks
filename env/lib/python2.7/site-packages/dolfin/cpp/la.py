# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _la.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_la')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_la')
    _la = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_la', [dirname(__file__)])
        except ImportError:
            import _la
            return _la
        try:
            _mod = imp.load_module('_la', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _la = swig_import_helper()
    del swig_import_helper
else:
    import _la
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _la.SHARED_PTR_DISOWN

def _attach_base_to_numpy_array(obj, owner):
    return _la._attach_base_to_numpy_array(obj, owner)
_attach_base_to_numpy_array = _la._attach_base_to_numpy_array

def dolfin_swigversion():
    return _la.dolfin_swigversion()
dolfin_swigversion = _la.dolfin_swigversion

def dolfin_pythonversion():
    return _la.dolfin_pythonversion()
dolfin_pythonversion = _la.dolfin_pythonversion

tmp = hex(dolfin_swigversion())
__swigversion__ = "%d.%d.%d"%(tuple(map(int, [tmp[-5], tmp[-3], tmp[-2:]])))
tmp = hex(dolfin_pythonversion())
__pythonversion__ = "%d.%d.%d"%(tuple(map(lambda x: int(x,16), [tmp[2], tmp[3:5], tmp[5:7]])))
del tmp, dolfin_pythonversion, dolfin_swigversion


def has_petsc4py():
    return _la.has_petsc4py()
has_petsc4py = _la.has_petsc4py

def has_slepc4py():
    return _la.has_slepc4py()
has_slepc4py = _la.has_slepc4py
UFC_VERSION_MAJOR = _la.UFC_VERSION_MAJOR
UFC_VERSION_MINOR = _la.UFC_VERSION_MINOR
UFC_VERSION_MAINTENANCE = _la.UFC_VERSION_MAINTENANCE
UFC_VERSION_RELEASE = _la.UFC_VERSION_RELEASE
ufc_shape_interval = _la.ufc_shape_interval
ufc_shape_triangle = _la.ufc_shape_triangle
ufc_shape_quadrilateral = _la.ufc_shape_quadrilateral
ufc_shape_tetrahedron = _la.ufc_shape_tetrahedron
ufc_shape_hexahedron = _la.ufc_shape_hexahedron
class ufc_cell(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _la.delete_ufc_cell
    cell_shape = _swig_property(_la.ufc_cell_cell_shape_get, _la.ufc_cell_cell_shape_set)
    topological_dimension = _swig_property(_la.ufc_cell_topological_dimension_get, _la.ufc_cell_topological_dimension_set)
    geometric_dimension = _swig_property(_la.ufc_cell_geometric_dimension_get, _la.ufc_cell_geometric_dimension_set)
    index = _swig_property(_la.ufc_cell_index_get, _la.ufc_cell_index_set)
    local_facet = _swig_property(_la.ufc_cell_local_facet_get, _la.ufc_cell_local_facet_set)
    mesh_identifier = _swig_property(_la.ufc_cell_mesh_identifier_get, _la.ufc_cell_mesh_identifier_set)
ufc_cell_swigregister = _la.ufc_cell_swigregister
ufc_cell_swigregister(ufc_cell)
cvar = _la.cvar
UFC_VERSION = cvar.UFC_VERSION

class ufc_function(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _la.delete_ufc_function
ufc_function_swigregister = _la.ufc_function_swigregister
ufc_function_swigregister(ufc_function)

class ufc_finite_element(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _la.delete_ufc_finite_element
ufc_finite_element_swigregister = _la.ufc_finite_element_swigregister
ufc_finite_element_swigregister(ufc_finite_element)

class ufc_dofmap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _la.delete_ufc_dofmap
ufc_dofmap_swigregister = _la.ufc_dofmap_swigregister
ufc_dofmap_swigregister(ufc_dofmap)

class ufc_coordinate_mapping(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _la.delete_ufc_coordinate_mapping
ufc_coordinate_mapping_swigregister = _la.ufc_coordinate_mapping_swigregister
ufc_coordinate_mapping_swigregister(ufc_coordinate_mapping)

class ufc_form(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _la.delete_ufc_form
ufc_form_swigregister = _la.ufc_form_swigregister
ufc_form_swigregister(ufc_form)


def make_ufc_finite_element(*args):
    return _la.make_ufc_finite_element(*args)
make_ufc_finite_element = _la.make_ufc_finite_element

def make_ufc_dofmap(*args):
    return _la.make_ufc_dofmap(*args)
make_ufc_dofmap = _la.make_ufc_dofmap

def make_ufc_coordinate_mapping(*args):
    return _la.make_ufc_coordinate_mapping(*args)
make_ufc_coordinate_mapping = _la.make_ufc_coordinate_mapping

def make_ufc_form(*args):
    return _la.make_ufc_form(*args)
make_ufc_form = _la.make_ufc_form
import common
class LinearAlgebraObject(common.Variable):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def shared_instance(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.LinearAlgebraObject_shared_instance(self, *args)


    def mpi_comm(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.LinearAlgebraObject_mpi_comm(self)

    __swig_destroy__ = _la.delete_LinearAlgebraObject
LinearAlgebraObject.shared_instance = new_instancemethod(_la.LinearAlgebraObject_shared_instance, None, LinearAlgebraObject)
LinearAlgebraObject.mpi_comm = new_instancemethod(_la.LinearAlgebraObject_mpi_comm, None, LinearAlgebraObject)
LinearAlgebraObject_swigregister = _la.LinearAlgebraObject_swigregister
LinearAlgebraObject_swigregister(LinearAlgebraObject)

class GenericLinearOperator(LinearAlgebraObject):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _la.delete_GenericLinearOperator

    def size(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericLinearOperator_size(self, dim)


    def mult(self, x, y):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericLinearOperator_mult(self, x, y)

GenericLinearOperator.size = new_instancemethod(_la.GenericLinearOperator_size, None, GenericLinearOperator)
GenericLinearOperator.mult = new_instancemethod(_la.GenericLinearOperator_mult, None, GenericLinearOperator)
GenericLinearOperator_swigregister = _la.GenericLinearOperator_swigregister
GenericLinearOperator_swigregister(GenericLinearOperator)

class GenericTensor(LinearAlgebraObject):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _la.delete_GenericTensor

    def init(self, tensor_layout):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericTensor_init(self, tensor_layout)


    def empty(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericTensor_empty(self)


    def rank(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericTensor_rank(self)


    def size(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericTensor_size(self, dim)


    def local_range(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericTensor_local_range(self, dim)


    def set_local(self, block, num_rows, rows):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericTensor_set_local(self, block, num_rows, rows)


    def add(self, block, rows):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericTensor_add(self, block, rows)


    def add_local(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericTensor_add_local(self, *args)


    def zero(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericTensor_zero(self)


    def apply(self, mode):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericTensor_apply(self, mode)


    def factory(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericTensor_factory(self)

GenericTensor.init = new_instancemethod(_la.GenericTensor_init, None, GenericTensor)
GenericTensor.empty = new_instancemethod(_la.GenericTensor_empty, None, GenericTensor)
GenericTensor.rank = new_instancemethod(_la.GenericTensor_rank, None, GenericTensor)
GenericTensor.size = new_instancemethod(_la.GenericTensor_size, None, GenericTensor)
GenericTensor.local_range = new_instancemethod(_la.GenericTensor_local_range, None, GenericTensor)
GenericTensor.set_local = new_instancemethod(_la.GenericTensor_set_local, None, GenericTensor)
GenericTensor.add = new_instancemethod(_la.GenericTensor_add, None, GenericTensor)
GenericTensor.add_local = new_instancemethod(_la.GenericTensor_add_local, None, GenericTensor)
GenericTensor.zero = new_instancemethod(_la.GenericTensor_zero, None, GenericTensor)
GenericTensor.apply = new_instancemethod(_la.GenericTensor_apply, None, GenericTensor)
GenericTensor.factory = new_instancemethod(_la.GenericTensor_factory, None, GenericTensor)
GenericTensor_swigregister = _la.GenericTensor_swigregister
GenericTensor_swigregister(GenericTensor)

class GenericMatrix(GenericTensor, GenericLinearOperator):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _la.delete_GenericMatrix

    def nnz(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_nnz(self)


    def copy(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_copy(self)


    def init_vector(self, z, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_init_vector(self, z, dim)


    def get(self, block, m, n):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_get(self, block, m, n)


    def set(self, block, m, n):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_set(self, block, m, n)


    def set_local(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_set_local(self, *args)


    def add(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_add(self, *args)


    def add_local(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_add_local(self, *args)


    def axpy(self, a, A, same_nonzero_pattern):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_axpy(self, a, A, same_nonzero_pattern)


    def norm(self, norm_type):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_norm(self, norm_type)


    def getrow(self, row):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_getrow(self, row)


    def setrow(self, row, columns, values):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_setrow(self, row, columns, values)


    def zero(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_zero(self, *args)


    def zero_local(self, m):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_zero_local(self, m)


    def ident(self, m):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_ident(self, m)


    def ident_local(self, m):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_ident_local(self, m)


    def transpmult(self, x, y):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_transpmult(self, x, y)


    def get_diagonal(self, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_get_diagonal(self, x)


    def set_diagonal(self, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_set_diagonal(self, x)


    def is_symmetric(self, tol):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_is_symmetric(self, tol)


    def assign(self, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_assign(self, x)


    def ident_zeros(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericMatrix_ident_zeros(self)


    def _scale(self, a):
        """Missing docstring"""
        return _la.GenericMatrix__scale(self, a)


    def __is_compatible(self,other):
        "Returns True if self, and other are compatible Vectors"
        if not isinstance(other,GenericMatrix):
            return False
        self_type = get_tensor_type(self)
        return self_type == get_tensor_type(other)

    def array(self):
        "Return a numpy array representation of Matrix"
        from numpy import zeros
        m_range = self.local_range(0);
        A = zeros((m_range[1] - m_range[0], self.size(1)))
        for i, row in enumerate(range(*m_range)):
            column, values = self.getrow(row)
            A[i, column] = values
        return A


    # FIXME: Getting matrix entries need to be carefully examined, especially
    #          for parallel objects.
    """
    def __getitem__(self,indices):
        from numpy import ndarray
        from types import SliceType
        if not (isinstance(indices, tuple) and len(indices) == 2):
            raise TypeError("expected two indices")
        if not all(isinstance(ind, (int, SliceType, list, ndarray)) for ind in indices):
            raise TypeError("an int, slice, list or numpy array as indices")

        if isinstance(indices[0], int):
            if isinstance(indices[1], int):
                return _get_matrix_single_item(self,indices[0],indices[1])
            return as_backend_type(_get_matrix_sub_vector(self,indices[0], indices[1], True))
        elif isinstance(indices[1],int):
            return as_backend_type(_get_matrix_sub_vector(self,indices[1], indices[0], False))
        else:
            same_indices = id(indices[0]) == id(indices[1])

            if not same_indices and ( type(indices[0]) == type(indices[1]) ):
                if isinstance(indices[0],(list,SliceType)):
                    same_indices = indices[0] == indices[1]
                else:
                    same_indices = (indices[0] == indices[1]).all()

            if same_indices:
                return as_backend_type(_get_matrix_sub_matrix(self, indices[0], None))
            else:
                return as_backend_type(_get_matrix_sub_matrix(self, indices[0], indices[1]))

    def __setitem__(self, indices, values):
        from numpy import ndarray, isscalar
        from types import SliceType
        if not (isinstance(indices, tuple) and len(indices) == 2):
            raise TypeError("expected two indices")
        if not all(isinstance(ind, (int, SliceType, list, ndarray)) for ind in indices):
            raise TypeError("an int, slice, list or numpy array as indices")

        if isinstance(indices[0], int):
            if isinstance(indices[1], int):
                if not isscalar(values):
                    raise TypeError("expected scalar for single value assigment")
                _set_matrix_single_item(self, indices[0], indices[1], values)
            else:
                raise NotImplementedError
                if isinstance(values,GenericVector):
                    _set_matrix_items_vector(self, indices[0], indices[1], values, True)
                elif isinstance(values,ndarray):
                    _set_matrix_items_array_of_float(self, indices[0], indices[1], values, True)
                else:
                    raise TypeError("expected a GenericVector or numpy array of float")
        elif isinstance(indices[1], int):
            raise NotImplementedError
            if isinstance(values, GenericVector):
                _set_matrix_items_vector(self, indices[1], indices[0], values, False)
            elif isinstance(values, ndarray):
                _set_matrix_items_array_of_float(self, indices[1], indices[0], values, False)
            else:
                raise TypeError("expected a GenericVector or numpy array of float")

        else:
            raise NotImplementedError
            same_indices = id(indices[0]) == id(indices[1])

            if not same_indices and ( type(indices[0]) == type(indices[1]) ):
                if isinstance(indices[0], (list, SliceType)):
                    same_indices = indices[0] == indices[1]
                else:
                    same_indices = (indices[0] == indices[1]).all()

            if same_indices:
                if isinstance(values,GenericMatrix):
                    _set_matrix_items_matrix(self, indices[0], None, values)
                elif isinstance(values, ndarray) and len(values.shape)==2:
                    _set_matrix_items_array_of_float(self, indices[0], None, values)
                else:
                    raise TypeError("expected a GenericMatrix or 2D numpy array of float")
            else:
                if isinstance(values,GenericMatrix):
                    _set_matrix_items_matrix(self, indices[0], indices[1], values)
                elif isinstance(values,ndarray) and len(values.shape) == 2:
                    _set_matrix_items_array_of_float(self, indices[0], indices[1], values)
                else:
                    raise TypeError("expected a GenericMatrix or 2D numpy array of float")
    """

    def __add__(self,other):
        """x.__add__(y) <==> x+y"""
        if self.__is_compatible(other):
            ret = self.copy()
            ret.axpy(1.0, other, False)
            return ret
        return NotImplemented

    def __sub__(self,other):
        """x.__sub__(y) <==> x-y"""
        if self.__is_compatible(other):
            ret = self.copy()
            ret.axpy(-1.0, other, False)
            return ret
        return NotImplemented

    def __mul__(self,other):
        """x.__mul__(y) <==> x*y"""
        from numpy import ndarray, isscalar
        if isscalar(other):
            ret = self.copy()
            ret._scale(other)
            return ret
        elif isinstance(other,GenericVector):
            matrix_type = get_tensor_type(self)
            vector_type = get_tensor_type(other)
            if vector_type not in _matrix_vector_mul_map[matrix_type]:
                raise TypeError("Provide a Vector which can be as_backend_typeed to ''"%vector_type.__name__)
            if type(other) == Vector:
                ret = Vector()
            else:
                ret = vector_type()
            self.mult(other, ret)
            return ret
        elif isinstance(other, ndarray):
            if len(other.shape) != 1:
                raise ValueError("Provide an 1D NumPy array")
            vec_size = other.shape[0]
            if vec_size != self.size(1):
                raise ValueError("Provide a NumPy array with length %d"%self.size(1))
            vec_type = _matrix_vector_mul_map[get_tensor_type(self)][0]
            vec = vec_type()
            vec.init(vec_size)
            vec.set_local(other)
            vec.apply("insert")
            result_vec = vec.copy()
            self.mult(vec, result_vec)
    #ret = other.copy()
    #result_vec.get_local(ret)
    #return ret
            return result_vec.get_local()
        return NotImplemented

    def __truediv__(self,other):
        """x.__truediv__(y) <==> x/y"""
        from numpy import isscalar
        if isscalar(other):
            ret = self.copy()
            ret._scale(1.0/other)
            return ret
        return NotImplemented

    def __radd__(self,other):
        """x.__radd__(y) <==> y+x"""
        return self.__add__(other)

    def __rsub__(self, other):
        """x.__rsub__(y) <==> y-x"""
        ret = self.__sub__(other)
        ret.__imul__(-1.0)
        return ret

    def __rmul__(self,other):
        """x.__rmul__(y) <==> y*x"""
        from numpy import isscalar
        if isscalar(other):
            ret = self.copy()
            ret._scale(other)
            return ret
        return NotImplemented

    def __rtruediv__(self,other):
        """x.__rtruediv__(y) <==> y/x"""
        return NotImplemented

    def __iadd__(self,other):
        """x.__iadd__(y) <==> x+y"""
        if self.__is_compatible(other):
            self.axpy(1.0, other, False)
            return self
        return NotImplemented

    def __isub__(self,other):
        """x.__isub__(y) <==> x-y"""
        if self.__is_compatible(other):
            self.axpy(-1.0, other, False)
            return self
        return NotImplemented

    def __imul__(self,other):
        """x.__imul__(y) <==> x*y"""
        from numpy import isscalar
        if isscalar(other):
            self._scale(other)
            return self
        return NotImplemented

    def __itruediv__(self,other):
        """x.__itruediv__(y) <==> x/y"""
        from numpy import isscalar
        if isscalar(other):
            self._scale(1.0 / other)
            return self
        return NotImplemented

    import sys
    if sys.version_info[0] == 2:
        __div__ = __truediv__
        __rdiv__ = __rtruediv__
        __idiv__ = __itruediv__
    del sys

GenericMatrix.nnz = new_instancemethod(_la.GenericMatrix_nnz, None, GenericMatrix)
GenericMatrix.copy = new_instancemethod(_la.GenericMatrix_copy, None, GenericMatrix)
GenericMatrix.init_vector = new_instancemethod(_la.GenericMatrix_init_vector, None, GenericMatrix)
GenericMatrix.get = new_instancemethod(_la.GenericMatrix_get, None, GenericMatrix)
GenericMatrix.set = new_instancemethod(_la.GenericMatrix_set, None, GenericMatrix)
GenericMatrix.set_local = new_instancemethod(_la.GenericMatrix_set_local, None, GenericMatrix)
GenericMatrix.add = new_instancemethod(_la.GenericMatrix_add, None, GenericMatrix)
GenericMatrix.add_local = new_instancemethod(_la.GenericMatrix_add_local, None, GenericMatrix)
GenericMatrix.axpy = new_instancemethod(_la.GenericMatrix_axpy, None, GenericMatrix)
GenericMatrix.norm = new_instancemethod(_la.GenericMatrix_norm, None, GenericMatrix)
GenericMatrix.getrow = new_instancemethod(_la.GenericMatrix_getrow, None, GenericMatrix)
GenericMatrix.setrow = new_instancemethod(_la.GenericMatrix_setrow, None, GenericMatrix)
GenericMatrix.zero = new_instancemethod(_la.GenericMatrix_zero, None, GenericMatrix)
GenericMatrix.zero_local = new_instancemethod(_la.GenericMatrix_zero_local, None, GenericMatrix)
GenericMatrix.ident = new_instancemethod(_la.GenericMatrix_ident, None, GenericMatrix)
GenericMatrix.ident_local = new_instancemethod(_la.GenericMatrix_ident_local, None, GenericMatrix)
GenericMatrix.transpmult = new_instancemethod(_la.GenericMatrix_transpmult, None, GenericMatrix)
GenericMatrix.get_diagonal = new_instancemethod(_la.GenericMatrix_get_diagonal, None, GenericMatrix)
GenericMatrix.set_diagonal = new_instancemethod(_la.GenericMatrix_set_diagonal, None, GenericMatrix)
GenericMatrix.is_symmetric = new_instancemethod(_la.GenericMatrix_is_symmetric, None, GenericMatrix)
GenericMatrix.assign = new_instancemethod(_la.GenericMatrix_assign, None, GenericMatrix)
GenericMatrix.ident_zeros = new_instancemethod(_la.GenericMatrix_ident_zeros, None, GenericMatrix)
GenericMatrix._scale = new_instancemethod(_la.GenericMatrix__scale, None, GenericMatrix)
GenericMatrix_swigregister = _la.GenericMatrix_swigregister
GenericMatrix_swigregister(GenericMatrix)

class GenericVector(GenericTensor):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _la.delete_GenericVector

    def copy(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector_copy(self)


    def init(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector_init(self, *args)


    def size(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector_size(self, *args)


    def local_size(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector_local_size(self)


    def local_range(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector_local_range(self, *args)


    def owns_index(self, i):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector_owns_index(self, i)


    def add(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector_add(self, *args)


    def get_local(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector_get_local(self, *args)


    def set_local(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector_set_local(self, *args)


    def add_local(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector_add_local(self, *args)


    def gather(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector_gather(self, *args)


    def gather_on_zero(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector_gather_on_zero(self)


    def axpy(self, a, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector_axpy(self, a, x)


    def abs(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector_abs(self)


    def inner(self, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector_inner(self, x)


    def norm(self, norm_type):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector_norm(self, norm_type)


    def min(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector_min(self)


    def max(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector_max(self)


    def sum(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector_sum(self, *args)


    def _assign(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericVector__assign(self, *args)


    def _scale(self, a):
        """Missing docstring"""
        return _la.GenericVector__scale(self, a)


    def _vec_mul(self, other):
        """Missing docstring"""
        return _la.GenericVector__vec_mul(self, other)


    def __in_parallel(self):
        first, last = self.local_range()
        return first > 0 or len(self) > last

    def __is_compatible(self, other):
        "Returns True if self, and other are compatible Vectors"
        if not isinstance(other, GenericVector):
            return False
        self_type = get_tensor_type(self)
        return self_type == get_tensor_type(other)

    def array(self):
        "Return a numpy array representation of the local part of a Vector"
        return self.get_local()

    def __contains__(self, value):
        from numpy import isscalar
        if isscalar(value):
            return value in self.get_local()
        return NotImplemented

    def __gt__(self, value):
        from numpy import isscalar
        if isscalar(value):
            return self.get_local() > value
        if isinstance(value, GenericVector):
            return self.get_local() > value.get_local()
        return NotImplemented

    def __ge__(self, value):
        from numpy import isscalar
        if isscalar(value):
            return self.get_local() >= value
        if isinstance(value, GenericVector):
            return self.get_local() >= value.get_local()
        return NotImplemented

    def __lt__(self, value):
        from numpy import isscalar
        if isscalar(value):
            return self.get_local() < value
        if isinstance(value, GenericVector):
            return self.get_local() < value.get_local()
        return NotImplemented

    def __le__(self, value):
        from numpy import isscalar
        if isscalar(value):
            return self.get_local() <= value
        if isinstance(value, GenericVector):
            return self.get_local() <= value.get_local()
        return NotImplemented

    def __eq__(self, value):
        from numpy import isscalar
        if isscalar(value):
            return self.get_local() == value
        if isinstance(value, GenericVector):
            return self.get_local() == value.get_local()
        return NotImplemented

    def __neq__(self, value):
        from numpy import isscalar
        if isscalar(value):
            return self.get_local() != value
        if isinstance(value, GenericVector):
            return self.get_local() != value.get_local()
        return NotImplemented

    def __neg__(self):
        ret = self.copy()
        ret *= -1
        return ret

    def __delitem__(self,i):
        raise ValueError("cannot delete Vector elements")

    def __delslice__(self,i,j):
        raise ValueError("cannot delete Vector elements")

    def __setslice__(self, i, j, values):
        from numpy import ndarray, arange
        if i == 0 and (j >= len(self) or j == -1): # slice == whole
            from numpy import isscalar
    # No test for equal lengths because this is checked by DOLFIN in _assign
            if isinstance(values, GenericVector) or isscalar(values):
                self._assign(values)
                return
            elif isinstance(values, ndarray):
                indices = arange(self.local_size(), dtype=la_index_dtype())
                self[indices] = values
                return

        raise IndexError("can only set full slices v[:]")

    def __getslice__(self, i, j):
        if i == 0 and (j >= len(self) or j == -1):
            return self.copy()
        raise IndexError("can only return full slices v[:]")

    def _check_indices(self, indices):
        from numpy import asarray, ndarray

    # Only accpect list and ndarrays
        if not isinstance(indices, (ndarray, list)):
            raise TypeError("expected an int or a list or numpy array of "\
                            "integers or a boolean numpy array as indices.")

    # If boolean array
        elif isinstance(indices, ndarray) and indices.dtype==bool:
            indices = indices.nonzero()[0]

    # Convert to correct indextypes
        if isinstance(indices, ndarray):

    # For some obscure reason we need to compare the char
    # attribute of the dtype to be able to differentiate
    # between correct dtypes. And to get the char attribute we
    # need to instantiate the bloody dtype and then access the
    # fraking dtype of the dtype, which can be asked for its
    # char...
            if indices.dtype.char != la_index_dtype()().dtype.char:
                indices = indices.astype(la_index_dtype())
        else:
            indices = asarray(indices, dtype=la_index_dtype())

    # Check range
    # FIXME: What should local_size mean?
        if not ((0<=indices).all() and (indices<self.local_size()).all()):
            raise IndexError("expected indices to be in [0..{}]".format(\
                self.local_size()))

        return indices

    def __getitem__(self, indices):
        """Return values corresponding to the given local indices"""
        from numpy import ndarray, integer, long, array, zeros, float_

    # If indices is a slice
        if isinstance(indices, slice):
            if not (indices.start is None and indices.stop is None and \
                    indices.step is None):
                raise IndexError("can only return full slices v[:]")
            return self.__getslice__(0, len(self))

        elif isinstance(indices, (int, integer, long)):
            indices = array([indices], dtype=la_index_dtype())

        indices = self._check_indices(indices)

        values = zeros(len(indices), dtype=float_)
        if len(values)>0:
            self.get_local(values, indices)
        return values

    def __setitem__(self, indices, values):
        """Set values corresponding to the given local indices

        This method is collective and user need to take care when this
        method is called, preventing MPI-deadlocks.
        """
        from numpy import asarray, ndarray, array, integer, isscalar, long, float_, ones
        try:

    # If indices is a slice
            if isinstance(indices, slice):
                if not (indices.start is None and indices.stop is None and \
                        indices.step is None):
                    raise IndexError("can only set full slices v[:]")
                self.__setslice__(0, len(self), values)
                return

    # If indices is a single integer
            elif isinstance(indices, (int, integer, long)):
                if isscalar(values):
                    indices = array([indices], dtype=la_index_dtype())
                else:
                    raise TypeError("provide a scalar to set single item")

    # Check indices
            indices = self._check_indices(indices)

    # Check passed values and convert scalar to ndarray of that value
            if isscalar(values):
                vec_values = ones(len(indices), dtype=float_)
                vec_values *= values
                values = vec_values

            elif isinstance(values, GenericVector):
                values = values.get_local()

            elif isinstance(values, ndarray):
                values = asarray(values, dtype=float_)

            else:
                raise TypeError("provide a scalar, GenericVector or numpy array of "\
                                "float to set items in Vector")

            if len(values) != len(indices):
                raise IndexError("expected same size of indices and values")

    # If values passed.
            if len(values) > 0:
                self.set_local(values, indices)

        finally:
    # Always call apply insert to avoid MPI dead locks if one or more
    # ranks fails
            self.apply("insert")

    def __len__(self):
        return self.size()

    def __iter__(self):
        for i in range(self.size()):
            yield self[i]

    def __add__(self, other):
        """x.__add__(y) <==> x+y"""
        from numpy import isscalar
        if isscalar(other):
            ret = self.copy()
            ret._iadd_scalar(other)
            return ret
        elif self.__is_compatible(other):
            ret = self.copy()
            ret.axpy(1.0, other)
            return ret
        return NotImplemented

    def __sub__(self, other):
        """x.__sub__(y) <==> x-y"""
        from numpy import isscalar
        if isscalar(other):
            ret = self.copy()
            ret._iadd_scalar(-other)
            return ret
        elif self.__is_compatible(other):
            ret = self.copy()
            ret.axpy(-1.0, other)
            return ret
        return NotImplemented

    def __mul__(self, other):
        """x.__mul__(y) <==> x*y"""
        from numpy import isscalar
        if isscalar(other):
            ret = self.copy()
            ret._scale(other)
            return ret
        if isinstance(other,GenericVector):
            ret = self.copy()
            ret._vec_mul(other)
            return ret
        return NotImplemented

    def __truediv__(self,other):
        """x.__truediv__(y) <==> x/y"""
        from numpy import isscalar
        if isscalar(other):
            ret = self.copy()
            ret._scale(1.0 / other)
            return ret
        return NotImplemented

    def __radd__(self,other):
        """x.__radd__(y) <==> y+x"""
        return self.__add__(other)

    def __rsub__(self, other):
        """x.__rsub__(y) <==> y-x"""
        ret = self.__sub__(other)
        ret.__imul__(-1.0)
        return ret

    def __rmul__(self, other):
        """x.__rmul__(y) <==> y*x"""
        from numpy import isscalar
        if isscalar(other):
            ret = self.copy()
            ret._scale(other)
            return ret
        return NotImplemented

    def __rtruediv__(self, other):
        """x.__rtruediv__(y) <==> y/x"""
        return NotImplemented

    def __iadd__(self, other):
        """x.__iadd__(y) <==> x+y"""
        from numpy import isscalar
        if isscalar(other):
            self._iadd_scalar(other)
            return self
        elif self.__is_compatible(other):
            self.axpy(1.0, other)
            return self
        return NotImplemented

    def __isub__(self, other):
        """x.__isub__(y) <==> x-y"""
        from numpy import isscalar
        if isscalar(other):
            self._iadd_scalar(-other)
            return self
        elif self.__is_compatible(other):
            self.axpy(-1.0, other)
            return self
        return NotImplemented

    def __imul__(self, other):
        """x.__imul__(y) <==> x*y"""
        from numpy import isscalar
        if isscalar(other):
            self._scale(other)
            return self
        if isinstance(other, GenericVector):
            self._vec_mul(other)
            return self
        return NotImplemented

    def __itruediv__(self, other):
        """x.__itruediv__(y) <==> x/y"""
        from numpy import isscalar
        if isscalar(other):
            self._scale(1.0 / other)
            return self
        return NotImplemented

    def __iter__(self):
        return iter(self.array())

    import sys
    if sys.version_info[0] == 2:
        __div__ = __truediv__
        __rdiv__ = __rtruediv__
        __idiv__ = __itruediv__
    del sys

GenericVector.copy = new_instancemethod(_la.GenericVector_copy, None, GenericVector)
GenericVector.init = new_instancemethod(_la.GenericVector_init, None, GenericVector)
GenericVector.size = new_instancemethod(_la.GenericVector_size, None, GenericVector)
GenericVector.local_size = new_instancemethod(_la.GenericVector_local_size, None, GenericVector)
GenericVector.local_range = new_instancemethod(_la.GenericVector_local_range, None, GenericVector)
GenericVector.owns_index = new_instancemethod(_la.GenericVector_owns_index, None, GenericVector)
GenericVector.add = new_instancemethod(_la.GenericVector_add, None, GenericVector)
GenericVector.get_local = new_instancemethod(_la.GenericVector_get_local, None, GenericVector)
GenericVector.set_local = new_instancemethod(_la.GenericVector_set_local, None, GenericVector)
GenericVector.add_local = new_instancemethod(_la.GenericVector_add_local, None, GenericVector)
GenericVector.gather = new_instancemethod(_la.GenericVector_gather, None, GenericVector)
GenericVector.gather_on_zero = new_instancemethod(_la.GenericVector_gather_on_zero, None, GenericVector)
GenericVector.axpy = new_instancemethod(_la.GenericVector_axpy, None, GenericVector)
GenericVector.abs = new_instancemethod(_la.GenericVector_abs, None, GenericVector)
GenericVector.inner = new_instancemethod(_la.GenericVector_inner, None, GenericVector)
GenericVector.norm = new_instancemethod(_la.GenericVector_norm, None, GenericVector)
GenericVector.min = new_instancemethod(_la.GenericVector_min, None, GenericVector)
GenericVector.max = new_instancemethod(_la.GenericVector_max, None, GenericVector)
GenericVector.sum = new_instancemethod(_la.GenericVector_sum, None, GenericVector)
GenericVector._assign = new_instancemethod(_la.GenericVector__assign, None, GenericVector)
GenericVector._iadd_scalar = new_instancemethod(_la.GenericVector__iadd_scalar, None, GenericVector)
GenericVector._scale = new_instancemethod(_la.GenericVector__scale, None, GenericVector)
GenericVector._vec_mul = new_instancemethod(_la.GenericVector__vec_mul, None, GenericVector)
GenericVector_swigregister = _la.GenericVector_swigregister
GenericVector_swigregister(GenericVector)

class VectorSpaceBasis(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, basis):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.VectorSpaceBasis_swiginit(self, _la.new_VectorSpaceBasis(basis))
    __swig_destroy__ = _la.delete_VectorSpaceBasis

    def orthonormalize(self, tol=1.0e-10):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.VectorSpaceBasis_orthonormalize(self, tol)


    def is_orthonormal(self, tol=1.0e-10):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.VectorSpaceBasis_is_orthonormal(self, tol)


    def is_orthogonal(self, tol=1.0e-10):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.VectorSpaceBasis_is_orthogonal(self, tol)


    def orthogonalize(self, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.VectorSpaceBasis_orthogonalize(self, x)


    def dim(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.VectorSpaceBasis_dim(self)


    def _sub(self, i):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.VectorSpaceBasis__sub(self, i)

VectorSpaceBasis.orthonormalize = new_instancemethod(_la.VectorSpaceBasis_orthonormalize, None, VectorSpaceBasis)
VectorSpaceBasis.is_orthonormal = new_instancemethod(_la.VectorSpaceBasis_is_orthonormal, None, VectorSpaceBasis)
VectorSpaceBasis.is_orthogonal = new_instancemethod(_la.VectorSpaceBasis_is_orthogonal, None, VectorSpaceBasis)
VectorSpaceBasis.orthogonalize = new_instancemethod(_la.VectorSpaceBasis_orthogonalize, None, VectorSpaceBasis)
VectorSpaceBasis.dim = new_instancemethod(_la.VectorSpaceBasis_dim, None, VectorSpaceBasis)
VectorSpaceBasis._sub = new_instancemethod(_la.VectorSpaceBasis__sub, None, VectorSpaceBasis)
VectorSpaceBasis_swigregister = _la.VectorSpaceBasis_swigregister
VectorSpaceBasis_swigregister(VectorSpaceBasis)

class GenericLinearSolver(common.Variable):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def set_operator(self, A):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericLinearSolver_set_operator(self, A)


    def set_operators(self, A, P):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericLinearSolver_set_operators(self, A, P)


    def solve(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericLinearSolver_solve(self, *args)


    def parameter_type(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericLinearSolver_parameter_type(self)


    def update_parameters(self, parameters):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericLinearSolver_update_parameters(self, parameters)

    __swig_destroy__ = _la.delete_GenericLinearSolver
GenericLinearSolver.set_operator = new_instancemethod(_la.GenericLinearSolver_set_operator, None, GenericLinearSolver)
GenericLinearSolver.set_operators = new_instancemethod(_la.GenericLinearSolver_set_operators, None, GenericLinearSolver)
GenericLinearSolver.solve = new_instancemethod(_la.GenericLinearSolver_solve, None, GenericLinearSolver)
GenericLinearSolver.parameter_type = new_instancemethod(_la.GenericLinearSolver_parameter_type, None, GenericLinearSolver)
GenericLinearSolver.update_parameters = new_instancemethod(_la.GenericLinearSolver_update_parameters, None, GenericLinearSolver)
GenericLinearSolver_swigregister = _la.GenericLinearSolver_swigregister
GenericLinearSolver_swigregister(GenericLinearSolver)

class PETScOptions(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def set(*args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScOptions_set(*args)

    set = staticmethod(set)

    def clear(*args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScOptions_clear(*args)

    clear = staticmethod(clear)

    def __init__(self):
        _la.PETScOptions_swiginit(self, _la.new_PETScOptions())
    __swig_destroy__ = _la.delete_PETScOptions
PETScOptions_swigregister = _la.PETScOptions_swigregister
PETScOptions_swigregister(PETScOptions)

def PETScOptions_set(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.PETScOptions_set(*args)

def PETScOptions_clear(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.PETScOptions_clear(*args)

class PETScObject(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.PETScObject_swiginit(self, _la.new_PETScObject())
    __swig_destroy__ = _la.delete_PETScObject

    def petsc_error(error_code, filename, petsc_function):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScObject_petsc_error(error_code, filename, petsc_function)

    petsc_error = staticmethod(petsc_error)
PETScObject_swigregister = _la.PETScObject_swigregister
PETScObject_swigregister(PETScObject)

def PETScObject_petsc_error(error_code, filename, petsc_function):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.PETScObject_petsc_error(error_code, filename, petsc_function)

class PETScBaseMatrix(PETScObject, common.Variable):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.PETScBaseMatrix_swiginit(self, _la.new_PETScBaseMatrix(*args))
    __swig_destroy__ = _la.delete_PETScBaseMatrix

    def size(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScBaseMatrix_size(self, *args)


    def local_range(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScBaseMatrix_local_range(self, dim)


    def init_vector(self, z, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScBaseMatrix_init_vector(self, z, dim)


    def mpi_comm(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScBaseMatrix_mpi_comm(self)


    def mat(self):
        """Return petsc4py representation of PETSc Mat"""
        return _la.PETScBaseMatrix_mat(self)

PETScBaseMatrix.size = new_instancemethod(_la.PETScBaseMatrix_size, None, PETScBaseMatrix)
PETScBaseMatrix.local_range = new_instancemethod(_la.PETScBaseMatrix_local_range, None, PETScBaseMatrix)
PETScBaseMatrix.init_vector = new_instancemethod(_la.PETScBaseMatrix_init_vector, None, PETScBaseMatrix)
PETScBaseMatrix.mpi_comm = new_instancemethod(_la.PETScBaseMatrix_mpi_comm, None, PETScBaseMatrix)
PETScBaseMatrix.mat = new_instancemethod(_la.PETScBaseMatrix_mat, None, PETScBaseMatrix)
PETScBaseMatrix_swigregister = _la.PETScBaseMatrix_swigregister
PETScBaseMatrix_swigregister(PETScBaseMatrix)

class EigenMatrix(GenericMatrix):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.EigenMatrix_swiginit(self, _la.new_EigenMatrix(*args))
    __swig_destroy__ = _la.delete_EigenMatrix

    def resize(self, M, N):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenMatrix_resize(self, M, N)


    def zero(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenMatrix_zero(self, *args)


    def mat(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenMatrix_mat(self, *args)


    def compress(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenMatrix_compress(self)


    def assign(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenMatrix_assign(self, *args)


    def _data(self):
        """Missing docstring"""
        return _la.EigenMatrix__data(self)


    def data(self, deepcopy=True):
        """
        Return arrays to underlaying compresssed row/column storage data

        This method is only available for the Eigen linear algebra backend.

        *Arguments*
            deepcopy
                Return a copy of the data. If set to False a reference
                to the Matrix need to be kept, otherwise the data will be
                destroyed together with the destruction of the Matrix
        """
        rows, cols, values = self._data()
        if deepcopy:
            rows, cols, values = rows.astype(int), cols.astype(int), values.copy()
        else:
            _attach_base_to_numpy_array(rows, self)
            _attach_base_to_numpy_array(cols, self)
            _attach_base_to_numpy_array(values, self)

        return rows, cols, values

    def sparray(self):
        "Return a scipy.sparse representation of Matrix"
        from scipy.sparse import csr_matrix
        data = self.data(deepcopy=True)
        C = csr_matrix((data[2], data[1], data[0]))
        return C

EigenMatrix.resize = new_instancemethod(_la.EigenMatrix_resize, None, EigenMatrix)
EigenMatrix.zero = new_instancemethod(_la.EigenMatrix_zero, None, EigenMatrix)
EigenMatrix.mat = new_instancemethod(_la.EigenMatrix_mat, None, EigenMatrix)
EigenMatrix.compress = new_instancemethod(_la.EigenMatrix_compress, None, EigenMatrix)
EigenMatrix.assign = new_instancemethod(_la.EigenMatrix_assign, None, EigenMatrix)
EigenMatrix._data = new_instancemethod(_la.EigenMatrix__data, None, EigenMatrix)
EigenMatrix_swigregister = _la.EigenMatrix_swigregister
EigenMatrix_swigregister(EigenMatrix)

class PETScMatrix(GenericMatrix, PETScBaseMatrix):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.PETScMatrix_swiginit(self, _la.new_PETScMatrix(*args))
    __swig_destroy__ = _la.delete_PETScMatrix

    def mpi_comm(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScMatrix_mpi_comm(self)


    def zero(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScMatrix_zero(self, *args)


    def set_options_prefix(self, options_prefix):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScMatrix_set_options_prefix(self, options_prefix)


    def get_options_prefix(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScMatrix_get_options_prefix(self)


    def set_from_options(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScMatrix_set_from_options(self)


    def assign(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScMatrix_assign(self, *args)


    def set_nullspace(self, nullspace):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScMatrix_set_nullspace(self, nullspace)


    def set_near_nullspace(self, nullspace):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScMatrix_set_near_nullspace(self, nullspace)


    def binary_dump(self, file_name):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScMatrix_binary_dump(self, file_name)

PETScMatrix.mpi_comm = new_instancemethod(_la.PETScMatrix_mpi_comm, None, PETScMatrix)
PETScMatrix.zero = new_instancemethod(_la.PETScMatrix_zero, None, PETScMatrix)
PETScMatrix.set_options_prefix = new_instancemethod(_la.PETScMatrix_set_options_prefix, None, PETScMatrix)
PETScMatrix.get_options_prefix = new_instancemethod(_la.PETScMatrix_get_options_prefix, None, PETScMatrix)
PETScMatrix.set_from_options = new_instancemethod(_la.PETScMatrix_set_from_options, None, PETScMatrix)
PETScMatrix.assign = new_instancemethod(_la.PETScMatrix_assign, None, PETScMatrix)
PETScMatrix.set_nullspace = new_instancemethod(_la.PETScMatrix_set_nullspace, None, PETScMatrix)
PETScMatrix.set_near_nullspace = new_instancemethod(_la.PETScMatrix_set_near_nullspace, None, PETScMatrix)
PETScMatrix.binary_dump = new_instancemethod(_la.PETScMatrix_binary_dump, None, PETScMatrix)
PETScMatrix_swigregister = _la.PETScMatrix_swigregister
PETScMatrix_swigregister(PETScMatrix)

class PETScLinearOperator(PETScBaseMatrix, GenericLinearOperator):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, comm):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        if self.__class__ == PETScLinearOperator:
            _self = None
        else:
            _self = self
        _la.PETScLinearOperator_swiginit(self, _la.new_PETScLinearOperator(_self, comm))

    def size(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScLinearOperator_size(self, dim)


    def mult(self, x, y):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScLinearOperator_mult(self, x, y)


    def mpi_comm(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScLinearOperator_mpi_comm(self)


    def init_layout(self, x, y, wrapper):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScLinearOperator_init_layout(self, x, y, wrapper)

    __swig_destroy__ = _la.delete_PETScLinearOperator
    def __disown__(self):
        self.this.disown()
        _la.disown_PETScLinearOperator(self)
        return weakref_proxy(self)
PETScLinearOperator.size = new_instancemethod(_la.PETScLinearOperator_size, None, PETScLinearOperator)
PETScLinearOperator.mult = new_instancemethod(_la.PETScLinearOperator_mult, None, PETScLinearOperator)
PETScLinearOperator.mpi_comm = new_instancemethod(_la.PETScLinearOperator_mpi_comm, None, PETScLinearOperator)
PETScLinearOperator.init_layout = new_instancemethod(_la.PETScLinearOperator_init_layout, None, PETScLinearOperator)
PETScLinearOperator_swigregister = _la.PETScLinearOperator_swigregister
PETScLinearOperator_swigregister(PETScLinearOperator)

class PETScPreconditioner(PETScObject, common.Variable):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def set_type(solver, type):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScPreconditioner_set_type(solver, type)

    set_type = staticmethod(set_type)

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.PETScPreconditioner_swiginit(self, _la.new_PETScPreconditioner(*args))
    __swig_destroy__ = _la.delete_PETScPreconditioner

    def set(self, solver):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScPreconditioner_set(self, solver)


    def set_coordinates(self, x, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScPreconditioner_set_coordinates(self, x, dim)


    def set_fieldsplit(self, solver, fields, split_names):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScPreconditioner_set_fieldsplit(self, solver, fields, split_names)


    def preconditioners():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScPreconditioner_preconditioners()

    preconditioners = staticmethod(preconditioners)
PETScPreconditioner.set = new_instancemethod(_la.PETScPreconditioner_set, None, PETScPreconditioner)
PETScPreconditioner.set_coordinates = new_instancemethod(_la.PETScPreconditioner_set_coordinates, None, PETScPreconditioner)
PETScPreconditioner.set_fieldsplit = new_instancemethod(_la.PETScPreconditioner_set_fieldsplit, None, PETScPreconditioner)
PETScPreconditioner_swigregister = _la.PETScPreconditioner_swigregister
PETScPreconditioner_swigregister(PETScPreconditioner)

def PETScPreconditioner_set_type(solver, type):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.PETScPreconditioner_set_type(solver, type)

def PETScPreconditioner_preconditioners():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.PETScPreconditioner_preconditioners()

class EigenKrylovSolver(GenericLinearSolver):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.EigenKrylovSolver_swiginit(self, _la.new_EigenKrylovSolver(*args))
    __swig_destroy__ = _la.delete_EigenKrylovSolver

    def set_operator(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenKrylovSolver_set_operator(self, *args)


    def set_operators(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenKrylovSolver_set_operators(self, *args)


    def get_operator(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenKrylovSolver_get_operator(self)


    def solve(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenKrylovSolver_solve(self, *args)


    def methods():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenKrylovSolver_methods()

    methods = staticmethod(methods)

    def preconditioners():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenKrylovSolver_preconditioners()

    preconditioners = staticmethod(preconditioners)

    def default_parameters():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenKrylovSolver_default_parameters()

    default_parameters = staticmethod(default_parameters)
EigenKrylovSolver.set_operator = new_instancemethod(_la.EigenKrylovSolver_set_operator, None, EigenKrylovSolver)
EigenKrylovSolver.set_operators = new_instancemethod(_la.EigenKrylovSolver_set_operators, None, EigenKrylovSolver)
EigenKrylovSolver.get_operator = new_instancemethod(_la.EigenKrylovSolver_get_operator, None, EigenKrylovSolver)
EigenKrylovSolver.solve = new_instancemethod(_la.EigenKrylovSolver_solve, None, EigenKrylovSolver)
EigenKrylovSolver_swigregister = _la.EigenKrylovSolver_swigregister
EigenKrylovSolver_swigregister(EigenKrylovSolver)

def EigenKrylovSolver_methods():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.EigenKrylovSolver_methods()

def EigenKrylovSolver_preconditioners():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.EigenKrylovSolver_preconditioners()

def EigenKrylovSolver_default_parameters():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.EigenKrylovSolver_default_parameters()

class EigenLUSolver(GenericLinearSolver):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.EigenLUSolver_swiginit(self, _la.new_EigenLUSolver(*args))
    __swig_destroy__ = _la.delete_EigenLUSolver

    def set_operator(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenLUSolver_set_operator(self, *args)


    def get_operator(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenLUSolver_get_operator(self)


    def solve(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenLUSolver_solve(self, *args)


    def methods():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenLUSolver_methods()

    methods = staticmethod(methods)

    def default_parameters():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenLUSolver_default_parameters()

    default_parameters = staticmethod(default_parameters)
EigenLUSolver.set_operator = new_instancemethod(_la.EigenLUSolver_set_operator, None, EigenLUSolver)
EigenLUSolver.get_operator = new_instancemethod(_la.EigenLUSolver_get_operator, None, EigenLUSolver)
EigenLUSolver.solve = new_instancemethod(_la.EigenLUSolver_solve, None, EigenLUSolver)
EigenLUSolver_swigregister = _la.EigenLUSolver_swigregister
EigenLUSolver_swigregister(EigenLUSolver)

def EigenLUSolver_methods():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.EigenLUSolver_methods()

def EigenLUSolver_default_parameters():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.EigenLUSolver_default_parameters()

class PETScKrylovSolver(GenericLinearSolver, PETScObject):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    norm_type_none = _la.PETScKrylovSolver_norm_type_none
    norm_type_default_norm = _la.PETScKrylovSolver_norm_type_default_norm
    norm_type_preconditioned = _la.PETScKrylovSolver_norm_type_preconditioned
    norm_type_unpreconditioned = _la.PETScKrylovSolver_norm_type_unpreconditioned
    norm_type_natural = _la.PETScKrylovSolver_norm_type_natural

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.PETScKrylovSolver_swiginit(self, _la.new_PETScKrylovSolver(*args))
    __swig_destroy__ = _la.delete_PETScKrylovSolver

    def set_operator(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScKrylovSolver_set_operator(self, *args)


    def set_operators(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScKrylovSolver_set_operators(self, *args)


    def solve(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScKrylovSolver_solve(self, *args)


    def set_nonzero_guess(self, nonzero_guess):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScKrylovSolver_set_nonzero_guess(self, nonzero_guess)


    def set_reuse_preconditioner(self, reuse_pc):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScKrylovSolver_set_reuse_preconditioner(self, reuse_pc)


    def set_tolerances(self, relative, absolute, diverged, max_iter):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScKrylovSolver_set_tolerances(self, relative, absolute, diverged, max_iter)


    def set_norm_type(self, type):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScKrylovSolver_set_norm_type(self, type)


    def get_norm_type(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScKrylovSolver_get_norm_type(self)


    def monitor(self, monitor_convergence):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScKrylovSolver_monitor(self, monitor_convergence)


    def set_options_prefix(self, options_prefix):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScKrylovSolver_set_options_prefix(self, options_prefix)


    def get_options_prefix(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScKrylovSolver_get_options_prefix(self)


    def set_from_options(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScKrylovSolver_set_from_options(self)


    def mpi_comm(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScKrylovSolver_mpi_comm(self)


    def methods():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScKrylovSolver_methods()

    methods = staticmethod(methods)

    def preconditioners():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScKrylovSolver_preconditioners()

    preconditioners = staticmethod(preconditioners)

    def default_parameters():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScKrylovSolver_default_parameters()

    default_parameters = staticmethod(default_parameters)

    def set_dm(self, dm):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScKrylovSolver_set_dm(self, dm)


    def set_dm_active(self, val):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScKrylovSolver_set_dm_active(self, val)


    def ksp(self):
        """Return petsc4py representation of PETSc KSP solver"""
        return _la.PETScKrylovSolver_ksp(self)

PETScKrylovSolver.set_operator = new_instancemethod(_la.PETScKrylovSolver_set_operator, None, PETScKrylovSolver)
PETScKrylovSolver.set_operators = new_instancemethod(_la.PETScKrylovSolver_set_operators, None, PETScKrylovSolver)
PETScKrylovSolver.solve = new_instancemethod(_la.PETScKrylovSolver_solve, None, PETScKrylovSolver)
PETScKrylovSolver.set_nonzero_guess = new_instancemethod(_la.PETScKrylovSolver_set_nonzero_guess, None, PETScKrylovSolver)
PETScKrylovSolver.set_reuse_preconditioner = new_instancemethod(_la.PETScKrylovSolver_set_reuse_preconditioner, None, PETScKrylovSolver)
PETScKrylovSolver.set_tolerances = new_instancemethod(_la.PETScKrylovSolver_set_tolerances, None, PETScKrylovSolver)
PETScKrylovSolver.set_norm_type = new_instancemethod(_la.PETScKrylovSolver_set_norm_type, None, PETScKrylovSolver)
PETScKrylovSolver.get_norm_type = new_instancemethod(_la.PETScKrylovSolver_get_norm_type, None, PETScKrylovSolver)
PETScKrylovSolver.monitor = new_instancemethod(_la.PETScKrylovSolver_monitor, None, PETScKrylovSolver)
PETScKrylovSolver.set_options_prefix = new_instancemethod(_la.PETScKrylovSolver_set_options_prefix, None, PETScKrylovSolver)
PETScKrylovSolver.get_options_prefix = new_instancemethod(_la.PETScKrylovSolver_get_options_prefix, None, PETScKrylovSolver)
PETScKrylovSolver.set_from_options = new_instancemethod(_la.PETScKrylovSolver_set_from_options, None, PETScKrylovSolver)
PETScKrylovSolver.mpi_comm = new_instancemethod(_la.PETScKrylovSolver_mpi_comm, None, PETScKrylovSolver)
PETScKrylovSolver.set_dm = new_instancemethod(_la.PETScKrylovSolver_set_dm, None, PETScKrylovSolver)
PETScKrylovSolver.set_dm_active = new_instancemethod(_la.PETScKrylovSolver_set_dm_active, None, PETScKrylovSolver)
PETScKrylovSolver.ksp = new_instancemethod(_la.PETScKrylovSolver_ksp, None, PETScKrylovSolver)
PETScKrylovSolver_swigregister = _la.PETScKrylovSolver_swigregister
PETScKrylovSolver_swigregister(PETScKrylovSolver)

def PETScKrylovSolver_methods():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.PETScKrylovSolver_methods()

def PETScKrylovSolver_preconditioners():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.PETScKrylovSolver_preconditioners()

def PETScKrylovSolver_default_parameters():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.PETScKrylovSolver_default_parameters()

class PETScLUSolver(GenericLinearSolver):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.PETScLUSolver_swiginit(self, _la.new_PETScLUSolver(*args))
    __swig_destroy__ = _la.delete_PETScLUSolver

    def set_operator(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScLUSolver_set_operator(self, *args)


    def solve(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScLUSolver_solve(self, *args)


    def set_options_prefix(self, options_prefix):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScLUSolver_set_options_prefix(self, options_prefix)


    def get_options_prefix(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScLUSolver_get_options_prefix(self)


    def set_from_options(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScLUSolver_set_from_options(self)


    def mpi_comm(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScLUSolver_mpi_comm(self)


    def methods():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScLUSolver_methods()

    methods = staticmethod(methods)

    def default_parameters():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScLUSolver_default_parameters()

    default_parameters = staticmethod(default_parameters)

    def ksp(self):
        """Return petsc4py representation of PETSc LU solver"""
        return _la.PETScLUSolver_ksp(self)

PETScLUSolver.set_operator = new_instancemethod(_la.PETScLUSolver_set_operator, None, PETScLUSolver)
PETScLUSolver.solve = new_instancemethod(_la.PETScLUSolver_solve, None, PETScLUSolver)
PETScLUSolver.set_options_prefix = new_instancemethod(_la.PETScLUSolver_set_options_prefix, None, PETScLUSolver)
PETScLUSolver.get_options_prefix = new_instancemethod(_la.PETScLUSolver_get_options_prefix, None, PETScLUSolver)
PETScLUSolver.set_from_options = new_instancemethod(_la.PETScLUSolver_set_from_options, None, PETScLUSolver)
PETScLUSolver.mpi_comm = new_instancemethod(_la.PETScLUSolver_mpi_comm, None, PETScLUSolver)
PETScLUSolver.ksp = new_instancemethod(_la.PETScLUSolver_ksp, None, PETScLUSolver)
PETScLUSolver_swigregister = _la.PETScLUSolver_swigregister
PETScLUSolver_swigregister(PETScLUSolver)

def PETScLUSolver_methods():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.PETScLUSolver_methods()

def PETScLUSolver_default_parameters():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.PETScLUSolver_default_parameters()

class CoordinateMatrix(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, A, symmetric, base_one):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.CoordinateMatrix_swiginit(self, _la.new_CoordinateMatrix(A, symmetric, base_one))
    __swig_destroy__ = _la.delete_CoordinateMatrix

    def size(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.CoordinateMatrix_size(self, dim)


    def rows(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.CoordinateMatrix_rows(self)


    def columns(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.CoordinateMatrix_columns(self)


    def values(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.CoordinateMatrix_values(self)


    def norm(self, norm_type):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.CoordinateMatrix_norm(self, norm_type)


    def mpi_comm(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.CoordinateMatrix_mpi_comm(self)


    def base_one(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.CoordinateMatrix_base_one(self)

CoordinateMatrix.size = new_instancemethod(_la.CoordinateMatrix_size, None, CoordinateMatrix)
CoordinateMatrix.rows = new_instancemethod(_la.CoordinateMatrix_rows, None, CoordinateMatrix)
CoordinateMatrix.columns = new_instancemethod(_la.CoordinateMatrix_columns, None, CoordinateMatrix)
CoordinateMatrix.values = new_instancemethod(_la.CoordinateMatrix_values, None, CoordinateMatrix)
CoordinateMatrix.norm = new_instancemethod(_la.CoordinateMatrix_norm, None, CoordinateMatrix)
CoordinateMatrix.mpi_comm = new_instancemethod(_la.CoordinateMatrix_mpi_comm, None, CoordinateMatrix)
CoordinateMatrix.base_one = new_instancemethod(_la.CoordinateMatrix_base_one, None, CoordinateMatrix)
CoordinateMatrix_swigregister = _la.CoordinateMatrix_swigregister
CoordinateMatrix_swigregister(CoordinateMatrix)

class EigenVector(GenericVector):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.EigenVector_swiginit(self, _la.new_EigenVector(*args))
    __swig_destroy__ = _la.delete_EigenVector

    def init(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenVector_init(self, *args)


    def get_local(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenVector_get_local(self, *args)


    def set_local(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenVector_set_local(self, *args)


    def add_local(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenVector_add_local(self, *args)


    def gather(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenVector_gather(self, *args)


    def sum(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenVector_sum(self, *args)


    def resize(self, N):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenVector_resize(self, N)


    def vec(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenVector_vec(self, *args)


    def _assign(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenVector__assign(self, *args)


    def _data(self):
        """Missing docstring"""
        return _la.EigenVector__data(self)


    def data(self, deepcopy=True):
        """
        Return an array to underlaying data

        This method is only available for the Eigen linear algebra
        backend.

        *Arguments*
            deepcopy
                Return a copy of the data. If set to False a reference
                to the Matrix need to be kept, otherwise the data will be
                destroyed together with the destruction of the Matrix
        """
        ret = self._data()
        if deepcopy:
            ret = ret.copy()
        else:
            _attach_base_to_numpy_array(ret, self)

        return ret

EigenVector.init = new_instancemethod(_la.EigenVector_init, None, EigenVector)
EigenVector.get_local = new_instancemethod(_la.EigenVector_get_local, None, EigenVector)
EigenVector.set_local = new_instancemethod(_la.EigenVector_set_local, None, EigenVector)
EigenVector.add_local = new_instancemethod(_la.EigenVector_add_local, None, EigenVector)
EigenVector.gather = new_instancemethod(_la.EigenVector_gather, None, EigenVector)
EigenVector.sum = new_instancemethod(_la.EigenVector_sum, None, EigenVector)
EigenVector.resize = new_instancemethod(_la.EigenVector_resize, None, EigenVector)
EigenVector.vec = new_instancemethod(_la.EigenVector_vec, None, EigenVector)
EigenVector._assign = new_instancemethod(_la.EigenVector__assign, None, EigenVector)
EigenVector._data = new_instancemethod(_la.EigenVector__data, None, EigenVector)
EigenVector_swigregister = _la.EigenVector_swigregister
EigenVector_swigregister(EigenVector)

class PETScVector(GenericVector, PETScObject):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.PETScVector_swiginit(self, _la.new_PETScVector(*args))
    __swig_destroy__ = _la.delete_PETScVector

    def init(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScVector_init(self, *args)


    def get_local(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScVector_get_local(self, *args)


    def set_local(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScVector_set_local(self, *args)


    def add_local(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScVector_add_local(self, *args)


    def gather(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScVector_gather(self, *args)


    def sum(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScVector_sum(self, *args)


    def update_ghost_values(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScVector_update_ghost_values(self)


    def set_options_prefix(self, options_prefix):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScVector_set_options_prefix(self, options_prefix)


    def get_options_prefix(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScVector_get_options_prefix(self)


    def set_from_options(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScVector_set_from_options(self)


    def _assign(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScVector__assign(self, *args)


    def reset(self, vec):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScVector_reset(self, vec)


    def vec(self):
        """Return petsc4py representation of PETSc Vec"""
        return _la.PETScVector_vec(self)

PETScVector.init = new_instancemethod(_la.PETScVector_init, None, PETScVector)
PETScVector.get_local = new_instancemethod(_la.PETScVector_get_local, None, PETScVector)
PETScVector.set_local = new_instancemethod(_la.PETScVector_set_local, None, PETScVector)
PETScVector.add_local = new_instancemethod(_la.PETScVector_add_local, None, PETScVector)
PETScVector.gather = new_instancemethod(_la.PETScVector_gather, None, PETScVector)
PETScVector.sum = new_instancemethod(_la.PETScVector_sum, None, PETScVector)
PETScVector.update_ghost_values = new_instancemethod(_la.PETScVector_update_ghost_values, None, PETScVector)
PETScVector.set_options_prefix = new_instancemethod(_la.PETScVector_set_options_prefix, None, PETScVector)
PETScVector.get_options_prefix = new_instancemethod(_la.PETScVector_get_options_prefix, None, PETScVector)
PETScVector.set_from_options = new_instancemethod(_la.PETScVector_set_from_options, None, PETScVector)
PETScVector._assign = new_instancemethod(_la.PETScVector__assign, None, PETScVector)
PETScVector.reset = new_instancemethod(_la.PETScVector_reset, None, PETScVector)
PETScVector.vec = new_instancemethod(_la.PETScVector_vec, None, PETScVector)
PETScVector_swigregister = _la.PETScVector_swigregister
PETScVector_swigregister(PETScVector)

class TensorLayout(common.Variable):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Sparsity_SPARSE = _la.TensorLayout_Sparsity_SPARSE
    Sparsity_DENSE = _la.TensorLayout_Sparsity_DENSE
    Ghosts_GHOSTED = _la.TensorLayout_Ghosts_GHOSTED
    Ghosts_UNGHOSTED = _la.TensorLayout_Ghosts_UNGHOSTED

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.TensorLayout_swiginit(self, _la.new_TensorLayout(*args))

    def init(self, mpi_comm, index_maps, ghosted):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.TensorLayout_init(self, mpi_comm, index_maps, ghosted)


    def rank(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.TensorLayout_rank(self)


    def size(self, i):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.TensorLayout_size(self, i)


    def local_range(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.TensorLayout_local_range(self, dim)


    def sparsity_pattern(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.TensorLayout_sparsity_pattern(self, *args)

    primary_dim = _swig_property(_la.TensorLayout_primary_dim_get)

    def mpi_comm(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.TensorLayout_mpi_comm(self)


    def index_map(self, i):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.TensorLayout_index_map(self, i)


    def is_ghosted(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.TensorLayout_is_ghosted(self)

    __swig_destroy__ = _la.delete_TensorLayout
TensorLayout.init = new_instancemethod(_la.TensorLayout_init, None, TensorLayout)
TensorLayout.rank = new_instancemethod(_la.TensorLayout_rank, None, TensorLayout)
TensorLayout.size = new_instancemethod(_la.TensorLayout_size, None, TensorLayout)
TensorLayout.local_range = new_instancemethod(_la.TensorLayout_local_range, None, TensorLayout)
TensorLayout.sparsity_pattern = new_instancemethod(_la.TensorLayout_sparsity_pattern, None, TensorLayout)
TensorLayout.mpi_comm = new_instancemethod(_la.TensorLayout_mpi_comm, None, TensorLayout)
TensorLayout.index_map = new_instancemethod(_la.TensorLayout_index_map, None, TensorLayout)
TensorLayout.is_ghosted = new_instancemethod(_la.TensorLayout_is_ghosted, None, TensorLayout)
TensorLayout_swigregister = _la.TensorLayout_swigregister
TensorLayout_swigregister(TensorLayout)

class SparsityPattern(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Type_sorted = _la.SparsityPattern_Type_sorted
    Type_unsorted = _la.SparsityPattern_Type_unsorted

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.SparsityPattern_swiginit(self, _la.new_SparsityPattern(*args))

    def init(self, mpi_comm, index_maps):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SparsityPattern_init(self, mpi_comm, index_maps)


    def insert_global(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SparsityPattern_insert_global(self, *args)


    def insert_local(self, entries):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SparsityPattern_insert_local(self, entries)


    def insert_full_rows_local(self, rows):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SparsityPattern_insert_full_rows_local(self, rows)


    def rank(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SparsityPattern_rank(self)


    def primary_dim(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SparsityPattern_primary_dim(self)


    def local_range(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SparsityPattern_local_range(self, dim)


    def num_nonzeros(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SparsityPattern_num_nonzeros(self)


    def num_nonzeros_diagonal(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SparsityPattern_num_nonzeros_diagonal(self)


    def num_nonzeros_off_diagonal(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SparsityPattern_num_nonzeros_off_diagonal(self)


    def num_local_nonzeros(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SparsityPattern_num_local_nonzeros(self)


    def apply(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SparsityPattern_apply(self)


    def mpi_comm(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SparsityPattern_mpi_comm(self)


    def str(self, verbose):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SparsityPattern_str(self, verbose)

    __swig_destroy__ = _la.delete_SparsityPattern
SparsityPattern.init = new_instancemethod(_la.SparsityPattern_init, None, SparsityPattern)
SparsityPattern.insert_global = new_instancemethod(_la.SparsityPattern_insert_global, None, SparsityPattern)
SparsityPattern.insert_local = new_instancemethod(_la.SparsityPattern_insert_local, None, SparsityPattern)
SparsityPattern.insert_full_rows_local = new_instancemethod(_la.SparsityPattern_insert_full_rows_local, None, SparsityPattern)
SparsityPattern.rank = new_instancemethod(_la.SparsityPattern_rank, None, SparsityPattern)
SparsityPattern.primary_dim = new_instancemethod(_la.SparsityPattern_primary_dim, None, SparsityPattern)
SparsityPattern.local_range = new_instancemethod(_la.SparsityPattern_local_range, None, SparsityPattern)
SparsityPattern.num_nonzeros = new_instancemethod(_la.SparsityPattern_num_nonzeros, None, SparsityPattern)
SparsityPattern.num_nonzeros_diagonal = new_instancemethod(_la.SparsityPattern_num_nonzeros_diagonal, None, SparsityPattern)
SparsityPattern.num_nonzeros_off_diagonal = new_instancemethod(_la.SparsityPattern_num_nonzeros_off_diagonal, None, SparsityPattern)
SparsityPattern.num_local_nonzeros = new_instancemethod(_la.SparsityPattern_num_local_nonzeros, None, SparsityPattern)
SparsityPattern.apply = new_instancemethod(_la.SparsityPattern_apply, None, SparsityPattern)
SparsityPattern.mpi_comm = new_instancemethod(_la.SparsityPattern_mpi_comm, None, SparsityPattern)
SparsityPattern.str = new_instancemethod(_la.SparsityPattern_str, None, SparsityPattern)
SparsityPattern_swigregister = _la.SparsityPattern_swigregister
SparsityPattern_swigregister(SparsityPattern)

class IndexMap(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MapSize_ALL = _la.IndexMap_MapSize_ALL
    MapSize_OWNED = _la.IndexMap_MapSize_OWNED
    MapSize_UNOWNED = _la.IndexMap_MapSize_UNOWNED
    MapSize_GLOBAL = _la.IndexMap_MapSize_GLOBAL

    def __init__(self, *args):
        _la.IndexMap_swiginit(self, _la.new_IndexMap(*args))
    __swig_destroy__ = _la.delete_IndexMap
IndexMap.init = new_instancemethod(_la.IndexMap_init, None, IndexMap)
IndexMap.local_range = new_instancemethod(_la.IndexMap_local_range, None, IndexMap)
IndexMap.size = new_instancemethod(_la.IndexMap_size, None, IndexMap)
IndexMap.local_to_global_unowned = new_instancemethod(_la.IndexMap_local_to_global_unowned, None, IndexMap)
IndexMap.local_to_global = new_instancemethod(_la.IndexMap_local_to_global, None, IndexMap)
IndexMap.set_local_to_global = new_instancemethod(_la.IndexMap_set_local_to_global, None, IndexMap)
IndexMap.off_process_owner = new_instancemethod(_la.IndexMap_off_process_owner, None, IndexMap)
IndexMap.global_index_owner = new_instancemethod(_la.IndexMap_global_index_owner, None, IndexMap)
IndexMap.block_size = new_instancemethod(_la.IndexMap_block_size, None, IndexMap)
IndexMap.mpi_comm = new_instancemethod(_la.IndexMap_mpi_comm, None, IndexMap)
IndexMap_swigregister = _la.IndexMap_swigregister
IndexMap_swigregister(IndexMap)

class GenericLinearAlgebraFactory(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _la.delete_GenericLinearAlgebraFactory

    def create_matrix(self, comm):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericLinearAlgebraFactory_create_matrix(self, comm)


    def create_vector(self, comm):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericLinearAlgebraFactory_create_vector(self, comm)


    def create_layout(self, rank):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericLinearAlgebraFactory_create_layout(self, rank)


    def create_linear_operator(self, comm):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericLinearAlgebraFactory_create_linear_operator(self, comm)


    def create_lu_solver(self, comm, method):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericLinearAlgebraFactory_create_lu_solver(self, comm, method)


    def create_krylov_solver(self, comm, method, preconditioner):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericLinearAlgebraFactory_create_krylov_solver(self, comm, method, preconditioner)


    def lu_solver_methods(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericLinearAlgebraFactory_lu_solver_methods(self)


    def krylov_solver_methods(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericLinearAlgebraFactory_krylov_solver_methods(self)


    def krylov_solver_preconditioners(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.GenericLinearAlgebraFactory_krylov_solver_preconditioners(self)

GenericLinearAlgebraFactory.create_matrix = new_instancemethod(_la.GenericLinearAlgebraFactory_create_matrix, None, GenericLinearAlgebraFactory)
GenericLinearAlgebraFactory.create_vector = new_instancemethod(_la.GenericLinearAlgebraFactory_create_vector, None, GenericLinearAlgebraFactory)
GenericLinearAlgebraFactory.create_layout = new_instancemethod(_la.GenericLinearAlgebraFactory_create_layout, None, GenericLinearAlgebraFactory)
GenericLinearAlgebraFactory.create_linear_operator = new_instancemethod(_la.GenericLinearAlgebraFactory_create_linear_operator, None, GenericLinearAlgebraFactory)
GenericLinearAlgebraFactory.create_lu_solver = new_instancemethod(_la.GenericLinearAlgebraFactory_create_lu_solver, None, GenericLinearAlgebraFactory)
GenericLinearAlgebraFactory.create_krylov_solver = new_instancemethod(_la.GenericLinearAlgebraFactory_create_krylov_solver, None, GenericLinearAlgebraFactory)
GenericLinearAlgebraFactory.lu_solver_methods = new_instancemethod(_la.GenericLinearAlgebraFactory_lu_solver_methods, None, GenericLinearAlgebraFactory)
GenericLinearAlgebraFactory.krylov_solver_methods = new_instancemethod(_la.GenericLinearAlgebraFactory_krylov_solver_methods, None, GenericLinearAlgebraFactory)
GenericLinearAlgebraFactory.krylov_solver_preconditioners = new_instancemethod(_la.GenericLinearAlgebraFactory_krylov_solver_preconditioners, None, GenericLinearAlgebraFactory)
GenericLinearAlgebraFactory_swigregister = _la.GenericLinearAlgebraFactory_swigregister
GenericLinearAlgebraFactory_swigregister(GenericLinearAlgebraFactory)

class DefaultFactory(GenericLinearAlgebraFactory):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.DefaultFactory_swiginit(self, _la.new_DefaultFactory())
    __swig_destroy__ = _la.delete_DefaultFactory

    def factory():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.DefaultFactory_factory()

    factory = staticmethod(factory)
DefaultFactory_swigregister = _la.DefaultFactory_swigregister
DefaultFactory_swigregister(DefaultFactory)

def DefaultFactory_factory():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.DefaultFactory_factory()

class EigenFactory(GenericLinearAlgebraFactory):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _la.delete_EigenFactory

    def instance():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.EigenFactory_instance()

    instance = staticmethod(instance)
EigenFactory_swigregister = _la.EigenFactory_swigregister
EigenFactory_swigregister(EigenFactory)

def EigenFactory_instance():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.EigenFactory_instance()

class PETScUserPreconditioner(PETScObject):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        if self.__class__ == PETScUserPreconditioner:
            _self = None
        else:
            _self = self
        _la.PETScUserPreconditioner_swiginit(self, _la.new_PETScUserPreconditioner(_self, ))
    __swig_destroy__ = _la.delete_PETScUserPreconditioner

    def setup(ksp, pc):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScUserPreconditioner_setup(ksp, pc)

    setup = staticmethod(setup)

    def solve(self, x, b):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScUserPreconditioner_solve(self, x, b)

    def __disown__(self):
        self.this.disown()
        _la.disown_PETScUserPreconditioner(self)
        return weakref_proxy(self)
PETScUserPreconditioner.solve = new_instancemethod(_la.PETScUserPreconditioner_solve, None, PETScUserPreconditioner)
PETScUserPreconditioner_swigregister = _la.PETScUserPreconditioner_swigregister
PETScUserPreconditioner_swigregister(PETScUserPreconditioner)

def PETScUserPreconditioner_setup(ksp, pc):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.PETScUserPreconditioner_setup(ksp, pc)

class PETScFactory(GenericLinearAlgebraFactory):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _la.delete_PETScFactory

    def instance():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScFactory_instance()

    instance = staticmethod(instance)
PETScFactory_swigregister = _la.PETScFactory_swigregister
PETScFactory_swigregister(PETScFactory)

def PETScFactory_instance():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.PETScFactory_instance()

class SLEPcEigenSolver(common.Variable, PETScObject):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.SLEPcEigenSolver_swiginit(self, _la.new_SLEPcEigenSolver(*args))
    __swig_destroy__ = _la.delete_SLEPcEigenSolver

    def set_operators(self, A, B):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SLEPcEigenSolver_set_operators(self, A, B)


    def solve(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SLEPcEigenSolver_solve(self, *args)


    def get_iteration_number(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SLEPcEigenSolver_get_iteration_number(self)


    def get_number_converged(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SLEPcEigenSolver_get_number_converged(self)


    def set_deflation_space(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SLEPcEigenSolver_set_deflation_space(self, *args)


    def set_options_prefix(self, options_prefix):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SLEPcEigenSolver_set_options_prefix(self, options_prefix)


    def get_options_prefix(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SLEPcEigenSolver_get_options_prefix(self)


    def default_parameters():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.SLEPcEigenSolver_default_parameters()

    default_parameters = staticmethod(default_parameters)

    def _get_eigenvalue(self, i):
        """Missing docstring"""
        return _la.SLEPcEigenSolver__get_eigenvalue(self, i)


    def _get_eigenpair(self, r, c, i):
        """Missing docstring"""
        return _la.SLEPcEigenSolver__get_eigenpair(self, r, c, i)


    def get_eigenpair(self, i = 0, r_vec = None, c_vec = None,):
        """Gets the i-th solution of the eigenproblem"""
        r_vec = r_vec or PETScVector()
        c_vec = c_vec or PETScVector()
        lr, lc = self._get_eigenpair(r_vec, c_vec, i)
        return lr, lc, r_vec, c_vec

    def get_eigenvalue(self, i = 0):
        """Gets the i-th eigenvalue of the eigenproblem"""
        return self._get_eigenvalue(i)


    def eps(self):
        """Return slepc4py representation of SLEPc EPS"""
        return _la.SLEPcEigenSolver_eps(self)

SLEPcEigenSolver.set_operators = new_instancemethod(_la.SLEPcEigenSolver_set_operators, None, SLEPcEigenSolver)
SLEPcEigenSolver.solve = new_instancemethod(_la.SLEPcEigenSolver_solve, None, SLEPcEigenSolver)
SLEPcEigenSolver.get_iteration_number = new_instancemethod(_la.SLEPcEigenSolver_get_iteration_number, None, SLEPcEigenSolver)
SLEPcEigenSolver.get_number_converged = new_instancemethod(_la.SLEPcEigenSolver_get_number_converged, None, SLEPcEigenSolver)
SLEPcEigenSolver.set_deflation_space = new_instancemethod(_la.SLEPcEigenSolver_set_deflation_space, None, SLEPcEigenSolver)
SLEPcEigenSolver.set_options_prefix = new_instancemethod(_la.SLEPcEigenSolver_set_options_prefix, None, SLEPcEigenSolver)
SLEPcEigenSolver.get_options_prefix = new_instancemethod(_la.SLEPcEigenSolver_get_options_prefix, None, SLEPcEigenSolver)
SLEPcEigenSolver._get_eigenvalue = new_instancemethod(_la.SLEPcEigenSolver__get_eigenvalue, None, SLEPcEigenSolver)
SLEPcEigenSolver._get_eigenpair = new_instancemethod(_la.SLEPcEigenSolver__get_eigenpair, None, SLEPcEigenSolver)
SLEPcEigenSolver.eps = new_instancemethod(_la.SLEPcEigenSolver_eps, None, SLEPcEigenSolver)
SLEPcEigenSolver_swigregister = _la.SLEPcEigenSolver_swigregister
SLEPcEigenSolver_swigregister(SLEPcEigenSolver)

def SLEPcEigenSolver_default_parameters():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.SLEPcEigenSolver_default_parameters()

class Vector(GenericVector):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.Vector_swiginit(self, _la.new_Vector(*args))

    def init(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.Vector_init(self, *args)


    def get_local(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.Vector_get_local(self, *args)


    def set_local(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.Vector_set_local(self, *args)


    def add_local(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.Vector_add_local(self, *args)


    def gather(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.Vector_gather(self, *args)


    def sum(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.Vector_sum(self, *args)


    def shared_instance(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.Vector_shared_instance(self, *args)


    def _assign(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.Vector__assign(self, *args)

    __swig_destroy__ = _la.delete_Vector
Vector.init = new_instancemethod(_la.Vector_init, None, Vector)
Vector.get_local = new_instancemethod(_la.Vector_get_local, None, Vector)
Vector.set_local = new_instancemethod(_la.Vector_set_local, None, Vector)
Vector.add_local = new_instancemethod(_la.Vector_add_local, None, Vector)
Vector.gather = new_instancemethod(_la.Vector_gather, None, Vector)
Vector.sum = new_instancemethod(_la.Vector_sum, None, Vector)
Vector.shared_instance = new_instancemethod(_la.Vector_shared_instance, None, Vector)
Vector._assign = new_instancemethod(_la.Vector__assign, None, Vector)
Vector_swigregister = _la.Vector_swigregister
Vector_swigregister(Vector)

class Matrix(GenericMatrix):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.Matrix_swiginit(self, _la.new_Matrix(*args))
    __swig_destroy__ = _la.delete_Matrix

    def zero(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.Matrix_zero(self, *args)


    def shared_instance(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.Matrix_shared_instance(self, *args)


    def assign(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.Matrix_assign(self, *args)

Matrix.zero = new_instancemethod(_la.Matrix_zero, None, Matrix)
Matrix.shared_instance = new_instancemethod(_la.Matrix_shared_instance, None, Matrix)
Matrix.assign = new_instancemethod(_la.Matrix_assign, None, Matrix)
Matrix_swigregister = _la.Matrix_swigregister
Matrix_swigregister(Matrix)

class Scalar(GenericTensor):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.Scalar_swiginit(self, _la.new_Scalar(*args))
    __swig_destroy__ = _la.delete_Scalar

    def add_local(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.Scalar_add_local(self, *args)


    def copy(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.Scalar_copy(self)


    def get_scalar_value(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.Scalar_get_scalar_value(self)


    def add_local_value(self, value):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.Scalar_add_local_value(self, value)

Scalar.add_local = new_instancemethod(_la.Scalar_add_local, None, Scalar)
Scalar.copy = new_instancemethod(_la.Scalar_copy, None, Scalar)
Scalar.get_scalar_value = new_instancemethod(_la.Scalar_get_scalar_value, None, Scalar)
Scalar.add_local_value = new_instancemethod(_la.Scalar_add_local_value, None, Scalar)
Scalar_swigregister = _la.Scalar_swigregister
Scalar_swigregister(Scalar)

class LinearSolver(GenericLinearSolver):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.LinearSolver_swiginit(self, _la.new_LinearSolver(*args))
    __swig_destroy__ = _la.delete_LinearSolver

    def solve(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.LinearSolver_solve(self, *args)


    def default_parameters():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.LinearSolver_default_parameters()

    default_parameters = staticmethod(default_parameters)
LinearSolver.solve = new_instancemethod(_la.LinearSolver_solve, None, LinearSolver)
LinearSolver_swigregister = _la.LinearSolver_swigregister
LinearSolver_swigregister(LinearSolver)

def LinearSolver_default_parameters():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.LinearSolver_default_parameters()

class KrylovSolver(GenericLinearSolver):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.KrylovSolver_swiginit(self, _la.new_KrylovSolver(*args))
    __swig_destroy__ = _la.delete_KrylovSolver

    def solve(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.KrylovSolver_solve(self, *args)


    def default_parameters():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.KrylovSolver_default_parameters()

    default_parameters = staticmethod(default_parameters)
KrylovSolver.solve = new_instancemethod(_la.KrylovSolver_solve, None, KrylovSolver)
KrylovSolver_swigregister = _la.KrylovSolver_swigregister
KrylovSolver_swigregister(KrylovSolver)

def KrylovSolver_default_parameters():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.KrylovSolver_default_parameters()

class LUSolver(GenericLinearSolver):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.LUSolver_swiginit(self, _la.new_LUSolver(*args))
    __swig_destroy__ = _la.delete_LUSolver

    def solve(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.LUSolver_solve(self, *args)


    def default_parameters():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.LUSolver_default_parameters()

    default_parameters = staticmethod(default_parameters)
LUSolver.solve = new_instancemethod(_la.LUSolver_solve, None, LUSolver)
LUSolver_swigregister = _la.LUSolver_swigregister
LUSolver_swigregister(LUSolver)

def LUSolver_default_parameters():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.LUSolver_default_parameters()


def la_solve(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.la_solve(*args)

def list_linear_algebra_backends():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.list_linear_algebra_backends()

def list_linear_solver_methods():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.list_linear_solver_methods()

def list_lu_solver_methods():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.list_lu_solver_methods()

def list_krylov_solver_methods():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.list_krylov_solver_methods()

def list_krylov_solver_preconditioners():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.list_krylov_solver_preconditioners()

def has_linear_algebra_backend(backend):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.has_linear_algebra_backend(backend)

def has_lu_solver_method(method):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.has_lu_solver_method(method)

def has_krylov_solver_method(method):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.has_krylov_solver_method(method)

def has_krylov_solver_preconditioner(preconditioner):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.has_krylov_solver_preconditioner(preconditioner)

def linear_algebra_backends():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.linear_algebra_backends()

def linear_solver_methods():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.linear_solver_methods()

def lu_solver_methods():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.lu_solver_methods()

def krylov_solver_methods():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.krylov_solver_methods()

def krylov_solver_preconditioners():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.krylov_solver_preconditioners()

def residual(A, x, b):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.residual(A, x, b)

def normalize(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.normalize(*args)

def in_nullspace(*args):
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.in_nullspace(*args)
class BlockVector(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, n=0):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.BlockVector_swiginit(self, _la.new_BlockVector(n))
    __swig_destroy__ = _la.delete_BlockVector

    def copy(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockVector_copy(self)


    def set_block(self, i, v):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockVector_set_block(self, i, v)


    def get_block(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockVector_get_block(self, *args)


    def axpy(self, a, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockVector_axpy(self, a, x)


    def inner(self, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockVector_inner(self, x)


    def norm(self, norm_type):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockVector_norm(self, norm_type)


    def min(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockVector_min(self)


    def max(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockVector_max(self)


    def __imul__(self, a):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockVector___imul__(self, a)


    def __itruediv__(self, *args):
        return _la.BlockVector___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockVector___iadd__(self, x)


    def __isub__(self, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockVector___isub__(self, x)


    def empty(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockVector_empty(self)


    def size(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockVector_size(self)


    def str(self, verbose):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockVector_str(self, verbose)



    def __getitem__(self, i):
        return self.get_block(i)

    def __setitem__(self, i, m):
        if not hasattr(self, "_items"):
            self._items = {}
        self._items[i] = m
        self.set_block(i, m)

    def __add__(self, v):
      a = self.copy()
      a += v
      return a

    def __sub__(self, v):
      a = self.copy()
      a -= v
      return a

    def __mul__(self, v):
      a = self.copy()
      a *= v
      return a

    def __rmul__(self, v):
      return self.__mul__(v)

BlockVector.copy = new_instancemethod(_la.BlockVector_copy, None, BlockVector)
BlockVector.set_block = new_instancemethod(_la.BlockVector_set_block, None, BlockVector)
BlockVector.get_block = new_instancemethod(_la.BlockVector_get_block, None, BlockVector)
BlockVector.axpy = new_instancemethod(_la.BlockVector_axpy, None, BlockVector)
BlockVector.inner = new_instancemethod(_la.BlockVector_inner, None, BlockVector)
BlockVector.norm = new_instancemethod(_la.BlockVector_norm, None, BlockVector)
BlockVector.min = new_instancemethod(_la.BlockVector_min, None, BlockVector)
BlockVector.max = new_instancemethod(_la.BlockVector_max, None, BlockVector)
BlockVector.__imul__ = new_instancemethod(_la.BlockVector___imul__, None, BlockVector)
BlockVector.__iadd__ = new_instancemethod(_la.BlockVector___iadd__, None, BlockVector)
BlockVector.__isub__ = new_instancemethod(_la.BlockVector___isub__, None, BlockVector)
BlockVector.empty = new_instancemethod(_la.BlockVector_empty, None, BlockVector)
BlockVector.size = new_instancemethod(_la.BlockVector_size, None, BlockVector)
BlockVector.str = new_instancemethod(_la.BlockVector_str, None, BlockVector)
BlockVector_swigregister = _la.BlockVector_swigregister
BlockVector_swigregister(BlockVector)

class BlockMatrix(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, m=0, n=0):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.BlockMatrix_swiginit(self, _la.new_BlockMatrix(m, n))
    __swig_destroy__ = _la.delete_BlockMatrix

    def set_block(self, i, j, m):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockMatrix_set_block(self, i, j, m)


    def get_block(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockMatrix_get_block(self, *args)


    def size(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockMatrix_size(self, dim)


    def zero(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockMatrix_zero(self)


    def apply(self, mode):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockMatrix_apply(self, mode)


    def str(self, verbose):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockMatrix_str(self, verbose)


    def mult(self, x, y, transposed=False):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockMatrix_mult(self, x, y, transposed)


    def schur_approximation(self, symmetry=True):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.BlockMatrix_schur_approximation(self, symmetry)


    def __mul__(self, other):
        v = BlockVector(self.size(0))
        self.mult(other, v)
        return v

    def __getitem__(self, t):
        i,j = t
        return self.get_block(i, j)

    def __setitem__(self, t, m):
        if not hasattr(self, "_items"):
            self._items = {}
        self._items[t] = m
        i,j = t
        self.set_block(i, j, m)


BlockMatrix.set_block = new_instancemethod(_la.BlockMatrix_set_block, None, BlockMatrix)
BlockMatrix.get_block = new_instancemethod(_la.BlockMatrix_get_block, None, BlockMatrix)
BlockMatrix.size = new_instancemethod(_la.BlockMatrix_size, None, BlockMatrix)
BlockMatrix.zero = new_instancemethod(_la.BlockMatrix_zero, None, BlockMatrix)
BlockMatrix.apply = new_instancemethod(_la.BlockMatrix_apply, None, BlockMatrix)
BlockMatrix.str = new_instancemethod(_la.BlockMatrix_str, None, BlockMatrix)
BlockMatrix.mult = new_instancemethod(_la.BlockMatrix_mult, None, BlockMatrix)
BlockMatrix.schur_approximation = new_instancemethod(_la.BlockMatrix_schur_approximation, None, BlockMatrix)
BlockMatrix_swigregister = _la.BlockMatrix_swigregister
BlockMatrix_swigregister(BlockMatrix)

class LinearOperator(GenericLinearOperator):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        if self.__class__ == LinearOperator:
            _self = None
        else:
            _self = self
        _la.LinearOperator_swiginit(self, _la.new_LinearOperator(_self, *args))
    __swig_destroy__ = _la.delete_LinearOperator

    def size(self, dim):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.LinearOperator_size(self, dim)


    def mult(self, x, y):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.LinearOperator_mult(self, x, y)


    def mpi_comm(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.LinearOperator_mpi_comm(self)


    def str(self, verbose):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.LinearOperator_str(self, verbose)


    def shared_instance(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.LinearOperator_shared_instance(self, *args)

    def __disown__(self):
        self.this.disown()
        _la.disown_LinearOperator(self)
        return weakref_proxy(self)

    def init_layout(self, x, y, wrapper):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.LinearOperator_init_layout(self, x, y, wrapper)

LinearOperator.size = new_instancemethod(_la.LinearOperator_size, None, LinearOperator)
LinearOperator.mult = new_instancemethod(_la.LinearOperator_mult, None, LinearOperator)
LinearOperator.mpi_comm = new_instancemethod(_la.LinearOperator_mpi_comm, None, LinearOperator)
LinearOperator.str = new_instancemethod(_la.LinearOperator_str, None, LinearOperator)
LinearOperator.shared_instance = new_instancemethod(_la.LinearOperator_shared_instance, None, LinearOperator)
LinearOperator.init_layout = new_instancemethod(_la.LinearOperator_init_layout, None, LinearOperator)
LinearOperator_swigregister = _la.LinearOperator_swigregister
LinearOperator_swigregister(LinearOperator)


def la_index_dtype():
    "Return the numpy dtype equivalent to the type of la_index"
    from numpy import intc, int64
    return intc if common.sizeof_la_index() == 4 else int64


_has_type_map = {}
_as_backend_type_map = {}
# A map with matrix types as keys and list of possible vector types as values
_matrix_vector_mul_map = {}


def _has_type_EigenVector(tensor):
    return _la._has_type_EigenVector(tensor)
_has_type_EigenVector = _la._has_type_EigenVector

def _as_backend_type_EigenVector(tensor):
    return _la._as_backend_type_EigenVector(tensor)
_as_backend_type_EigenVector = _la._as_backend_type_EigenVector

_has_type_map[EigenVector] = _has_type_EigenVector
_as_backend_type_map[EigenVector] = _as_backend_type_EigenVector


def _has_type_EigenMatrix(tensor):
    return _la._has_type_EigenMatrix(tensor)
_has_type_EigenMatrix = _la._has_type_EigenMatrix

def _as_backend_type_EigenMatrix(tensor):
    return _la._as_backend_type_EigenMatrix(tensor)
_as_backend_type_EigenMatrix = _la._as_backend_type_EigenMatrix

_has_type_map[EigenMatrix] = _has_type_EigenMatrix
_as_backend_type_map[EigenMatrix] = _as_backend_type_EigenMatrix


_matrix_vector_mul_map[EigenMatrix] = [EigenVector]


def _has_type_PETScVector(tensor):
    return _la._has_type_PETScVector(tensor)
_has_type_PETScVector = _la._has_type_PETScVector

def _as_backend_type_PETScVector(tensor):
    return _la._as_backend_type_PETScVector(tensor)
_as_backend_type_PETScVector = _la._as_backend_type_PETScVector

_has_type_map[PETScVector] = _has_type_PETScVector
_as_backend_type_map[PETScVector] = _as_backend_type_PETScVector


def _has_type_PETScMatrix(tensor):
    return _la._has_type_PETScMatrix(tensor)
_has_type_PETScMatrix = _la._has_type_PETScMatrix

def _as_backend_type_PETScMatrix(tensor):
    return _la._as_backend_type_PETScMatrix(tensor)
_as_backend_type_PETScMatrix = _la._as_backend_type_PETScMatrix

_has_type_map[PETScMatrix] = _has_type_PETScMatrix
_as_backend_type_map[PETScMatrix] = _as_backend_type_PETScMatrix


def _has_type_PETScLinearOperator(tensor):
    return _la._has_type_PETScLinearOperator(tensor)
_has_type_PETScLinearOperator = _la._has_type_PETScLinearOperator

def _as_backend_type_PETScLinearOperator(tensor):
    return _la._as_backend_type_PETScLinearOperator(tensor)
_as_backend_type_PETScLinearOperator = _la._as_backend_type_PETScLinearOperator

_has_type_map[PETScLinearOperator] = _has_type_PETScLinearOperator
_as_backend_type_map[PETScLinearOperator] = _as_backend_type_PETScLinearOperator


_matrix_vector_mul_map[PETScMatrix] = [PETScVector]
_matrix_vector_mul_map[PETScLinearOperator] = [PETScVector]


def get_tensor_type(tensor):
    "Return the concrete subclass of tensor."
    for k, v in _has_type_map.items():
        if v(tensor):
            return k
    common.dolfin_error("dolfin/swig/la/post.i",
                        "extract backend type for %s" % type(tensor).__name__,
                        "Unable to get tensor type in Python layer")

def has_type(tensor, subclass):
    "Return wether tensor is of the given subclass."
    global _has_type_map
    assert _has_type_map
    assert subclass in _has_type_map
    return bool(_has_type_map[subclass](tensor))

def as_backend_type(tensor, subclass=None):
    "Cast tensor to the given subclass, passing the wrong class is an error."
    global _as_backend_type_map
    assert _as_backend_type_map
    if subclass is None:
        subclass = get_tensor_type(tensor)
    assert subclass in _as_backend_type_map
    ret = _as_backend_type_map[subclass](tensor)

# Store the tensor to avoid garbage collection
    ret._org_upcasted_tensor = tensor
    return ret


class NonlinearProblem(object):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        if self.__class__ == NonlinearProblem:
            _self = None
        else:
            _self = self
        _la.NonlinearProblem_swiginit(self, _la.new_NonlinearProblem(_self, ))
    __swig_destroy__ = _la.delete_NonlinearProblem

    def form(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.NonlinearProblem_form(self, *args)


    def F(self, b, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.NonlinearProblem_F(self, b, x)


    def J(self, A, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.NonlinearProblem_J(self, A, x)


    def J_pc(self, P, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.NonlinearProblem_J_pc(self, P, x)

    def __disown__(self):
        self.this.disown()
        _la.disown_NonlinearProblem(self)
        return weakref_proxy(self)
NonlinearProblem.form = new_instancemethod(_la.NonlinearProblem_form, None, NonlinearProblem)
NonlinearProblem.F = new_instancemethod(_la.NonlinearProblem_F, None, NonlinearProblem)
NonlinearProblem.J = new_instancemethod(_la.NonlinearProblem_J, None, NonlinearProblem)
NonlinearProblem.J_pc = new_instancemethod(_la.NonlinearProblem_J_pc, None, NonlinearProblem)
NonlinearProblem_swigregister = _la.NonlinearProblem_swigregister
NonlinearProblem_swigregister(NonlinearProblem)

class NewtonSolver(common.Variable):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        if self.__class__ == NewtonSolver:
            _self = None
        else:
            _self = self
        _la.NewtonSolver_swiginit(self, _la.new_NewtonSolver(_self, *args))
    __swig_destroy__ = _la.delete_NewtonSolver

    def solve(self, nonlinear_function, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.NewtonSolver_solve(self, nonlinear_function, x)


    def iteration(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.NewtonSolver_iteration(self)


    def krylov_iterations(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.NewtonSolver_krylov_iterations(self)


    def residual(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.NewtonSolver_residual(self)


    def residual0(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.NewtonSolver_residual0(self)


    def relative_residual(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.NewtonSolver_relative_residual(self)


    def linear_solver(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.NewtonSolver_linear_solver(self)


    def default_parameters():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.NewtonSolver_default_parameters()

    default_parameters = staticmethod(default_parameters)

    def set_relaxation_parameter(self, relaxation_parameter):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.NewtonSolver_set_relaxation_parameter(self, relaxation_parameter)


    def get_relaxation_parameter(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.NewtonSolver_get_relaxation_parameter(self)


    def converged(self, r, nonlinear_problem, iteration):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.NewtonSolver_converged(self, r, nonlinear_problem, iteration)


    def solver_setup(self, A, P, nonlinear_problem, iteration):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.NewtonSolver_solver_setup(self, A, P, nonlinear_problem, iteration)


    def update_solution(self, x, dx, relaxation_parameter, nonlinear_problem, iteration):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.NewtonSolver_update_solution(self, x, dx, relaxation_parameter, nonlinear_problem, iteration)

    def __disown__(self):
        self.this.disown()
        _la.disown_NewtonSolver(self)
        return weakref_proxy(self)
NewtonSolver.solve = new_instancemethod(_la.NewtonSolver_solve, None, NewtonSolver)
NewtonSolver.iteration = new_instancemethod(_la.NewtonSolver_iteration, None, NewtonSolver)
NewtonSolver.krylov_iterations = new_instancemethod(_la.NewtonSolver_krylov_iterations, None, NewtonSolver)
NewtonSolver.residual = new_instancemethod(_la.NewtonSolver_residual, None, NewtonSolver)
NewtonSolver.residual0 = new_instancemethod(_la.NewtonSolver_residual0, None, NewtonSolver)
NewtonSolver.relative_residual = new_instancemethod(_la.NewtonSolver_relative_residual, None, NewtonSolver)
NewtonSolver.linear_solver = new_instancemethod(_la.NewtonSolver_linear_solver, None, NewtonSolver)
NewtonSolver.set_relaxation_parameter = new_instancemethod(_la.NewtonSolver_set_relaxation_parameter, None, NewtonSolver)
NewtonSolver.get_relaxation_parameter = new_instancemethod(_la.NewtonSolver_get_relaxation_parameter, None, NewtonSolver)
NewtonSolver.converged = new_instancemethod(_la.NewtonSolver_converged, None, NewtonSolver)
NewtonSolver.solver_setup = new_instancemethod(_la.NewtonSolver_solver_setup, None, NewtonSolver)
NewtonSolver.update_solution = new_instancemethod(_la.NewtonSolver_update_solution, None, NewtonSolver)
NewtonSolver_swigregister = _la.NewtonSolver_swigregister
NewtonSolver_swigregister(NewtonSolver)

def NewtonSolver_default_parameters():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.NewtonSolver_default_parameters()

class OptimisationProblem(NonlinearProblem):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        if self.__class__ == OptimisationProblem:
            _self = None
        else:
            _self = self
        _la.OptimisationProblem_swiginit(self, _la.new_OptimisationProblem(_self, ))
    __swig_destroy__ = _la.delete_OptimisationProblem

    def f(self, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.OptimisationProblem_f(self, x)


    def form(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.OptimisationProblem_form(self, *args)


    def F(self, b, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.OptimisationProblem_F(self, b, x)


    def J(self, A, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.OptimisationProblem_J(self, A, x)


    def J_pc(self, P, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.OptimisationProblem_J_pc(self, P, x)

    def __disown__(self):
        self.this.disown()
        _la.disown_OptimisationProblem(self)
        return weakref_proxy(self)
OptimisationProblem.f = new_instancemethod(_la.OptimisationProblem_f, None, OptimisationProblem)
OptimisationProblem.form = new_instancemethod(_la.OptimisationProblem_form, None, OptimisationProblem)
OptimisationProblem.F = new_instancemethod(_la.OptimisationProblem_F, None, OptimisationProblem)
OptimisationProblem.J = new_instancemethod(_la.OptimisationProblem_J, None, OptimisationProblem)
OptimisationProblem.J_pc = new_instancemethod(_la.OptimisationProblem_J_pc, None, OptimisationProblem)
OptimisationProblem_swigregister = _la.OptimisationProblem_swigregister
OptimisationProblem_swigregister(OptimisationProblem)

class PETScSNESSolver(PETScObject):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.PETScSNESSolver_swiginit(self, _la.new_PETScSNESSolver(*args))
    __swig_destroy__ = _la.delete_PETScSNESSolver

    def solve(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScSNESSolver_solve(self, *args)


    def init(self, nonlinear_problem, x):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScSNESSolver_init(self, nonlinear_problem, x)


    def set_from_options(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScSNESSolver_set_from_options(self)


    def set_options_prefix(self, options_prefix):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScSNESSolver_set_options_prefix(self, options_prefix)


    def get_options_prefix(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScSNESSolver_get_options_prefix(self)


    def mpi_comm(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScSNESSolver_mpi_comm(self)


    def methods():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScSNESSolver_methods()

    methods = staticmethod(methods)

    def default_parameters():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScSNESSolver_default_parameters()

    default_parameters = staticmethod(default_parameters)
    parameters = _swig_property(_la.PETScSNESSolver_parameters_get, _la.PETScSNESSolver_parameters_set)

    def snes(self):
        """Return petsc4py representation of PETSc SNES solver"""
        return _la.PETScSNESSolver_snes(self)

PETScSNESSolver.solve = new_instancemethod(_la.PETScSNESSolver_solve, None, PETScSNESSolver)
PETScSNESSolver.init = new_instancemethod(_la.PETScSNESSolver_init, None, PETScSNESSolver)
PETScSNESSolver.set_from_options = new_instancemethod(_la.PETScSNESSolver_set_from_options, None, PETScSNESSolver)
PETScSNESSolver.set_options_prefix = new_instancemethod(_la.PETScSNESSolver_set_options_prefix, None, PETScSNESSolver)
PETScSNESSolver.get_options_prefix = new_instancemethod(_la.PETScSNESSolver_get_options_prefix, None, PETScSNESSolver)
PETScSNESSolver.mpi_comm = new_instancemethod(_la.PETScSNESSolver_mpi_comm, None, PETScSNESSolver)
PETScSNESSolver.snes = new_instancemethod(_la.PETScSNESSolver_snes, None, PETScSNESSolver)
PETScSNESSolver_swigregister = _la.PETScSNESSolver_swigregister
PETScSNESSolver_swigregister(PETScSNESSolver)

def PETScSNESSolver_methods():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.PETScSNESSolver_methods()

def PETScSNESSolver_default_parameters():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.PETScSNESSolver_default_parameters()

class PETScTAOSolver(PETScObject):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.PETScTAOSolver_swiginit(self, _la.new_PETScTAOSolver(*args))
    __swig_destroy__ = _la.delete_PETScTAOSolver

    def solve(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScTAOSolver_solve(self, *args)


    def mpi_comm(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScTAOSolver_mpi_comm(self)


    def methods():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScTAOSolver_methods()

    methods = staticmethod(methods)

    def default_parameters():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScTAOSolver_default_parameters()

    default_parameters = staticmethod(default_parameters)
    parameters = _swig_property(_la.PETScTAOSolver_parameters_get, _la.PETScTAOSolver_parameters_set)

    def init(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.PETScTAOSolver_init(self, *args)


    def tao(self):
        """Return petsc4py representation of PETSc TAO solver"""
        return _la.PETScTAOSolver_tao(self)

PETScTAOSolver.solve = new_instancemethod(_la.PETScTAOSolver_solve, None, PETScTAOSolver)
PETScTAOSolver.mpi_comm = new_instancemethod(_la.PETScTAOSolver_mpi_comm, None, PETScTAOSolver)
PETScTAOSolver.init = new_instancemethod(_la.PETScTAOSolver_init, None, PETScTAOSolver)
PETScTAOSolver.tao = new_instancemethod(_la.PETScTAOSolver_tao, None, PETScTAOSolver)
PETScTAOSolver_swigregister = _la.PETScTAOSolver_swigregister
PETScTAOSolver_swigregister(PETScTAOSolver)

def PETScTAOSolver_methods():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.PETScTAOSolver_methods()

def PETScTAOSolver_default_parameters():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.PETScTAOSolver_default_parameters()

class TAOLinearBoundSolver(common.Variable, PETScObject):
    """

    Dummy docstring. Reason: Missing doxygen

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        _la.TAOLinearBoundSolver_swiginit(self, _la.new_TAOLinearBoundSolver(*args))
    __swig_destroy__ = _la.delete_TAOLinearBoundSolver

    def solve(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.TAOLinearBoundSolver_solve(self, *args)


    def set_solver(self, arg2):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.TAOLinearBoundSolver_set_solver(self, arg2)


    def set_ksp(self, *args):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.TAOLinearBoundSolver_set_ksp(self, *args)


    def tao(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.TAOLinearBoundSolver_tao(self)


    def methods():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.TAOLinearBoundSolver_methods()

    methods = staticmethod(methods)

    def krylov_solvers():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.TAOLinearBoundSolver_krylov_solvers()

    krylov_solvers = staticmethod(krylov_solvers)

    def preconditioners():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.TAOLinearBoundSolver_preconditioners()

    preconditioners = staticmethod(preconditioners)

    def default_parameters():
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.TAOLinearBoundSolver_default_parameters()

    default_parameters = staticmethod(default_parameters)

    def get_matrix(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.TAOLinearBoundSolver_get_matrix(self)


    def get_vector(self):
        """

        Dummy docstring. Reason: Missing doxygen

        """
        return _la.TAOLinearBoundSolver_get_vector(self)

TAOLinearBoundSolver.solve = new_instancemethod(_la.TAOLinearBoundSolver_solve, None, TAOLinearBoundSolver)
TAOLinearBoundSolver.set_solver = new_instancemethod(_la.TAOLinearBoundSolver_set_solver, None, TAOLinearBoundSolver)
TAOLinearBoundSolver.set_ksp = new_instancemethod(_la.TAOLinearBoundSolver_set_ksp, None, TAOLinearBoundSolver)
TAOLinearBoundSolver.tao = new_instancemethod(_la.TAOLinearBoundSolver_tao, None, TAOLinearBoundSolver)
TAOLinearBoundSolver.get_matrix = new_instancemethod(_la.TAOLinearBoundSolver_get_matrix, None, TAOLinearBoundSolver)
TAOLinearBoundSolver.get_vector = new_instancemethod(_la.TAOLinearBoundSolver_get_vector, None, TAOLinearBoundSolver)
TAOLinearBoundSolver_swigregister = _la.TAOLinearBoundSolver_swigregister
TAOLinearBoundSolver_swigregister(TAOLinearBoundSolver)

def TAOLinearBoundSolver_methods():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.TAOLinearBoundSolver_methods()

def TAOLinearBoundSolver_krylov_solvers():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.TAOLinearBoundSolver_krylov_solvers()

def TAOLinearBoundSolver_preconditioners():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.TAOLinearBoundSolver_preconditioners()

def TAOLinearBoundSolver_default_parameters():
    """

    Dummy docstring. Reason: Missing doxygen

    """
    return _la.TAOLinearBoundSolver_default_parameters()



